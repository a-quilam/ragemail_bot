"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""
import unittest
import asyncio
import tempfile
import os
import sys
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–æ—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'bot'))

import aiosqlite
from app.infra.db import connect
from app.infra.repo.users_repo import UsersRepo
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.posts_repo import PostsRepo
from app.infra.repo.stats_repo import StatsRepo
from app.services.alias_service import AliasService
from app.services.post_service import PostService
from app.services.relay_service import RelayService
from app.utils.backup import BackupManager
from app.core.permissions import PermissionManager, Role
from app.validators.db_validators import validate_before_insert

class TestCriticalScenarios(unittest.IsolatedAsyncioTestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    async def asyncSetUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db = await connect(self.temp_db.name)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        self.users_repo = UsersRepo(self.db)
        self.mailboxes_repo = MailboxesRepo(self.db)
        self.posts_repo = PostsRepo(self.db)
        self.stats_repo = StatsRepo(self.db)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.tz = ZoneInfo("UTC")
        self.alias_service = AliasService(self.users_repo, self.tz)
        
        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è PostService
        self.mock_bot = AsyncMock()
        self.post_service = PostService(self.mock_bot, self.tz, self.posts_repo, AsyncMock())
        
        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è RelayService
        self.relay_service = RelayService(self.mock_bot, self.tz, AsyncMock())
    
    async def asyncTearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        await self.db.close()
        os.unlink(self.temp_db.name)
    
    async def test_user_registration_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 12345
        username = "test_user"
        
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.users_repo.upsert(user_id, role="user", username=username)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
        user = await self.users_repo.get(user_id)
        self.assertIsNotNone(user)
        self.assertEqual(user[0], user_id)
        self.assertEqual(user[1], "user")
        self.assertEqual(user[4], username)
        
        # 3. –°–æ–∑–¥–∞–µ–º —è—â–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mailbox_id = await self.mailboxes_repo.create(
            title="Test Mailbox",
            channel_id=-1001234567890,
            creator_id=user_id
        )
        
        # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫
        await self.users_repo.set_active_mailbox(user_id, mailbox_id)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è—â–∏–∫ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω
        active_mailbox = await self.users_repo.get_active_mailbox(user_id)
        self.assertEqual(active_mailbox, mailbox_id)
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        is_creator = await self.mailboxes_repo.is_creator(mailbox_id, user_id)
        self.assertTrue(is_creator)
    
    async def test_post_creation_and_management(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏"""
        user_id = 12345
        channel_id = -1001234567890
        
        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è—â–∏–∫
        await self.users_repo.upsert(user_id, role="user")
        mailbox_id = await self.mailboxes_repo.create(
            title="Test Mailbox",
            channel_id=channel_id,
            creator_id=user_id
        )
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        alias = "üê± –º–∏–ª—ã–π –∫–æ—Ç–∏–∫"
        text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        base_delete_at = int((datetime.now() + timedelta(hours=1)).timestamp())
        delete_at = base_delete_at
        
        await self.posts_repo.add(
            chat_id=channel_id,
            message_id=1,
            author_id=user_id,
            alias=alias,
            base_text=text,
            base_delete_at=base_delete_at,
            delete_at=delete_at
        )
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω
        post = await self.posts_repo.get(channel_id, 1)
        self.assertIsNotNone(post)
        self.assertEqual(post[2], user_id)
        self.assertEqual(post[3], alias)
        self.assertEqual(post[4], text)
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è
        new_delete_at = int((datetime.now() + timedelta(hours=2)).timestamp())
        await self.posts_repo.set_delete_at(channel_id, 1, new_delete_at)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updated_post = await self.posts_repo.get(channel_id, 1)
        self.assertEqual(updated_post[6], new_delete_at)
        
        # 6. –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
        await self.posts_repo.delete(channel_id, 1)
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω
        deleted_post = await self.posts_repo.get(channel_id, 1)
        self.assertIsNone(deleted_post)
    
    async def test_alias_generation_and_caching(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = 12345
        
        # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.users_repo.upsert(user_id, role="user")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º
        alias1 = await self.alias_service.get_or_issue(user_id)
        self.assertIsNotNone(alias1)
        self.assertIsInstance(alias1, str)
        self.assertGreater(len(alias1), 0)
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ç –∂–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω)
        alias2 = await self.alias_service.get_or_issue(user_id)
        self.assertEqual(alias1, alias2)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î
        day = self.alias_service._today_key()
        saved_alias = await self.alias_service.repo.get_for_today(user_id, day)
        self.assertEqual(saved_alias, alias1)
    
    async def test_statistics_collection(self):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self.stats_repo.inc("2024-01-01", "posts_created")
        await self.stats_repo.inc("2024-01-01", "posts_created")
        await self.stats_repo.inc("2024-01-01", "users_registered")
        await self.stats_repo.inc("2024-01-02", "posts_created")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
        stats = await self.stats_repo.last_7_days("2024-01-01")
        self.assertGreater(len(stats), 0)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        aggregated = await self.stats_repo.get_aggregated_stats("2024-01-01", "day")
        self.assertIn("2024-01-01", aggregated)
        self.assertIn("2024-01-02", aggregated)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –∫–ª—é—á–µ–π
        top_keys = await self.stats_repo.get_top_keys("2024-01-01", limit=5)
        self.assertGreater(len(top_keys), 0)
        # posts_created –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ (2 –∑–∞–ø–∏—Å–∏)
        self.assertEqual(top_keys[0][0], "posts_created")
        self.assertEqual(top_keys[0][1], 3)  # 2 + 1 = 3
    
    async def test_backup_and_restore(self):
        """–¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await self.users_repo.upsert(12345, role="admin", username="admin")
        await self.users_repo.upsert(67890, role="user", username="user")
        
        mailbox_id = await self.mailboxes_repo.create(
            title="Test Mailbox",
            channel_id=-1001234567890,
            creator_id=12345
        )
        
        # 2. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_manager = BackupManager(self.db)
        backup_data = await backup_manager.export_data()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±—ç–∫–∞–ø–∞
        self.assertIn("users", backup_data)
        self.assertIn("mailboxes", backup_data)
        self.assertIn("checksum", backup_data)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        is_valid = backup_manager.verify_backup_integrity(backup_data)
        self.assertTrue(is_valid)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        structure_errors = backup_manager.validate_backup_structure(backup_data)
        self.assertEqual(len(structure_errors), 0)
    
    async def test_permission_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        from app.core.permissions import AccessContext
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        user_context = AccessContext(user_id=1, user_role=Role.USER)
        admin_context = AccessContext(user_id=2, user_role=Role.ADMIN)
        superadmin_context = AccessContext(user_id=3, user_role=Role.SUPERADMIN)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        self.assertFalse(PermissionManager.has_permission(Role.USER, Permission.MANAGE_USERS))
        self.assertTrue(PermissionManager.has_permission(Role.ADMIN, Permission.MANAGE_USERS))
        self.assertTrue(PermissionManager.has_permission(Role.SUPERADMIN, Permission.SYSTEM_SETTINGS))
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —è—â–∏–∫–∞–º
        user_context.is_mailbox_creator = True
        self.assertTrue(PermissionManager.can_access_mailbox(user_context))
        
        user_context.is_mailbox_creator = False
        self.assertFalse(PermissionManager.can_access_mailbox(user_context))
        
        self.assertTrue(PermissionManager.can_access_mailbox(admin_context))
        self.assertTrue(PermissionManager.can_access_mailbox(superadmin_context))
    
    async def test_data_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # 1. –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        valid_user_data = {
            "user_id": 12345,
            "role": "user",
            "username": "valid_user"
        }
        result = validate_before_insert("users", valid_user_data)
        self.assertTrue(result.is_valid)
        
        # 2. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        invalid_user_data = {
            "user_id": "not_a_number",
            "role": "invalid_role",
            "username": "ab"  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        }
        result = validate_before_insert("users", invalid_user_data)
        self.assertFalse(result.is_valid)
        self.assertGreater(len(result.errors), 0)
        
        # 3. –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞
        valid_mailbox_data = {
            "title": "Valid Mailbox",
            "channel_id": -1001234567890
        }
        result = validate_before_insert("mailboxes", valid_mailbox_data)
        self.assertTrue(result.is_valid)
        
        # 4. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞
        invalid_mailbox_data = {
            "title": "ab",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            "channel_id": 12345  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID
        }
        result = validate_before_insert("mailboxes", invalid_mailbox_data)
        self.assertFalse(result.is_valid)
        self.assertGreater(len(result.errors), 0)
    
    async def test_concurrent_operations(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        # 1. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        user_ids = [1001, 1002, 1003, 1004, 1005]
        
        async def create_user(user_id):
            await self.users_repo.upsert(user_id, role="user", username=f"user_{user_id}")
            return user_id
        
        # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [create_user(user_id) for user_id in user_ids]
        results = await asyncio.gather(*tasks)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.assertEqual(len(results), len(user_ids))
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        for user_id in user_ids:
            user = await self.users_repo.get(user_id)
            self.assertIsNotNone(user)
            self.assertEqual(user[0], user_id)
    
    async def test_error_handling_and_recovery(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            await self.users_repo.upsert("invalid_id", role="user")
            self.fail("Should have raised an exception")
        except Exception:
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
            pass
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        await self.users_repo.upsert(99999, role="user", username="recovery_user")
        
        user = await self.users_repo.get(99999)
        self.assertIsNotNone(user)
        self.assertEqual(user[0], 99999)
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await self.db.execute("BEGIN TRANSACTION")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.users_repo.upsert(88888, role="user", username="transaction_user")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            raise Exception("Simulated error")
            
        except Exception:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await self.db.rollback()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω
        user = await self.users_repo.get(88888)
        self.assertIsNone(user)

if __name__ == '__main__':
    unittest.main()
