"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è cmd_stats.py
"""
import pytest
import asyncio
import aiosqlite
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import types

from app.features.admin.cmd_stats import cmd_stats, ErrorCodes, Metrics
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.stats_repo import StatsRepo


class TestCmdStatsIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    @pytest.fixture
    async def db_connection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db = await aiosqlite.connect(":memory:")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await db.execute("""
            CREATE TABLE mailboxes (
                id INTEGER PRIMARY KEY,
                title TEXT NOT NULL,
                channel_id TEXT UNIQUE,
                creator_id INTEGER,
                stats_day INTEGER DEFAULT 1,
                stats_time TEXT DEFAULT '09:00'
            )
        """)
        
        await db.execute("""
            CREATE TABLE stats (
                day INTEGER,
                key TEXT,
                count INTEGER DEFAULT 0,
                mailbox_id INTEGER,
                PRIMARY KEY (day, key, mailbox_id)
            )
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db.execute("""
            INSERT INTO mailboxes (id, title, channel_id, creator_id, stats_day, stats_time) 
            VALUES (1, 'Test Mailbox', '@test_channel', 1, 1, '09:00')
        """)
        
        await db.execute("""
            INSERT INTO stats (day, key, count, mailbox_id) 
            VALUES (1, 'posts', 10, 1), (1, 'users', 5, 1)
        """)
        
        await db.commit()
        yield db
        await db.close()
    
    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 1
        message.from_user.username = "admin_user"
        message.answer = AsyncMock()
        return message
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_success(self, db_connection, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ú–æ–∫–∞–µ–º rate limiter
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter:
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            # –ú–æ–∫–∞–µ–º circuit breaker
            with patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker:
                mock_breaker.return_value = AsyncMock()
                mock_breaker.return_value.call = AsyncMock(return_value=("Test Mailbox", "@test_channel", 1, "09:00"))
                
                # –ú–æ–∫–∞–µ–º can_manage_mailbox
                with patch('app.features.admin.cmd_stats.can_manage_mailbox') as mock_permissions:
                    mock_permissions.return_value = True
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    await cmd_stats(mock_message, db_connection, 1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    mock_message.answer.assert_called_once()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    call_args = mock_message.answer.call_args[0][0]
                    assert "üìä" in call_args or "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in call_args.lower()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_no_permissions(self, db_connection, mock_message):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        # –ú–æ–∫–∞–µ–º rate limiter
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter:
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            # –ú–æ–∫–∞–µ–º circuit breaker
            with patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker:
                mock_breaker.return_value = AsyncMock()
                mock_breaker.return_value.call = AsyncMock(return_value=("Test Mailbox", "@test_channel", 1, "09:00"))
                
                # –ú–æ–∫–∞–µ–º can_manage_mailbox –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ False
                with patch('app.features.admin.cmd_stats.can_manage_mailbox') as mock_permissions:
                    mock_permissions.return_value = False
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    await cmd_stats(mock_message, db_connection, 1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    mock_message.answer.assert_called_once()
                    call_args = mock_message.answer.call_args[0][0]
                    assert "–¥–æ—Å—Ç—É–ø" in call_args.lower() or "permission" in call_args.lower()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_rate_limit(self, db_connection, mock_message):
        """–¢–µ—Å—Ç rate limiting –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º rate limiter –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter:
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(False, "Rate limit exceeded"))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            await cmd_stats(mock_message, db_connection, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            assert "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç" in call_args.lower() or "rate limit" in call_args.lower()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_circuit_breaker(self, db_connection, mock_message):
        """–¢–µ—Å—Ç circuit breaker –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ú–æ–∫–∞–µ–º rate limiter
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter:
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º circuit breaker –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
            with patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker:
                mock_breaker.return_value = AsyncMock()
                mock_breaker.return_value.call = AsyncMock(side_effect=Exception("Database unavailable"))
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                await cmd_stats(mock_message, db_connection, 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –æ—à–∏–±–∫—É gracefully
                mock_message.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_empty_stats(self, db_connection, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter, \
             patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker, \
             patch('app.features.admin.cmd_stats.can_manage_mailbox') as mock_permissions:
            
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            mock_breaker.return_value = AsyncMock()
            mock_breaker.return_value.call = AsyncMock(return_value=("Test Mailbox", "@test_channel", 1, "09:00"))
            
            mock_permissions.return_value = True
            
            # –ú–æ–∫–∞–µ–º StatsRepo –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            with patch('app.features.admin.cmd_stats.StatsRepo') as mock_stats_repo:
                mock_repo_instance = AsyncMock()
                mock_repo_instance.get_stats_for_mailbox.return_value = {}
                mock_stats_repo.return_value = mock_repo_instance
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                await cmd_stats(mock_message, db_connection, 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                mock_message.answer.assert_called_once()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                call_args = mock_message.answer.call_args[0][0]
                assert "–ø—É—Å—Ç–∞" in call_args.lower() or "empty" in call_args.lower()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_input_sanitization(self, db_connection, mock_message):
        """–¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter, \
             patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker, \
             patch('app.features.admin.cmd_stats.can_manage_mailbox') as mock_permissions:
            
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            mock_breaker.return_value = AsyncMock()
            mock_breaker.return_value.call = AsyncMock(return_value=("Test Mailbox", "@test_channel", 1, "09:00"))
            
            mock_permissions.return_value = True
            
            # –ú–æ–∫–∞–µ–º InputSanitizer
            with patch('app.features.admin.cmd_stats.InputSanitizer') as mock_sanitizer:
                mock_sanitizer.sanitize_user_input.return_value = "sanitized_input"
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                await cmd_stats(mock_message, db_connection, 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
                mock_sanitizer.sanitize_user_input.assert_called()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_output_validation(self, db_connection, mock_message):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter, \
             patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker, \
             patch('app.features.admin.cmd_stats.can_manage_mailbox') as mock_permissions:
            
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            mock_breaker.return_value = AsyncMock()
            mock_breaker.return_value.call = AsyncMock(return_value=("Test Mailbox", "@test_channel", 1, "09:00"))
            
            mock_permissions.return_value = True
            
            # –ú–æ–∫–∞–µ–º OutputValidator
            with patch('app.features.admin.cmd_stats.OutputValidator') as mock_validator:
                mock_validation = MagicMock()
                mock_validation.is_valid = True
                mock_validation.sanitized_data = "validated_output"
                mock_validation.warnings = []
                mock_validator.validate_message_text.return_value = mock_validation
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                await cmd_stats(mock_message, db_connection, 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
                mock_validator.validate_message_text.assert_called()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_metrics_tracking(self, db_connection, mock_message):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter, \
             patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker, \
             patch('app.features.admin.cmd_stats.can_manage_mailbox') as mock_permissions:
            
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            mock_breaker.return_value = AsyncMock()
            mock_breaker.return_value.call = AsyncMock(return_value=("Test Mailbox", "@test_channel", 1, "09:00"))
            
            mock_permissions.return_value = True
            
            # –ú–æ–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç—Ä–∏–∫
            with patch('app.features.admin.cmd_stats.logging') as mock_logging:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                await cmd_stats(mock_message, db_connection, 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥
                assert mock_logging.info.called
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_resource_cleanup(self, db_connection, mock_message):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter, \
             patch('app.features.admin.cmd_stats.get_breaker') as mock_breaker, \
             patch('app.features.admin.cmd_stats.can_manage_mailbox') as mock_permissions, \
             patch('app.features.admin.cmd_stats.MemoryManager') as mock_memory:
            
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(return_value=(True, None))
            
            mock_breaker.return_value = AsyncMock()
            mock_breaker.return_value.call = AsyncMock(return_value=("Test Mailbox", "@test_channel", 1, "09:00"))
            
            mock_permissions.return_value = True
            mock_memory.cleanup_memory = AsyncMock()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            await cmd_stats(mock_message, db_connection, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
            mock_message.answer.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_cmd_stats_integration_error_handling(self, db_connection, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        # –ú–æ–∫–∞–µ–º rate limiter
        with patch('app.features.admin.cmd_stats.get_stats_limiter') as mock_limiter:
            mock_limiter.return_value = AsyncMock()
            mock_limiter.return_value.is_allowed = AsyncMock(side_effect=Exception("Unexpected error"))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            await cmd_stats(mock_message, db_connection, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —É–ø–∞–ª–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
            # (–æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è)
            mock_message.answer.assert_called_once()


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
