"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –≤ AliasService
"""
import unittest
import asyncio
import aiosqlite
import tempfile
import os
import sys
from zoneinfo import ZoneInfo

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../bot'))

from app.services.alias_service import AliasService
from app.infra.repo.aliases_repo import AliasesRepo
from app.infra.repo.alias_words_repo import AliasWordsRepo
from app.infra.repo.alias_blocks_repo import AliasBlocksRepo

class TestAliasServiceMorphology(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –≤ AliasService"""
    
    async def asyncSetUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db = await aiosqlite.connect(self.temp_db.name)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await self.db.execute("""
            CREATE TABLE IF NOT EXISTS aliases (
                user_id INTEGER,
                valid_day TEXT,
                alias TEXT,
                PRIMARY KEY (user_id, valid_day)
            )
        """)
        
        await self.db.execute("""
            CREATE TABLE IF NOT EXISTS alias_words (
                word TEXT PRIMARY KEY,
                word_type TEXT,
                usage_count INTEGER DEFAULT 1
            )
        """)
        
        await self.db.execute("""
            CREATE TABLE IF NOT EXISTS alias_blocks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                word TEXT,
                admin_id INTEGER,
                mailbox_id INTEGER,
                reason TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        await self.db.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        self.aliases_repo = AliasesRepo(self.db)
        self.words_repo = AliasWordsRepo(self.db)
        self.blocks_repo = AliasBlocksRepo(self.db)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        self.tz = ZoneInfo("Europe/Moscow")
        self.alias_service = AliasService(
            self.aliases_repo, 
            self.tz, 
            self.words_repo, 
            self.blocks_repo
        )
    
    async def asyncTearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        await self.db.close()
        os.unlink(self.temp_db.name)
    
    async def test_alias_generation_with_morphology(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
        aliases = []
        for i in range(10):
            alias = await self.alias_service.get_or_issue(12345 + i)
            aliases.append(alias)
            print(f"Generated alias {i+1}: {alias}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ + —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ
        adjective_noun_aliases = [alias for alias in aliases if len(alias.split()) >= 3]
        self.assertGreater(len(adjective_noun_aliases), 0, 
            "Should generate at least one alias with adjective + noun")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—é –¥–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏
        for alias in adjective_noun_aliases:
            parts = alias.split()
            if len(parts) >= 3:
                emoji, adjective, noun = parts[0], parts[1], parts[2]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                # –î–ª—è –∂–µ–Ω—Å–∫–∏—Ö —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ -–∞—è –∏–ª–∏ -—è—è
                if noun in ["–æ–±–µ–∑—å—è–Ω–∞", "–ª–∏—Å–∞", "–∫–æ—à–∫–∞", "–∑–∞–π—á–∏—Ö–∞"]:
                    self.assertTrue(
                        adjective.endswith(("–∞—è", "—è—è")), 
                        f"Adjective '{adjective}' should be declined for feminine noun '{noun}' in alias '{alias}'"
                    )
                # –î–ª—è –º—É–∂—Å–∫–∏—Ö —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ -—ã–π –∏–ª–∏ -–∏–π
                elif noun in ["–∫–æ—Ç", "–ø–µ—Å", "—Ç–∏–≥—Ä", "–º–µ–¥–≤–µ–¥—å"]:
                    self.assertTrue(
                        adjective.endswith(("—ã–π", "–∏–π")), 
                        f"Adjective '{adjective}' should be declined for masculine noun '{noun}' in alias '{alias}'"
                    )
    
    async def test_specific_morphology_cases(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏
        test_cases = [
            ("—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π", "–æ–±–µ–∑—å—è–Ω–∞", "—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤–∞—è"),
            ("–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π", "–ª–∏—Å–∞", "–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤–∞—è"),
            ("—Å—É—Ä–≥—É—á–Ω—ã–π", "–∫–æ—à–∫–∞", "—Å—É—Ä–≥—É—á–Ω–∞—è"),
            ("–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π", "–æ–±–µ–∑—å—è–Ω–∞", "–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤–∞—è"),
        ]
        
        for adjective, noun, expected_declined in test_cases:
            with self.subTest(adjective=adjective, noun=noun):
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º
                test_alias = f"üêµ {adjective} {noun}"
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                from app.utils.morphology import process_alias_morphology_simple
                result = process_alias_morphology_simple(test_alias)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                expected_alias = f"üêµ {expected_declined} {noun}"
                self.assertEqual(result, expected_alias, 
                    f"Expected '{expected_alias}', got '{result}'")
    
    async def test_alias_service_fallback(self):
        """–¢–µ—Å—Ç fallback –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º
        alias = await self.alias_service.get_or_issue(99999)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
        self.assertIsNotNone(alias)
        self.assertGreater(len(alias), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        parts = alias.split()
        self.assertGreaterEqual(len(parts), 2, "Alias should have at least emoji and one word")
        
        # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —ç–º–æ–¥–∑–∏
        self.assertTrue(parts[0].startswith(""), "First part should be an emoji")

if __name__ == '__main__':
    unittest.main()
