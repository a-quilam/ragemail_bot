"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
"""
import unittest
from unittest.mock import AsyncMock, MagicMock, patch
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'bot'))

from app.services.alias_service import AliasService
from app.services.background_tasks import BackgroundTaskService, TaskStatus
from app.services.heavy_operations import bulk_user_operations, generate_statistics_report
from app.core.permissions import PermissionManager, Role, Permission
from app.validators.db_validators import DatabaseValidator, ValidationResult

class TestAliasService(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è AliasService"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.mock_repo = AsyncMock()
        self.mock_words_repo = AsyncMock()
        self.mock_blocks_repo = AsyncMock()
        self.tz = ZoneInfo("UTC")
        
        self.service = AliasService(
            repo=self.mock_repo,
            tz=self.tz,
            words_repo=self.mock_words_repo,
            blocks_repo=self.mock_blocks_repo
        )
    
    async def test_get_or_issue_existing_alias(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        self.mock_repo.get_for_today.return_value = "üê± –º–∏–ª—ã–π –∫–æ—Ç–∏–∫"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
        result = await self.service.get_or_issue(12345)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(result, "üê± –º–∏–ª—ã–π –∫–æ—Ç–∏–∫")
        self.mock_repo.get_for_today.assert_called_once_with(12345, self.service._today_key())
    
    async def test_get_or_issue_new_alias(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        self.mock_repo.get_for_today.return_value = None
        self.mock_repo.set_for_today.return_value = None
        self.mock_words_repo.add_used_words.return_value = None
        
        # –ú–æ–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
        with patch.object(self.service, '_rand_alias', return_value="üê∂ –¥–æ–±—Ä—ã–π –ø—ë—Å–∏–∫"):
            result = await self.service.get_or_issue(12345)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(result, "üê∂ –¥–æ–±—Ä—ã–π –ø—ë—Å–∏–∫")
        self.mock_repo.set_for_today.assert_called_once()
        self.mock_words_repo.add_used_words.assert_called_once_with("üê∂ –¥–æ–±—Ä—ã–π –ø—ë—Å–∏–∫")
    
    async def test_today_key_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞ –¥–Ω—è"""
        today_key = self.service._today_key()
        self.assertRegex(today_key, r'^\d{4}-\d{2}-\d{2}$')

class TestBackgroundTaskService(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è BackgroundTaskService"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.service = BackgroundTaskService(max_concurrent_tasks=2)
    
    async def test_submit_task(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏"""
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        mock_func = AsyncMock(return_value="test_result")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task_id = await self.service.submit_task("test_task", mock_func)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
        self.assertIsNotNone(task_id)
        self.assertIn(task_id, self.service.tasks)
        
        task = self.service.tasks[task_id]
        self.assertEqual(task.name, "test_task")
        self.assertEqual(task.status, TaskStatus.PENDING)
    
    async def test_task_execution(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        mock_func = AsyncMock(return_value="test_result")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task_id = await self.service.submit_task("test_task", mock_func)
        
        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await asyncio.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        task = self.service.tasks[task_id]
        self.assertEqual(task.status, TaskStatus.COMPLETED)
        self.assertEqual(task.result, "test_result")
    
    async def test_task_failure(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≤ –∑–∞–¥–∞—á–µ"""
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
        mock_func = AsyncMock(side_effect=Exception("Test error"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task_id = await self.service.submit_task("test_task", mock_func)
        
        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await asyncio.sleep(0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        task = self.service.tasks[task_id]
        self.assertEqual(task.status, TaskStatus.FAILED)
        self.assertIsNotNone(task.error)
        self.assertEqual(str(task.error), "Test error")
    
    async def test_cancel_task(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
        # –ú–æ–∫–∞–µ–º –¥–æ–ª–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
        async def long_task():
            await asyncio.sleep(10)
            return "result"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task_id = await self.service.submit_task("long_task", long_task)
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = await self.service.cancel_task(task_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertTrue(result)
        task = self.service.tasks[task_id]
        self.assertEqual(task.status, TaskStatus.CANCELLED)

class TestHeavyOperations(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    async def test_bulk_user_operations(self):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        user_ids = [1, 2, 3, 4, 5]
        progress_calls = []
        
        def progress_callback(task_id, progress, message):
            progress_calls.append((task_id, progress, message))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await bulk_user_operations(
            user_ids, 
            "test_operation", 
            progress_callback=progress_callback
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(result["total_users"], 5)
        self.assertEqual(result["processed"], 5)
        self.assertEqual(result["success_rate"], 100.0)
        self.assertEqual(len(result["errors"]), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã progress callback
        self.assertGreater(len(progress_calls), 0)
        self.assertEqual(progress_calls[-1][1], 100.0)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%
    
    async def test_generate_statistics_report(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        progress_calls = []
        
        def progress_callback(task_id, progress, message):
            progress_calls.append((task_id, progress, message))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        result = await generate_statistics_report(
            days=30,
            progress_callback=progress_callback
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(result["period_days"], 30)
        self.assertIn("total_users", result)
        self.assertIn("active_users", result)
        self.assertIn("generated_at", result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã progress callback
        self.assertGreater(len(progress_calls), 0)
        self.assertEqual(progress_calls[-1][1], 100.0)

class TestPermissionManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è PermissionManager"""
    
    def test_role_permissions(self):
        """–¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.assertFalse(PermissionManager.has_permission(Role.USER, Permission.MANAGE_USERS))
        self.assertTrue(PermissionManager.has_permission(Role.USER, Permission.CREATE_MAILBOX))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.assertTrue(PermissionManager.has_permission(Role.ADMIN, Permission.MANAGE_USERS))
        self.assertTrue(PermissionManager.has_permission(Role.ADMIN, Permission.ADD_ADMIN))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        self.assertTrue(PermissionManager.has_permission(Role.SUPERADMIN, Permission.SYSTEM_SETTINGS))
        self.assertTrue(PermissionManager.has_permission(Role.SUPERADMIN, Permission.TRANSFER_ADMIN))
    
    def test_mailbox_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫–∞–º"""
        from app.core.permissions import AccessContext
        
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—Ç–µ–ª—å —è—â–∏–∫–∞
        context = AccessContext(
            user_id=1,
            user_role=Role.USER,
            is_mailbox_creator=True
        )
        self.assertTrue(PermissionManager.can_access_mailbox(context))
        
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —è—â–∏–∫–∞
        context.is_mailbox_creator = False
        self.assertFalse(PermissionManager.can_access_mailbox(context))
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        context.user_role = Role.ADMIN
        self.assertTrue(PermissionManager.can_access_mailbox(context))
        
        # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω
        context.user_role = Role.SUPERADMIN
        self.assertTrue(PermissionManager.can_access_mailbox(context))

class TestDatabaseValidator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è DatabaseValidator"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.validator = DatabaseValidator()
    
    def test_user_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_data = {
            "user_id": 12345,
            "role": "user",
            "username": "test_user"
        }
        result = self.validator.validate_user_data(valid_data)
        self.assertTrue(result.is_valid)
        self.assertEqual(len(result.errors), 0)
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        invalid_data = {
            "user_id": "not_a_number",
            "role": "invalid_role",
            "username": "ab"  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        }
        result = self.validator.validate_user_data(invalid_data)
        self.assertFalse(result.is_valid)
        self.assertGreater(len(result.errors), 0)
    
    def test_mailbox_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —è—â–∏–∫–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_data = {
            "title": "Test Mailbox",
            "channel_id": -1001234567890
        }
        result = self.validator.validate_mailbox_data(valid_data)
        self.assertTrue(result.is_valid)
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        invalid_data = {
            "title": "ab",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            "channel_id": 12345  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID
        }
        result = self.validator.validate_mailbox_data(invalid_data)
        self.assertFalse(result.is_valid)
        self.assertGreater(len(result.errors), 0)
    
    def test_post_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_data = {
            "text": "Test message",
            "alias": "üê± –º–∏–ª—ã–π –∫–æ—Ç–∏–∫",
            "ttl": 3600
        }
        result = self.validator.validate_post_data(valid_data)
        self.assertTrue(result.is_valid)
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        invalid_data = {
            "text": "x" * 2001,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            "alias": "",
            "ttl": 30  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        }
        result = self.validator.validate_post_data(invalid_data)
        self.assertFalse(result.is_valid)
        self.assertGreater(len(result.errors), 0)

if __name__ == '__main__':
    unittest.main()
