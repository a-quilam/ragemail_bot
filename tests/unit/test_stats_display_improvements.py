"""
–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""
import pytest
from unittest.mock import AsyncMock, MagicMock
from app.features.admin.cmd_stats import cmd_stats
from app.features.admin.cmd_statday import cmd_statday
from app.features.admin.cmd_stathour import cmd_stathour


class TestStatsDisplayImprovements:
    """–¢–µ—Å—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = MagicMock()
        message.text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        message.from_user.id = 123
        message.answer = AsyncMock()
        return message
    
    @pytest.fixture
    def mock_db(self):
        """–ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db = AsyncMock()
        return db
    
    @pytest.fixture
    def mock_mailboxes_repo(self):
        """–ú–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —è—â–∏–∫–æ–≤"""
        repo = AsyncMock()
        return repo
    
    @pytest.fixture
    def mock_stats_repo(self):
        """–ú–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        repo = AsyncMock()
        return repo
    
    @pytest.mark.asyncio
    async def test_stats_display_when_not_configured(self, mock_message, mock_db):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–≥–¥–∞ –æ–Ω–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —è—â–∏–∫–∞ –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mock_box = (1, "Test Mailbox", 12345, None, None, 123)
        
        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        with pytest.MonkeyPatch().context() as m:
            m.setattr("app.features.admin.cmd_stats.MailboxesRepo", lambda db: AsyncMock(get=AsyncMock(return_value=mock_box)))
            m.setattr("app.features.admin.cmd_stats.StatsRepo", lambda db: AsyncMock(get_stats_for_mailbox=AsyncMock(return_value={})))
            m.setattr("app.features.admin.cmd_stats.can_manage_mailbox", AsyncMock(return_value=True))
            
            await cmd_stats(mock_message, mock_db, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            
            assert "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞" in call_args
            assert "/statday 1-7" in call_args
            assert "/stathour HH:MM" in call_args
            assert "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" not in call_args  # –°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    
    @pytest.mark.asyncio
    async def test_stats_display_when_configured(self, mock_message, mock_db):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–≥–¥–∞ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —è—â–∏–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        mock_box = (1, "Test Mailbox", 12345, 1, "10:00", 123)
        
        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        with pytest.MonkeyPatch().context() as m:
            m.setattr("app.features.admin.cmd_stats.MailboxesRepo", lambda db: AsyncMock(get=AsyncMock(return_value=mock_box)))
            m.setattr("app.features.admin.cmd_stats.StatsRepo", lambda db: AsyncMock(get_stats_for_mailbox=AsyncMock(return_value={})))
            m.setattr("app.features.admin.cmd_stats.can_manage_mailbox", AsyncMock(return_value=True))
            
            await cmd_stats(mock_message, mock_db, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            mock_message.answer.assert_called_once()
            call_args = mock_message.answer.call_args[0][0]
            
            assert "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in call_args
            assert "10:00" in call_args
            assert "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞" not in call_args
    
    @pytest.mark.asyncio
    async def test_statday_command_improved_messages(self, mock_db):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /statday"""
        # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        message = MagicMock()
        message.text = "/statday invalid"
        message.answer = AsyncMock()
        
        await cmd_statday(message, mock_db, 1)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        assert "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã" in call_args
        assert "–ü—Ä–∏–º–µ—Ä—ã:" in call_args
        
        # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –¥–Ω—è
        message.text = "/statday 8"
        message.answer.reset_mock()
        
        await cmd_statday(message, mock_db, 1)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        assert "–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏" in call_args
        assert "1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in call_args
    
    @pytest.mark.asyncio
    async def test_stathour_command_improved_messages(self, mock_db):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã /stathour"""
        # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        message = MagicMock()
        message.text = "/stathour invalid"
        message.answer = AsyncMock()
        
        await cmd_stathour(message, mock_db, 1)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        assert "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã" in call_args
        assert "–ü—Ä–∏–º–µ—Ä—ã:" in call_args
        assert "10:00" in call_args
