"""
–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ deeplink - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á—É–∂–∏–º–∏ —è—â–∏–∫–∞–º–∏
"""
import unittest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import types
from aiogram.types import User, Message

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../../bot'))

from app.features.bind.start_payload import cmd_start_payload


class TestDeeplinkSecurity(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ deeplink"""

    async def asyncSetUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.db = AsyncMock()
        self.bot = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∞
        self.admin_user = User(
            id=12345,
            is_bot=False,
            first_name="Admin",
            username="admin"
        )
        
        # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.message = MagicMock(spec=Message)
        self.message.from_user = self.admin_user
        self.message.answer = AsyncMock()
        self.message.bot = self.bot

    @patch('app.utils.mailbox_permissions.can_manage_mailbox')
    @patch('app.features.bind.start_payload.UsersRepo')
    @patch('app.features.bind.start_payload.MailboxesRepo')
    @patch('app.features.bind.start_payload.user_is_member')
    async def test_admin_cannot_manage_foreign_mailbox(self, mock_user_is_member, mock_mailboxes_repo_class, mock_users_repo_class, mock_can_manage_mailbox):
        """–¢–µ—Å—Ç: –∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á—É–∂–∏–º —è—â–∏–∫–æ–º —á–µ—Ä–µ–∑ deeplink"""
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_user_is_member.return_value = True
        mock_can_manage_mailbox.return_value = False  # –ê–¥–º–∏–Ω –ù–ï –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —è—â–∏–∫–æ–º
        
        # –ú–æ–∫–∞–µ–º mailbox (—á—É–∂–æ–π —è—â–∏–∫)
        mock_mailbox = (1, "Foreign Mailbox", -1001234567890, 99999, None, 99999)  # creator_id = 99999 (–Ω–µ –Ω–∞—à –∞–¥–º–∏–Ω)
        mock_mailboxes_repo = AsyncMock()
        mock_mailboxes_repo.get.return_value = mock_mailbox
        mock_mailboxes_repo_class.return_value = mock_mailboxes_repo
        
        # –ú–æ–∫–∞–µ–º users repo (–∞–¥–º–∏–Ω)
        mock_users_repo = AsyncMock()
        mock_users_repo.get.return_value = None
        mock_users_repo.get_role.return_value = "admin"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        mock_users_repo_class.return_value = mock_users_repo
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ deeplink
        self.message.text = "/start 1"
        
        await cmd_start_payload(self.message, self.db, self.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω
        mock_users_repo.upsert.assert_called_once_with(12345, username="admin")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        mock_users_repo.set_active_mailbox.assert_called_once_with(12345, 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –û–ë–´–ß–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∞–¥–º–∏–Ω–∞)
        self.message.answer.assert_called_once()
        call_args = self.message.answer.call_args[0][0]
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫)
        self.assertIn("‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>", call_args)
        self.assertIn("–¢–µ–ø–µ—Ä—å –≤—ã –ø–∏—à–µ—Ç–µ –≤ —ç—Ç–æ—Ç —è—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", call_args)
        self.assertIn("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", call_args)
        
        # –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.assertNotIn("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>", call_args)
        self.assertNotIn("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>", call_args)
        self.assertNotIn("üìå <b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç</b>", call_args)

    @patch('app.utils.mailbox_permissions.can_manage_mailbox')
    @patch('app.features.bind.start_payload.UsersRepo')
    @patch('app.features.bind.start_payload.MailboxesRepo')
    @patch('app.features.bind.start_payload.user_is_member')
    async def test_admin_can_manage_own_mailbox(self, mock_user_is_member, mock_mailboxes_repo_class, mock_users_repo_class, mock_can_manage_mailbox):
        """–¢–µ—Å—Ç: –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —è—â–∏–∫–æ–º —á–µ—Ä–µ–∑ deeplink"""
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_user_is_member.return_value = True
        mock_can_manage_mailbox.return_value = True  # –ê–¥–º–∏–Ω –ú–û–ñ–ï–¢ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —è—â–∏–∫–æ–º
        
        # –ú–æ–∫–∞–µ–º mailbox (—Å–≤–æ–π —è—â–∏–∫)
        mock_mailbox = (1, "Own Mailbox", -1001234567890, 12345, None, 12345)  # creator_id = 12345 (–Ω–∞—à –∞–¥–º–∏–Ω)
        mock_mailboxes_repo = AsyncMock()
        mock_mailboxes_repo.get.return_value = mock_mailbox
        mock_mailboxes_repo_class.return_value = mock_mailboxes_repo
        
        # –ú–æ–∫–∞–µ–º users repo (–∞–¥–º–∏–Ω)
        mock_users_repo = AsyncMock()
        mock_users_repo.get.return_value = None
        mock_users_repo.get_role.return_value = "admin"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
        mock_users_repo_class.return_value = mock_users_repo
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ deeplink
        self.message.text = "/start 1"
        
        await cmd_start_payload(self.message, self.db, self.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω
        mock_users_repo.upsert.assert_called_once_with(12345, username="admin")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        mock_users_repo.set_active_mailbox.assert_called_once_with(12345, 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ê–î–ú–ò–ù–ê
        self.message.answer.assert_called_once()
        call_args = self.message.answer.call_args[0][0]
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
        self.assertIn("‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>", call_args)
        self.assertIn("–¢–µ–ø–µ—Ä—å –≤—ã –ø–∏—à–µ—Ç–µ –≤ —ç—Ç–æ—Ç —è—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", call_args)
        self.assertIn("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>", call_args)
        self.assertIn("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>", call_args)
        self.assertIn("üìå <b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç</b>", call_args)
        self.assertIn("üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å</b>", call_args)


if __name__ == '__main__':
    unittest.main()
