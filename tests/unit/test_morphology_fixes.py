"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
"""
import unittest
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../bot'))

from app.utils.morphology import (
    process_alias_morphology_simple,
    decline_adjective_simple,
    get_noun_gender_simple,
    normalize_word,
    extract_words_from_text
)

class TestMorphologyFixes(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    def test_process_alias_morphology_simple_female_nouns(self):
        """–¢–µ—Å—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å –∂–µ–Ω—Å–∫–∏–º–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏"""
        test_cases = [
            ("üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π –æ–±–µ–∑—å—è–Ω–∞", "üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤–∞—è –æ–±–µ–∑—å—è–Ω–∞"),
            ("ü¶ä –≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π –ª–∏—Å–∞", "ü¶ä –≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤–∞—è –ª–∏—Å–∞"),
            ("üê± –≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π –∫–æ—à–∫–∞", "üê± –≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤–∞—è –∫–æ—à–∫–∞"),
            ("üê∞ —Å—É—Ä–≥—É—á–Ω—ã–π –∑–∞–π—á–∏—Ö–∞", "üê∞ —Å—É—Ä–≥—É—á–Ω–∞—è –∑–∞–π—á–∏—Ö–∞"),
        ]
        
        for input_alias, expected in test_cases:
            with self.subTest(input_alias=input_alias):
                result = process_alias_morphology_simple(input_alias)
                self.assertEqual(result, expected, 
                    f"Expected '{expected}', got '{result}' for input '{input_alias}'")
    
    def test_process_alias_morphology_simple_male_nouns(self):
        """–¢–µ—Å—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å –º—É–∂—Å–∫–∏–º–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏"""
        test_cases = [
            ("üê± –≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π –∫–æ—Ç", "üê± –≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π –∫–æ—Ç"),
            ("üê∂ —Å—É—Ä–≥—É—á–Ω—ã–π –ø–µ—Å", "üê∂ —Å—É—Ä–≥—É—á–Ω—ã–π –ø–µ—Å"),
            ("üêØ –≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π —Ç–∏–≥—Ä", "üêØ –≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π —Ç–∏–≥—Ä"),
            ("üêª —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π –º–µ–¥–≤–µ–¥—å", "üêª —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π –º–µ–¥–≤–µ–¥—å"),
        ]
        
        for input_alias, expected in test_cases:
            with self.subTest(input_alias=input_alias):
                result = process_alias_morphology_simple(input_alias)
                self.assertEqual(result, expected, 
                    f"Expected '{expected}', got '{result}' for input '{input_alias}'")
    
    def test_process_alias_morphology_simple_neuter_nouns(self):
        """–¢–µ—Å—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)"""
        test_cases = [
            ("üê≠ –≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π —Å—É—â–µ—Å—Ç–≤–æ", "üê≠ –≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π —Å—É—â–µ—Å—Ç–≤–æ"),  # –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
            ("üêπ —Å—É—Ä–≥—É—á–Ω—ã–π –∂–∏–≤–æ—Ç–Ω–æ–µ", "üêπ —Å—É—Ä–≥—É—á–Ω—ã–π –∂–∏–≤–æ—Ç–Ω–æ–µ"),  # –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
        ]
        
        for input_alias, expected in test_cases:
            with self.subTest(input_alias=input_alias):
                result = process_alias_morphology_simple(input_alias)
                self.assertEqual(result, expected, 
                    f"Expected '{expected}', got '{result}' for input '{input_alias}'")
    
    def test_decline_adjective_simple_female(self):
        """–¢–µ—Å—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –≤ –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥"""
        test_cases = [
            ("—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π", "—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤–∞—è"),
            ("–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π", "–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤–∞—è"),
            ("—Å—É—Ä–≥—É—á–Ω—ã–π", "—Å—É—Ä–≥—É—á–Ω–∞—è"),
            ("–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π", "–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤–∞—è"),
        ]
        
        for input_adj, expected in test_cases:
            with self.subTest(input_adj=input_adj):
                result = decline_adjective_simple(input_adj, "femn")
                self.assertEqual(result, expected, 
                    f"Expected '{expected}', got '{result}' for input '{input_adj}'")
    
    def test_decline_adjective_simple_male(self):
        """–¢–µ—Å—Ç —Å–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –≤ –º—É–∂—Å–∫–æ–π —Ä–æ–¥"""
        test_cases = [
            ("—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π", "—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π"),
            ("–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π", "–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π"),
            ("—Å—É—Ä–≥—É—á–Ω—ã–π", "—Å—É—Ä–≥—É—á–Ω—ã–π"),
            ("–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π", "–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π"),
        ]
        
        for input_adj, expected in test_cases:
            with self.subTest(input_adj=input_adj):
                result = decline_adjective_simple(input_adj, "masc")
                self.assertEqual(result, expected, 
                    f"Expected '{expected}', got '{result}' for input '{input_adj}'")
    
    def test_get_noun_gender_simple(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö"""
        test_cases = [
            ("–æ–±–µ–∑—å—è–Ω–∞", "femn"),
            ("–∫–æ—Ç", "masc"),
            ("–ø–µ—Å", "masc"),
            ("–ª–∏—Å–∞", "femn"),
            ("–∫–æ—à–∫–∞", "femn"),
            ("—Ç–∏–≥—Ä", "masc"),
            ("–º–µ–¥–≤–µ–¥—å", "masc"),
        ]
        
        for noun, expected_gender in test_cases:
            with self.subTest(noun=noun):
                result = get_noun_gender_simple(noun)
                self.assertEqual(result, expected_gender, 
                    f"Expected gender '{expected_gender}', got '{result}' for noun '{noun}'")
    
    def test_normalize_word(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤"""
        test_cases = [
            ("—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π", "—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π"),
            ("–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π", "–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π"),
            ("—Å—É—Ä–≥—É—á–Ω—ã–π", "—Å—É—Ä–≥—É—á–Ω—ã–π"),
            ("–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π", "–≤–∏—Ä–∏–¥–∏–∞–Ω–æ–≤—ã–π"),
        ]
        
        for input_word, expected in test_cases:
            with self.subTest(input_word=input_word):
                result = normalize_word(input_word)
                self.assertEqual(result, expected, 
                    f"Expected '{expected}', got '{result}' for input '{input_word}'")
    
    def test_extract_words_from_text(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text = "üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π –æ–±–µ–∑—å—è–Ω–∞ –∏ üê± –≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π –∫–æ—Ç"
        result = extract_words_from_text(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–≤–∞
        expected_words = {"—Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π", "–æ–±–µ–∑—å—è–Ω–∞", "–≥—É—Ç—Ç–∞–ø–µ—Ä—á–µ–≤—ã–π", "–∫–æ—Ç"}
        self.assertTrue(expected_words.issubset(result), 
            f"Expected words {expected_words} not found in result {result}")
    
    def test_process_alias_morphology_simple_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        # –°–ª—É—á–∞–π —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∞—Å—Ç–µ–π
        result = process_alias_morphology_simple("üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π")
        self.assertEqual(result, "üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π")
        
        # –°–ª—É—á–∞–π —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        result = process_alias_morphology_simple("")
        self.assertEqual(result, "")
        
        # –°–ª—É—á–∞–π —Å None
        result = process_alias_morphology_simple(None)
        self.assertEqual(result, None)
    
    def test_process_alias_morphology_simple_with_extra_parts(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏"""
        # –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
        result = process_alias_morphology_simple("üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π –æ–±–µ–∑—å—è–Ω–∞ 123")
        self.assertEqual(result, "üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤–∞—è –æ–±–µ–∑—å—è–Ω–∞ 123")
        
        # –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è)
        result = process_alias_morphology_simple("üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π –æ–±–µ–∑—å—è–Ω–∞-123")
        self.assertEqual(result, "üêµ —Ä–æ–≥–æ–≤–æ–æ–±–º–∞–Ω–∫–æ–≤—ã–π –æ–±–µ–∑—å—è–Ω–∞-123")  # –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ "–æ–±–µ–∑—å—è–Ω–∞-123" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥

if __name__ == '__main__':
    unittest.main()
