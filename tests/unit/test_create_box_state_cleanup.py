"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞
"""
import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import types
from aiogram.fsm.context import FSMContext

from app.features.admin.create_box_confirm import cb_box_confirm
from app.features.admin.simple_channel_add import on_channel_input
from app.features.admin.create_box_step0 import cb_create_box
from app.features.write.auto_text_handler import on_auto_text_input
from app.fsm.admin_states import CreateBoxStates


class TestCreateBoxStateCleanup:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞"""
    
    @pytest.mark.asyncio
    async def test_cb_box_confirm_clears_state_on_error(self):
        """–¢–µ—Å—Ç: cb_box_confirm –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞"""
        # Arrange
        callback = AsyncMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 12345
        callback.answer = AsyncMock()
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        
        state = AsyncMock(spec=FSMContext)
        state.get_data = AsyncMock(return_value={"name": "test", "channel_id": -1001234567890})
        state.clear = AsyncMock()
        
        db = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—ã–∑–≤–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with patch('app.infra.tg_api.user_can_create_mailbox_in_channel') as mock_check:
            mock_check.side_effect = Exception("Test error")
            
            # Act
            await cb_box_confirm(callback, state, db)
            
            # Assert
            state.clear.assert_called_once()
            callback.answer.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            assert "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞" in str(callback.answer.call_args)
    
    @pytest.mark.asyncio
    async def test_on_channel_input_clears_state_on_error(self):
        """–¢–µ—Å—Ç: on_channel_input –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        # Arrange
        message = AsyncMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 12345
        message.text = "@test_channel"
        message.answer = AsyncMock()
        
        state = AsyncMock(spec=FSMContext)
        state.get_state = AsyncMock(return_value=CreateBoxStates.ADD_CHANNEL)
        state.clear = AsyncMock()
        
        db = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—ã–∑–≤–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with patch('app.features.admin.simple_channel_add.bot_is_admin') as mock_check:
            mock_check.side_effect = Exception("Test error")
            
            # Act
            await on_channel_input(message, state, db)
            
            # Assert
            state.clear.assert_called_once()
            message.answer.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            assert "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞" in str(message.answer.call_args)
    
    @pytest.mark.asyncio
    async def test_cb_create_box_clears_state_on_error(self):
        """–¢–µ—Å—Ç: cb_create_box –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞"""
        # Arrange
        message = AsyncMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 12345
        message.answer = AsyncMock()
        
        state = AsyncMock(spec=FSMContext)
        state.get_state = AsyncMock(return_value=None)
        state.clear = AsyncMock()
        
        db = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—ã–∑–≤–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with patch('app.features.admin.simple_channel_add.cb_add_channel_simple', side_effect=Exception("Test error")):
            # Act
            await cb_create_box(message, state, db)
            
            # Assert
            state.clear.assert_called_once()
            message.answer.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            assert "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞" in str(message.answer.call_args)
    
    @pytest.mark.asyncio
    async def test_auto_text_handler_clears_stuck_admin_state(self):
        """–¢–µ—Å—Ç: auto_text_handler –æ—á–∏—â–∞–µ—Ç –∑–∞—Å—Ç—Ä—è–≤—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
        # Arrange
        message = AsyncMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 12345
        message.text = "test message"
        message.answer = AsyncMock()
        
        state = AsyncMock(spec=FSMContext)
        state.get_state = AsyncMock(return_value=CreateBoxStates.CONFIRM)
        state.clear = AsyncMock()
        
        db = AsyncMock()
        active_mailbox_id = 1
        tz = None
        
        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–¥–º–∏–Ω–æ–º
        with patch('app.features.write.auto_text_handler.UsersRepo') as mock_repo_class:
            mock_repo = AsyncMock()
            mock_repo.get_role = AsyncMock(return_value="admin")
            mock_repo_class.return_value = mock_repo
            
            # Act
            result = await on_auto_text_input(message, state, db, active_mailbox_id, tz)
            
            # Assert
            assert result is False  # –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω
            state.clear.assert_called_once()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–æ
            message.answer.assert_called_once()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            assert "üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ" in str(message.answer.call_args)
    
    @pytest.mark.asyncio
    async def test_auto_text_handler_does_not_clear_write_states(self):
        """–¢–µ—Å—Ç: auto_text_handler –Ω–µ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è WriteStates –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        # Arrange
        message = AsyncMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 12345
        message.text = "test message"
        message.answer = AsyncMock()
        
        state = AsyncMock(spec=FSMContext)
        state.get_state = AsyncMock(return_value="WriteStates:INPUT_TEXT")
        state.clear = AsyncMock()
        
        db = AsyncMock()
        active_mailbox_id = 1
        tz = None
        
        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–¥–º–∏–Ω–æ–º
        with patch('app.features.write.auto_text_handler.UsersRepo') as mock_repo_class:
            mock_repo = AsyncMock()
            mock_repo.get_role = AsyncMock(return_value="admin")
            mock_repo_class.return_value = mock_repo
            
            # Act
            result = await on_auto_text_input(message, state, db, active_mailbox_id, tz)
            
            # Assert
            assert result is False  # –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω
            state.clear.assert_not_called()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ WriteStates –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—á–∏—â–∞—Ç—å—Å—è
            message.answer.assert_not_called()  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è
