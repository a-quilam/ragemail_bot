"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤–æ–π–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º @ –≤ username
"""
import re
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../bot'))

try:
    from app.utils.input_sanitizer import InputSanitizer
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å InputSanitizer")
    sys.exit(1)


def test_input_sanitizer_username_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ username –≤ InputSanitizer"""
    
    # –¢–µ—Å—Ç 1: Username —Å @ –≤ –Ω–∞—á–∞–ª–µ
    username_with_at = "@jericho_pipes"
    result = InputSanitizer.sanitize_username(username_with_at)
    assert result == "jericho_pipes", f"Expected 'jericho_pipes', got '{result}'"
    
    # –¢–µ—Å—Ç 2: Username –±–µ–∑ @ –≤ –Ω–∞—á–∞–ª–µ
    username_without_at = "jericho_pipes"
    result = InputSanitizer.sanitize_username(username_without_at)
    assert result == "jericho_pipes", f"Expected 'jericho_pipes', got '{result}'"
    
    # –¢–µ—Å—Ç 3: –î–≤–æ–π–Ω–æ–π @ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    username_double_at = "@@jericho_pipes"
    result = InputSanitizer.sanitize_username(username_double_at)
    assert result is None, f"Expected None for invalid username with @ in middle, got '{result}'"
    
    # –¢–µ—Å—Ç 4: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    invalid_username = "user@domain.com"
    result = InputSanitizer.sanitize_username(invalid_username)
    assert result is None, f"Expected None for invalid username, got '{result}'"
    
    # –¢–µ—Å—Ç 5: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π username
    short_username = "user"
    result = InputSanitizer.sanitize_username(short_username)
    assert result is None, f"Expected None for short username, got '{result}'"
    
    # –¢–µ—Å—Ç 6: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π username
    long_username = "a" * 35
    result = InputSanitizer.sanitize_username(long_username)
    assert result is None, f"Expected None for long username, got '{result}'"
    
    print("‚úÖ InputSanitizer username processing tests passed")


def test_username_regex_pattern():
    """–¢–µ—Å—Ç regex pattern –¥–ª—è username"""
    
    # –í–∞–ª–∏–¥–Ω—ã–µ username
    valid_usernames = [
        "jericho_pipes",
        "user123",
        "test_user",
        "admin",
        "a" * 32  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    ]
    
    for username in valid_usernames:
        assert re.match(r'^[a-zA-Z0-9_]{5,32}$', username), f"Username '{username}' should be valid"
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username
    invalid_usernames = [
        "@jericho_pipes",  # —Å @
        "user",  # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        "a" * 35,  # —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        "user@domain",  # —Å @ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        "user-name",  # —Å –¥–µ—Ñ–∏—Å–æ–º
        "user.name",  # —Å —Ç–æ—á–∫–æ–π
        "user name",  # —Å –ø—Ä–æ–±–µ–ª–æ–º
        "",  # –ø—É—Å—Ç–æ–π
        "1234",  # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)
    ]
    
    for username in invalid_usernames:
        assert not re.match(r'^[a-zA-Z0-9_]{5,32}$', username), f"Username '{username}' should be invalid"
    
    print("‚úÖ Username regex pattern tests passed")


def test_remove_admin_username_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ username –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É username –±–µ–∑ –º–æ–∫–æ–≤
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ username –∏–∑ action_remove_admin.py
    raw_username = "@jericho_pipes"
    username = raw_username[1:]  # "jericho_pipes" - —É–±–∏—Ä–∞–µ–º @
    sanitized_username = InputSanitizer.sanitize_username(username)  # "jericho_pipes"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert sanitized_username == "jericho_pipes", f"Expected 'jericho_pipes', got '{sanitized_username}'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è API –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    api_call_username = f"@{sanitized_username}"  # "@jericho_pipes"
    assert api_call_username == "@jericho_pipes", f"Expected '@jericho_pipes', got '{api_call_username}'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—É–¥–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ @
    assert not api_call_username.startswith("@@"), "API call should not have double @"
    
    print("‚úÖ Remove admin username processing tests passed")


def test_username_validation_before_api_call():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º API"""
    
    # –í–∞–ª–∏–¥–Ω—ã–µ username –¥–ª—è API
    valid_usernames = [
        "jericho_pipes",
        "user123",
        "test_user",
        "admin"
    ]
    
    for username in valid_usernames:
        assert re.match(r'^[a-zA-Z0-9_]{5,32}$', username), f"Username '{username}' should be valid for API call"
    
    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ username –¥–ª—è API
    invalid_usernames = [
        "@jericho_pipes",  # —Å @
        "user",  # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        "a" * 35,  # —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        "user@domain",  # —Å @ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        "user-name",  # —Å –¥–µ—Ñ–∏—Å–æ–º
        "",  # –ø—É—Å—Ç–æ–π
        None  # None
    ]
    
    for username in invalid_usernames:
        if username is None:
            assert not username, "None username should be invalid"
        else:
            assert not re.match(r'^[a-zA-Z0-9_]{5,32}$', username), f"Username '{username}' should be invalid for API call"
    
    print("‚úÖ Username validation before API call tests passed")


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    # –¢–µ—Å—Ç —Å None
    result = InputSanitizer.sanitize_username(None)
    assert result is None, "None input should return None"
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    result = InputSanitizer.sanitize_username("")
    assert result is None, "Empty string should return None"
    
    # –¢–µ—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    result = InputSanitizer.sanitize_username("  jericho_pipes  ")
    assert result == "jericho_pipes", "Whitespace should be trimmed"
    
    # –¢–µ—Å—Ç —Å HTML —Ç–µ–≥–∞–º–∏
    result = InputSanitizer.sanitize_username("<script>jericho_pipes</script>")
    assert result == "jericho_pipes", "HTML tags should be removed"
    
    # –¢–µ—Å—Ç —Å HTML entities (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None, —Ç–∞–∫ –∫–∞–∫ & –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ username)
    result = InputSanitizer.sanitize_username("jericho&amp;pipes")
    assert result is None, "HTML entities with invalid characters should return None"
    
    print("‚úÖ Edge cases tests passed")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤–æ–π–Ω—ã–º @ –≤ username...")
    
    try:
        test_input_sanitizer_username_processing()
        test_username_regex_pattern()
        test_username_validation_before_api_call()
        test_edge_cases()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤–æ–π–Ω—ã–º @ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   - InputSanitizer.sanitize_username —Ç–µ–ø–µ—Ä—å —É–±–∏—Ä–∞–µ—Ç @ –∏–∑ –Ω–∞—á–∞–ª–∞ username")
        print("   - action_remove_admin.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É username")
        print("   - –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º Telegram API")
        print("   - –£–ª—É—á—à–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        raise
