"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow deeplink –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤—è–∑–∫–∏ —è—â–∏–∫–æ–≤
"""
import unittest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import types
from aiogram.types import User, Message

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../../bot'))

from app.features.bind.start_payload import cmd_start_payload
from app.features.admin.cmd_postpin import cmd_postpin, on_postpin_text
from app.infra.repo.users_repo import UsersRepo
from app.infra.repo.mailboxes_repo import MailboxesRepo


class TestDeeplinkFlow(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow deeplink"""

    async def asyncSetUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.db = AsyncMock()
        self.bot = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        self.users_repo = AsyncMock(spec=UsersRepo)
        self.mailboxes_repo = AsyncMock(spec=MailboxesRepo)
        
        # –ú–æ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = User(
            id=12345,
            is_bot=False,
            first_name="Test",
            username="testuser"
        )
        
        # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.message = MagicMock(spec=Message)
        self.message.from_user = self.user
        self.message.answer = AsyncMock()
        self.message.bot = self.bot

    @patch('app.features.admin.cmd_postpin.can_manage_mailbox')
    @patch('app.infra.repo.mailboxes_repo.MailboxesRepo')
    async def test_deeplink_creation_flow(self, mock_mailboxes_repo_class, mock_can_manage_mailbox):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è deeplink –ø–æ—Å—Ç–∞"""
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_can_manage_mailbox.return_value = True
        
        # –ú–æ–∫–∞–µ–º mailbox
        mock_mailbox = (1, "Test Mailbox", -1001234567890, 12345, None, None)
        mock_mailboxes_repo = AsyncMock()
        mock_mailboxes_repo.get.return_value = mock_mailbox
        mock_mailboxes_repo_class.return_value = mock_mailboxes_repo
        
        # –ú–æ–∫–∞–µ–º –±–æ—Ç–∞
        mock_me = MagicMock()
        mock_me.username = "testbot"
        self.bot.get_me.return_value = mock_me
        self.bot.send_message = AsyncMock()
        self.bot.pin_chat_message = AsyncMock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ deeplink –ø–æ—Å—Ç–∞
        self.message.text = "üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç"
        active_mailbox_id = 1
        
        # –®–∞–≥ 1: –ê–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç"
        await cmd_postpin(self.message, active_mailbox_id, self.db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        self.message.answer.assert_called_with("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–∞. –Ø –¥–æ–±–∞–≤–ª—é deeplink –∏ –∑–∞–∫—Ä–µ–ø–ª—é –≤ –∫–∞–Ω–∞–ª–µ.")
        
        # –®–∞–≥ 2: –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç
        self.message.text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π —è—â–∏–∫!"
        await on_postpin_text(self.message, self.db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª
        self.bot.send_message.assert_called_once()
        call_args = self.bot.send_message.call_args
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
        self.assertEqual(call_args[0][0], -1001234567890)  # channel_id (–ø–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç)
        self.assertEqual(call_args[0][1], "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π —è—â–∏–∫!")  # text (–≤—Ç–æ—Ä–æ–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç)
        self.assertTrue(call_args[1]['disable_web_page_preview'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å deeplink
        reply_markup = call_args[1]['reply_markup']
        self.assertIsNotNone(reply_markup)
        self.assertEqual(len(reply_markup.inline_keyboard), 1)
        self.assertEqual(len(reply_markup.inline_keyboard[0]), 1)
        
        button = reply_markup.inline_keyboard[0][0]
        self.assertEqual(button.text, "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å")
        self.assertEqual(button.url, "https://t.me/testbot?start=1")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –±—ã–ª –∑–∞–∫—Ä–µ–ø–ª–µ–Ω
        self.bot.pin_chat_message.assert_called_once()

    @patch('app.features.bind.start_payload.UsersRepo')
    @patch('app.features.bind.start_payload.MailboxesRepo')
    @patch('app.features.bind.start_payload.user_is_member')
    @patch('app.utils.mailbox_permissions.can_manage_mailbox')
    async def test_deeplink_usage_flow(self, mock_can_manage_mailbox, mock_user_is_member, mock_mailboxes_repo_class, mock_users_repo_class):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è deeplink –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_user_is_member.return_value = True
        mock_can_manage_mailbox.return_value = False  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —è—â–∏–∫–æ–º
        
        # –ú–æ–∫–∞–µ–º mailbox
        mock_mailbox = (1, "Test Mailbox", -1001234567890, 12345, None, None)
        mock_mailboxes_repo = AsyncMock()
        mock_mailboxes_repo.get.return_value = mock_mailbox
        mock_mailboxes_repo_class.return_value = mock_mailboxes_repo
        
        # –ú–æ–∫–∞–µ–º users repo
        mock_users_repo = AsyncMock()
        mock_users_repo.get.return_value = None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        mock_users_repo.get_role.return_value = "user"
        mock_users_repo_class.return_value = mock_users_repo
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ deeplink
        self.message.text = "/start 1"
        
        await cmd_start_payload(self.message, self.db, self.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω
        mock_users_repo.upsert.assert_called_once_with(12345, username="testuser")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        mock_users_repo.set_active_mailbox.assert_called_once_with(12345, 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ
        self.message.answer.assert_called_once()
        call_args = self.message.answer.call_args[0][0]
        self.assertIn("‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>", call_args)
        self.assertIn("–¢–µ–ø–µ—Ä—å –≤—ã –ø–∏—à–µ—Ç–µ –≤ —ç—Ç–æ—Ç —è—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", call_args)

    async def test_deeplink_format_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ deeplink"""
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã deeplink
        test_cases = [
            ("/start 123", True, 123),      # –í–∞–ª–∏–¥–Ω—ã–π
            ("/start 0", True, 0),          # –í–∞–ª–∏–¥–Ω—ã–π (edge case)
            ("/start abc", False, None),    # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π (–Ω–µ —á–∏—Å–ª–æ)
            ("/start", False, None),        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π (–Ω–µ—Ç payload)
            ("/start 123 456", True, 123),  # –í–∞–ª–∏–¥–Ω—ã–π (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
        ]
        
        for text, should_process, expected_mailbox_id in test_cases:
            with self.subTest(text=text):
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏
                self.message.answer.reset_mock()
                self.message.text = text
                
                # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
                with patch('app.features.bind.start_payload.UsersRepo') as mock_users_repo_class, \
                     patch('app.features.bind.start_payload.MailboxesRepo') as mock_mailboxes_repo_class, \
                     patch('app.features.bind.start_payload.user_is_member') as mock_user_is_member, \
                     patch('app.utils.mailbox_permissions.can_manage_mailbox') as mock_can_manage_mailbox:
                    
                    if should_process:
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        mock_user_is_member.return_value = True
                        mock_can_manage_mailbox.return_value = False  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        mock_mailbox = (expected_mailbox_id, "Test Mailbox", -1001234567890, 12345, None, None)
                        mock_mailboxes_repo = AsyncMock()
                        mock_mailboxes_repo.get.return_value = mock_mailbox
                        mock_mailboxes_repo_class.return_value = mock_mailboxes_repo
                        
                        mock_users_repo = AsyncMock()
                        mock_users_repo.get.return_value = None
                        mock_users_repo.get_role.return_value = "user"
                        mock_users_repo_class.return_value = mock_users_repo
                        
                        await cmd_start_payload(self.message, self.db, self.bot)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        self.message.answer.assert_called()
                    else:
                        # –î–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–æ–≤
                        await cmd_start_payload(self.message, self.db, self.bot)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        self.message.answer.assert_not_called()


if __name__ == '__main__':
    unittest.main()
