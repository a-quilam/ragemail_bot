"""
–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ username –±–µ–∑ InputSanitizer
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../bot'))


def test_simplified_username_processing():
    """–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ username –∫–∞–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ action_remove_admin.py (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    def process_username_simplified(text):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ username –±–µ–∑ InputSanitizer"""
        if text and text.strip().startswith('@'):
            username = text.strip()[1:]  # —É–±–∏—Ä–∞–µ–º @
            return username
        return None
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π username
    result = process_username_simplified("@jericho_pipes")
    assert result == "jericho_pipes", f"Expected 'jericho_pipes', got '{result}'"
    
    # –¢–µ—Å—Ç 2: Username —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    result = process_username_simplified("  @jericho_pipes  ")
    assert result == "jericho_pipes", f"Expected 'jericho_pipes', got '{result}'"
    
    # –¢–µ—Å—Ç 3: Username –±–µ–∑ @
    result = process_username_simplified("jericho_pipes")
    assert result is None, f"Expected None, got '{result}'"
    
    # –¢–µ—Å—Ç 4: –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    result = process_username_simplified("")
    assert result is None, f"Expected None, got '{result}'"
    
    # –¢–µ—Å—Ç 5: –¢–æ–ª—å–∫–æ @
    result = process_username_simplified("@")
    assert result == "", f"Expected empty string, got '{result}'"
    
    print("‚úÖ Simplified username processing tests passed")


def test_api_call_format():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–∑–æ–≤–∞ API"""
    
    def format_api_call(username):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è API –≤—ã–∑–æ–≤–∞"""
        return f"@{username}"
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π username
    api_call = format_api_call("jericho_pipes")
    assert api_call == "@jericho_pipes", f"Expected '@jericho_pipes', got '{api_call}'"
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ @
    assert not api_call.startswith("@@"), "API call should not have double @"
    
    print("‚úÖ API call format tests passed")


def test_consistency_with_add_admin():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    # –õ–æ–≥–∏–∫–∞ –∏–∑ action_add_admin.py
    def add_admin_username_processing(text):
        if text and text.strip().startswith('@'):
            username = text.strip()[1:]  # —É–±–∏—Ä–∞–µ–º @
            return username
        return None
    
    # –õ–æ–≥–∏–∫–∞ –∏–∑ action_remove_admin.py (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    def remove_admin_username_processing(text):
        if text and text.strip().startswith('@'):
            username = text.strip()[1:]  # —É–±–∏—Ä–∞–µ–º @
            return username
        return None
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        "@jericho_pipes",
        "  @jericho_pipes  ",
        "@user123",
        "@test_user",
    ]
    
    for test_case in test_cases:
        add_result = add_admin_username_processing(test_case)
        remove_result = remove_admin_username_processing(test_case)
        
        assert add_result == remove_result, f"Inconsistent processing for '{test_case}': add='{add_result}', remove='{remove_result}'"
    
    print("‚úÖ Consistency with add admin tests passed")


def test_performance_comparison():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    import time
    
    def simplified_processing(text):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        if text and text.strip().startswith('@'):
            return text.strip()[1:]
        return None
    
    def complex_processing(text):
        """–°–ª–æ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è InputSanitizer)"""
        if not text or not text.strip().startswith('@'):
            return None
        
        username = text.strip()[1:]
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        import re
        if not re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
            return None
        
        return username
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    test_input = "@jericho_pipes"
    iterations = 10000
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    start_time = time.time()
    for _ in range(iterations):
        simplified_processing(test_input)
    simplified_time = time.time() - start_time
    
    # –°–ª–æ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è
    start_time = time.time()
    for _ in range(iterations):
        complex_processing(test_input)
    complex_time = time.time() - start_time
    
    speedup = complex_time / simplified_time
    
    print(f"‚úÖ Performance comparison:")
    print(f"   Simplified: {simplified_time:.4f}s for {iterations} iterations")
    print(f"   Complex: {complex_time:.4f}s for {iterations} iterations")
    print(f"   Speedup: {speedup:.1f}x faster")
    
    assert speedup > 1.5, f"Simplified version should be at least 1.5x faster, got {speedup:.1f}x"


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ username...")
    
    try:
        test_simplified_username_processing()
        test_api_call_format()
        test_consistency_with_add_admin()
        test_performance_comparison()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ username –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –£–ø—Ä–æ—â–µ–Ω–∏—è:")
        print("   - –£–±—Ä–∞–Ω InputSanitizer (–∏–∑–±—ã—Ç–æ—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)")
        print("   - –£–±—Ä–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ API")
        print("   - –£–ø—Ä–æ—â–µ–Ω –∏–º–ø–æ—Ä—Ç (—É–±—Ä–∞–Ω –º–æ–¥—É–ª—å re)")
        print("   - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("   - –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("   - Telegram API —Å–∞–º –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç username")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        raise
