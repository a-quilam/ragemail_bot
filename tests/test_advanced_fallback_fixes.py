"""
–¢–µ—Å—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π fallback-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
"""
import asyncio
import logging


def test_advanced_sanitize_username():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ sanitize_username —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    def sanitize_username_advanced(username):
        if username is None:
            return ""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
            username_str = str(username)
            # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            import re
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã
            sanitized = re.sub(r'[^a-zA-Z0-9_-]', '', username_str)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            return sanitized[:50]
        except Exception as e:
            logging.warning(f"Username sanitizer fallback error: {e}")
            return ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    assert sanitize_username_advanced("user123") == "user123"
    assert sanitize_username_advanced("user@domain.com") == "userdomaincom"
    assert sanitize_username_advanced("user<script>") == "userscript"
    assert sanitize_username_advanced("user with spaces") == "userwithspaces"
    assert sanitize_username_advanced("user!@#$%^&*()") == "user"
    assert sanitize_username_advanced("user_123-test") == "user_123-test"
    assert sanitize_username_advanced(None) == ""
    assert sanitize_username_advanced("") == ""
    assert sanitize_username_advanced("a" * 100) == "a" * 50  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    
    print("‚úÖ Advanced sanitize_username —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_advanced_sanitize_callback_data():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ sanitize_callback_data —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    def sanitize_callback_data_advanced(data):
        if data is None:
            return ""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
            data_str = str(data)
            # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            import re
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã
            sanitized = re.sub(r'[^a-zA-Z0-9_-]', '', data_str)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (Telegram callback data limit is 64 bytes)
            return sanitized[:64]
        except Exception as e:
            logging.warning(f"Callback data sanitizer fallback error: {e}")
            return ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    assert sanitize_callback_data_advanced("button_123") == "button_123"
    assert sanitize_callback_data_advanced("button@click") == "buttonclick"
    assert sanitize_callback_data_advanced("button<script>") == "buttonscript"
    assert sanitize_callback_data_advanced("button with spaces") == "buttonwithspaces"
    assert sanitize_callback_data_advanced("button!@#$%^&*()") == "button"
    assert sanitize_callback_data_advanced("button_123-test") == "button_123-test"
    assert sanitize_callback_data_advanced(None) == ""
    assert sanitize_callback_data_advanced("") == ""
    assert sanitize_callback_data_advanced("a" * 100) == "a" * 64  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    
    print("‚úÖ Advanced sanitize_callback_data —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_advanced_sanitize_user_input():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ sanitize_user_input —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    def sanitize_user_input_advanced(data):
        if data is None:
            return ""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
            data_str = str(data)
            # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            import re
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            sanitized = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9\s@_.,!?\-()]', '', data_str)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            return sanitized[:1000]
        except Exception as e:
            logging.warning(f"Input sanitizer fallback error: {e}")
            return ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    assert sanitize_user_input_advanced("Hello World!") == "Hello World!"
    assert sanitize_user_input_advanced("–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!") == "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!"
    assert sanitize_user_input_advanced("user@domain.com") == "user@domain.com"
    assert sanitize_user_input_advanced("text<script>alert('xss')</script>") == "textscriptalert(xss)script"
    assert sanitize_user_input_advanced("text with spaces and punctuation!") == "text with spaces and punctuation!"
    assert sanitize_user_input_advanced("text!@#$%^&*()") == "text!@()"
    assert sanitize_user_input_advanced("text_123-test") == "text_123-test"
    assert sanitize_user_input_advanced(None) == ""
    assert sanitize_user_input_advanced("") == ""
    assert sanitize_user_input_advanced(123) == "123"
    assert sanitize_user_input_advanced(True) == "True"
    assert sanitize_user_input_advanced("a" * 2000) == "a" * 1000  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    
    print("‚úÖ Advanced sanitize_user_input —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_advanced_validation_result():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ValidationResult —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    class ValidationResultAdvanced:
        def __init__(self, is_valid=True, sanitized_data=None, errors=None, warnings=None):
            self.is_valid = is_valid
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ sanitized_data
            if sanitized_data is None:
                self.sanitized_data = ""
            else:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    if isinstance(sanitized_data, (str, int, float, bool)):
                        self.sanitized_data = str(sanitized_data)
                    elif isinstance(sanitized_data, (list, dict)):
                        # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        self.sanitized_data = sanitized_data
                    else:
                        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É
                        self.sanitized_data = str(sanitized_data)
                except Exception as e:
                    logging.warning(f"ValidationResult sanitized_data error: {e}")
                    self.sanitized_data = ""
            self.errors = errors or []
            self.warnings = warnings or []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    result1 = ValidationResultAdvanced(True, "Hello World")
    assert result1.sanitized_data == "Hello World"
    assert result1.is_valid is True
    
    result2 = ValidationResultAdvanced(True, 123)
    assert result2.sanitized_data == "123"
    
    result3 = ValidationResultAdvanced(True, True)
    assert result3.sanitized_data == "True"
    
    result4 = ValidationResultAdvanced(True, [1, 2, 3])
    assert result4.sanitized_data == [1, 2, 3]
    
    result5 = ValidationResultAdvanced(True, {"key": "value"})
    assert result5.sanitized_data == {"key": "value"}
    
    result6 = ValidationResultAdvanced(True, None)
    assert result6.sanitized_data == ""
    
    result7 = ValidationResultAdvanced(False, "error", ["Invalid input"], ["Warning"])
    assert result7.is_valid is False
    assert result7.errors == ["Invalid input"]
    assert result7.warnings == ["Warning"]
    
    print("‚úÖ Advanced ValidationResult —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    long_string = "a" * 10000
    def sanitize_long_string(data):
        if data is None:
            return ""
        try:
            data_str = str(data)
            import re
            sanitized = re.sub(r'[^a-zA-Z0-9_-]', '', data_str)
            return sanitized[:50]
        except Exception:
            return ""
    
    result = sanitize_long_string(long_string)
    assert len(result) == 50
    assert result == "a" * 50
    
    # –¢–µ—Å—Ç —Å None –∏ –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    assert sanitize_long_string(None) == ""
    assert sanitize_long_string("") == ""
    assert sanitize_long_string("   ") == ""
    
    # –¢–µ—Å—Ç —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ Unicode
    unicode_string = "—Ç–µ—Å—Ç_123-—Ç–µ—Å—Ç!@#$%^&*()"
    result = sanitize_long_string(unicode_string)
    assert result == "_123-"  # –¶–∏—Ñ—Ä—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ—Å—Ç–∞–ª–∏—Å—å
    
    # –¢–µ—Å—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    class TestObject:
        def __str__(self):
            return "test_object"
    
    obj = TestObject()
    result = sanitize_long_string(obj)
    assert result == "test_object"
    
    print("‚úÖ Edge cases —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


async def test_all_advanced_fallbacks():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π fallback-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π fallback-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π...")
    
    try:
        test_advanced_sanitize_username()
        test_advanced_sanitize_callback_data()
        test_advanced_sanitize_user_input()
        test_advanced_validation_result()
        test_edge_cases()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(test_all_advanced_fallbacks())
