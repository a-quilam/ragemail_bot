"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö fallback-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
"""
import asyncio
import time


def test_optimized_sanitize_user_input():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ sanitize_user_input"""
    def sanitize_user_input_optimized(data):
        if data is None:
            return ""
        try:
            data_str = str(data)
            safe_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "
            sanitized = ''.join(c for c in data_str if c in safe_chars)
            return sanitized.encode('utf-8')[:1000].decode('utf-8', errors='ignore')
        except Exception:
            return ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    start_time = time.time()
    for i in range(1000):
        result = sanitize_user_input_optimized("Hello World! 123")
    end_time = time.time()
    
    print(f"‚úÖ sanitize_user_input: {end_time - start_time:.4f}s –¥–ª—è 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    assert sanitize_user_input_optimized("Hello World!") == "Hello World"
    assert sanitize_user_input_optimized("Hello@#$%") == "Hello"
    assert sanitize_user_input_optimized(None) == ""
    assert sanitize_user_input_optimized("") == ""
    
    print("‚úÖ Optimized sanitize_user_input —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_optimized_sanitize_username():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ sanitize_username"""
    def sanitize_username_optimized(username):
        if username is None:
            return ""
        try:
            username_str = str(username)
            safe_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-"
            sanitized = ''.join(c for c in username_str if c in safe_chars)
            return sanitized[:50]
        except Exception:
            return ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    start_time = time.time()
    for i in range(1000):
        result = sanitize_username_optimized("user_123-test")
    end_time = time.time()
    
    print(f"‚úÖ sanitize_username: {end_time - start_time:.4f}s –¥–ª—è 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    assert sanitize_username_optimized("user_123-test") == "user_123-test"
    assert sanitize_username_optimized("user@domain.com") == "userdomaincom"
    assert sanitize_username_optimized(None) == ""
    assert sanitize_username_optimized("") == ""
    
    print("‚úÖ Optimized sanitize_username —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_optimized_sanitize_callback_data():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ sanitize_callback_data"""
    def sanitize_callback_data_optimized(data):
        if data is None:
            return ""
        try:
            data_str = str(data)
            safe_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-"
            sanitized = ''.join(c for c in data_str if c in safe_chars)
            return sanitized[:64]
        except Exception:
            return ""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    start_time = time.time()
    for i in range(1000):
        result = sanitize_callback_data_optimized("button_123-test")
    end_time = time.time()
    
    print(f"‚úÖ sanitize_callback_data: {end_time - start_time:.4f}s –¥–ª—è 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    assert sanitize_callback_data_optimized("button_123-test") == "button_123-test"
    assert sanitize_callback_data_optimized("button@click") == "buttonclick"
    assert sanitize_callback_data_optimized(None) == ""
    assert sanitize_callback_data_optimized("") == ""
    
    print("‚úÖ Optimized sanitize_callback_data —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_optimized_validation_result():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ValidationResult"""
    class ValidationResultOptimized:
        def __init__(self, is_valid=True, sanitized_data=None, errors=None, warnings=None):
            self.is_valid = is_valid
            if sanitized_data is None:
                self.sanitized_data = ""
            elif isinstance(sanitized_data, str):
                self.sanitized_data = sanitized_data
            else:
                try:
                    self.sanitized_data = str(sanitized_data)
                except Exception:
                    self.sanitized_data = ""
            self.errors = errors or []
            self.warnings = warnings or []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    start_time = time.time()
    for i in range(1000):
        result = ValidationResultOptimized(True, "test_data")
    end_time = time.time()
    
    print(f"‚úÖ ValidationResult: {end_time - start_time:.4f}s –¥–ª—è 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    result1 = ValidationResultOptimized(True, "Hello")
    assert result1.sanitized_data == "Hello"
    assert result1.is_valid is True
    
    result2 = ValidationResultOptimized(True, 123)
    assert result2.sanitized_data == "123"
    
    result3 = ValidationResultOptimized(True, None)
    assert result3.sanitized_data == ""
    
    print("‚úÖ Optimized ValidationResult —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_utf8_byte_limits():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –±–∞–π—Ç–∞–º UTF-8"""
    def test_utf8_limit(data, max_bytes):
        try:
            return data.encode('utf-8')[:max_bytes].decode('utf-8', errors='ignore')
        except Exception:
            return ""
    
    # –¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π (–∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª = 2 –±–∞–π—Ç–∞)
    cyrillic_text = "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!"
    result = test_utf8_limit(cyrillic_text, 10)  # 10 –±–∞–π—Ç = 5 —Å–∏–º–≤–æ–ª–æ–≤
    assert len(result.encode('utf-8')) <= 10
    
    # –¢–µ—Å—Ç —Å –ª–∞—Ç–∏–Ω–∏—Ü–µ–π (–∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª = 1 –±–∞–π—Ç)
    latin_text = "Hello World!"
    result = test_utf8_limit(latin_text, 10)  # 10 –±–∞–π—Ç = 10 —Å–∏–º–≤–æ–ª–æ–≤
    assert len(result.encode('utf-8')) <= 10
    
    print("‚úÖ UTF-8 byte limits —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


def test_performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
    import re
    
    def old_sanitize_with_regex(data):
        if data is None:
            return ""
        try:
            data_str = str(data)
            sanitized = re.sub(r'[^a-zA-Z0-9_-]', '', data_str)
            return sanitized[:50]
        except Exception:
            return ""
    
    def new_sanitize_optimized(data):
        if data is None:
            return ""
        try:
            data_str = str(data)
            safe_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-"
            sanitized = ''.join(c for c in data_str if c in safe_chars)
            return sanitized[:50]
        except Exception:
            return ""
    
    test_data = "user_123-test@domain.com"
    iterations = 1000
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ —Å regex
    start_time = time.time()
    for i in range(iterations):
        result = old_sanitize_with_regex(test_data)
    old_time = time.time() - start_time
    
    # –¢–µ—Å—Ç –Ω–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    start_time = time.time()
    for i in range(iterations):
        result = new_sanitize_optimized(test_data)
    new_time = time.time() - start_time
    
    speedup = old_time / new_time if new_time > 0 else 1
    
    print(f"‚úÖ Performance comparison:")
    print(f"   Old version (regex): {old_time:.4f}s")
    print(f"   New version (optimized): {new_time:.4f}s")
    print(f"   Speedup: {speedup:.2f}x")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    assert old_sanitize_with_regex(test_data) == new_sanitize_optimized(test_data)
    
    print("‚úÖ Performance comparison —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")


async def test_all_optimized_fallbacks():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö fallback-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö fallback-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π...")
    
    try:
        test_optimized_sanitize_user_input()
        test_optimized_sanitize_username()
        test_optimized_sanitize_callback_data()
        test_optimized_validation_result()
        test_utf8_byte_limits()
        test_performance_comparison()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö fallback-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–µ–µ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(test_all_optimized_fallbacks())
