"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
"""
import logging
from typing import List, Optional
from app.infra.repo.alias_blocks_repo import AliasBlocksRepo

logger = logging.getLogger(__name__)

async def check_message_for_blocked_words(message_text: str, blocks_repo: AliasBlocksRepo, mailbox_id: Optional[int] = None) -> Optional[dict]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    
    Args:
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        blocks_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        mailbox_id: ID —è—â–∏–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏–ª–∏ None –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç
        –§–æ—Ä–º–∞—Ç: {"word": "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ_—Å–ª–æ–≤–æ", "reason": "–ø—Ä–∏—á–∏–Ω–∞_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"}
    """
    if not message_text or not blocks_repo:
        return None
    
    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —è—â–∏–∫–µ
    blocked_words = await blocks_repo.get_blocked_words(mailbox_id)
    if not blocked_words:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á–µ–≥–æ
        return None
    
    from app.utils.word_normalization import extract_words_from_text, normalize_word
    
    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 2: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã
    if len(message_text) <= 200:
        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        normalized_words = extract_words_from_text(message_text)
    else:
        # –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ
        words = message_text.split()
        # –ë–µ—Ä–µ–º –∫–∞–∂–¥–æ–µ –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        sampled_words = [words[i] for i in range(0, len(words), 2)]
        sampled_text = ' '.join(sampled_words)
        normalized_words = extract_words_from_text(sampled_text)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    blocked_normalized = set()
    for blocked_word_info in blocked_words:
        blocked_word = blocked_word_info['word']
        normalized_blocked = normalize_word(blocked_word)
        if normalized_blocked:
            blocked_normalized.add(normalized_blocked)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
    intersection = normalized_words.intersection(blocked_normalized)
    if intersection:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        blocked_normalized_word = next(iter(intersection))
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
        blocking_reason = ""
        for blocked_word_info in blocked_words:
            if normalize_word(blocked_word_info['word']) == blocked_normalized_word:
                blocking_reason = blocked_word_info.get('reason', '')
                break
        
        logger.info(f"Message blocked: normalized word '{blocked_normalized_word}' is blocked for mailbox {mailbox_id}")
        return {
            "word": blocked_normalized_word,
            "reason": blocking_reason
        }
    
    return None

def get_blocked_message_response(blocked_info: dict, message_text: str, mailbox_id: Optional[int] = None) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    
    Args:
        blocked_info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ {"word": "—Å–ª–æ–≤–æ", "reason": "–ø—Ä–∏—á–∏–Ω–∞"}
        message_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        mailbox_id: ID —è—â–∏–∫–∞
        
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    blocked_word = blocked_info["word"]
    blocking_reason = blocked_info.get("reason", "")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    reason_text = f"\nüìã <b>–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {blocking_reason}" if blocking_reason else ""
    
    return (
        f"üö´ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
        f"‚ùå <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:</b> \"{blocked_word}\"{reason_text}\n"
        f"üìù <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n\n"
        f"üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∞ –º–æ–∂–µ—Ç –∫–∞—Ä–∞—Ç—å—Å—è –∫—É–ª–¥–∞—É–Ω–æ–º."
    )


def get_blocked_message_keyboard() -> 'ReplyKeyboardMarkup':
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    
    Returns:
        ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    """
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="‚úÖ –•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –Ω–∞—Ä—É—à–∞—Ç—å")
        ]],
        resize_keyboard=True,
        selective=True,
        one_time_keyboard=True
    )
