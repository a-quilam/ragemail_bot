"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
"""
import logging
from typing import List, Optional
from app.infra.repo.alias_blocks_repo import AliasBlocksRepo

logger = logging.getLogger(__name__)

async def check_message_for_blocked_words(message_text: str, blocks_repo: AliasBlocksRepo, mailbox_id: Optional[int] = None) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ pymorphy2)
    
    Args:
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        blocks_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        mailbox_id: ID —è—â–∏–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        
    Returns:
        –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ None –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç
    """
    if not message_text or not blocks_repo:
        return None
    
    from app.utils.morphology import extract_words_from_text, normalize_word
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    normalized_words = extract_words_from_text(message_text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —è—â–∏–∫–∞
    blocked_words = await blocks_repo.get_blocked_words(mailbox_id)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    blocked_normalized = set()
    for blocked_word_info in blocked_words:
        blocked_word = blocked_word_info['word']
        normalized_blocked = normalize_word(blocked_word)
        if normalized_blocked:
            blocked_normalized.add(normalized_blocked)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
    intersection = normalized_words.intersection(blocked_normalized)
    if intersection:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        blocked_normalized_word = next(iter(intersection))
        logger.info(f"Message blocked: normalized word '{blocked_normalized_word}' is blocked for mailbox {mailbox_id}")
        return blocked_normalized_word
    
    return None

def get_blocked_message_response(blocked_word: str, message_text: str, mailbox_id: Optional[int] = None) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
    
    Args:
        blocked_word: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        message_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        mailbox_id: ID —è—â–∏–∫–∞
        
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return (
        f"üö´ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
        f"‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –°–ª–æ–≤–æ \"{blocked_word}\" –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ\n"
        f"üìù <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {message_text[:100]}{'...' if len(message_text) > 100 else ''}\n\n"
        f"üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∞ –º–æ–∂–µ—Ç –∫–∞—Ä–∞—Ç—å—Å—è –∫—É–ª–¥–∞—É–Ω–æ–º."
    )
