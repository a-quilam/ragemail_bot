from aiogram import types
from aiogram.fsm.context import FSMContext
from app.fsm.write_states import WriteStates
from app.texts.prompts import PROMPT_INPUT
from app.infra.repo.users_repo import UsersRepo
from app.core.config import settings
from datetime import datetime
import logging

async def is_admin_db(message, db) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    try:
        role = await UsersRepo(db).get_role(message.from_user.id)
    except Exception:
        role = "user"
    return role in ("admin", "superadmin") or (settings.SUPERADMIN_ID and message.from_user.id == settings.SUPERADMIN_ID)

async def handle_user_message(m: types.Message, state: FSMContext, db, active_mailbox_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –ø–∏—Å–µ–º"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    if await is_admin_db(m, db):
        return False  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from app.infra.repo.user_cooldowns_repo import UserCooldownsRepo
    cooldowns_repo = UserCooldownsRepo(db)
    cooldown_info = await cooldowns_repo.is_user_on_cooldown(m.from_user.id, active_mailbox_id)
    
    if cooldown_info:
        cooldown_until = cooldown_info['cooldown_until']
        time_left = cooldown_until - datetime.now()
        hours_left = int(time_left.total_seconds() / 3600)
        minutes_left = int((time_left.total_seconds() % 3600) / 60)
        
        reason_text = f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {cooldown_info['reason']}" if cooldown_info['reason'] else ""
        
        await m.answer(
            f"‚è∞ <b>–í—ã –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ</b>\n\n"
            f"üö´ <b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> {cooldown_info['alias']}\n"
            f"‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {hours_left}—á {minutes_left}–º{reason_text}\n\n"
            f"üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–Ω—è—Ç–∏—è –∫—É–ª–¥–∞—É–Ω–∞.",
            parse_mode="HTML"
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    from app.infra.repo.alias_blocks_repo import AliasBlocksRepo
    from app.utils.message_blocking import check_message_for_blocked_words, get_blocked_message_response, get_blocked_message_keyboard
    
    blocks_repo = AliasBlocksRepo(db)
    blocked_info = await check_message_for_blocked_words(m.text, blocks_repo, active_mailbox_id)
    
    if blocked_info:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await m.answer(
            get_blocked_message_response(blocked_info, m.text, active_mailbox_id),
            parse_mode="HTML",
            reply_markup=get_blocked_message_keyboard()
        )
        
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫
    if not active_mailbox_id:
        await m.answer(
            "‚ùå <b>–Ø—â–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É.\n\n"
            "üí° <b>–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è:</b>\n"
            "1. –ü–æ–ª—É—á–∏—Ç–µ deeplink-—Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —è—â–∏–∫–∞\n"
            "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ deeplink-—Å—Å—ã–ª–∫–µ\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–∏—Å—å–º–∞
    current_state = await state.get_state()
    if current_state == WriteStates.INPUT_TEXT:
        return False  # –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if m.text and (m.text.startswith('/') or m.text in ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å']):
        return False
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–∏—Å—å–º–∞
    logging.info(f"User {m.from_user.id} started direct write with message: {m.text[:50]}...")
    
    await state.clear()
    await state.set_state(WriteStates.INPUT_TEXT)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(text=m.text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TTL –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from app.keyboards.write_flow import ttl_kb
    await m.answer(
        "‚úÖ <b>–ü–∏—Å—å–º–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        "üìù <b>–í–∞—à —Ç–µ–∫—Å—Ç:</b>\n"
        f"<i>{m.text}</i>\n\n"
        "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ—Å—Ç–∞:</b>",
        reply_markup=ttl_kb(),
        parse_mode="HTML"
    )
    
    return True
