import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError
from app.fsm.admin_states import CreateBoxStates
from app.keyboards.write_flow import back_kb
from app.keyboards.settings import confirm_box_kb

async def cb_create_box(m: types.Message, state: FSMContext, db):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"""
    logging.info(f"CREATE BOX: Starting mailbox creation for user {m.from_user.id}")
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ (–∏–∑–±–µ–≥–∞–µ–º –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        from .simple_channel_add import cb_add_channel_simple
        await cb_add_channel_simple(m, state, db)
        
    except Exception as e:
        logging.error(f"Error in cb_create_box: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞: {str(e)}")

async def cb_select_channel(callback: types.CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    logging.info(f"SELECT CHANNEL: User {callback.from_user.id} selected channel")
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ callback_data
        if not callback.data or ":" not in callback.data:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞", show_alert=True)
            return
            
        parts = callback.data.split(":")
        if len(parts) != 2 or not parts[1].lstrip('-').isdigit():
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞", show_alert=True)
            return
            
        channel_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            chat = await callback.bot.get_chat(channel_id)
            channel_name = chat.title or f"–ö–∞–Ω–∞–ª {channel_id}"
        except TelegramAPIError as e:
            await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            name=channel_name,
            channel_id=channel_id
        )
        await state.set_state(CreateBoxStates.CONFIRM)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        summary = (
            "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_name}\n"
            f"–ö–∞–Ω–∞–ª: {channel_id}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ?"
        )
        
        await callback.message.edit_text(summary, reply_markup=confirm_box_kb())
        await callback.answer()
        
    except ValueError as e:
        logging.error(f"Invalid channel ID format: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞", show_alert=True)
    except Exception as e:
        logging.error(f"Error selecting channel: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞: {str(e)}", show_alert=True)

async def cb_refresh_channel_list(callback: types.CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    logging.info(f"REFRESH CHANNEL LIST: User {callback.from_user.id} wants to refresh channel list")
    
    try:
        from app.services.channel_tracker import ChannelTracker
        tracker = ChannelTracker(db)
        available_channels = await tracker.get_user_available_channels(callback.bot, callback.from_user.id)
        
        if not available_channels:
            await callback.message.edit_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫' —Å–Ω–æ–≤–∞."
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        text = "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞</b>\n\n"
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard_buttons = []
        
        for channel in available_channels:
            status_icon = "üì¶" if channel.get("existing") else "üì∫"
            text += f"{status_icon} {channel['title']}\n"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{status_icon} {channel['title']}", 
                    callback_data=f"select_channel:{channel['id']}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                callback_data="refresh_channel_list"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error refreshing channel list: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await callback.answer()



async def cb_cancel_box(callback: types.CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞"""
    logging.info(f"CANCEL BOX: User {callback.from_user.id} cancelled box creation")
    
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
