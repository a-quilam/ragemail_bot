from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError
from app.fsm.admin_states import RemoveAdminStates
from app.infra.repo.users_repo import UsersRepo
from app.keyboards.common import confirmation_kb
from app.utils.admin_logger import log_remove_admin
import logging
# Safe imports with fallback support
try:
    from app.utils.circuit_breaker import get_breaker
except ImportError:
    from app.utils import get_breaker

try:
    from app.utils.rate_limiter import get_admin_limiter, check_rate_limit
except ImportError:
    from app.utils import get_admin_limiter, check_rate_limit

try:
    from app.utils.input_sanitizer import InputSanitizer, sanitize_user_input
except ImportError:
    from app.utils import InputSanitizer, sanitize_user_input

try:
    from app.utils.output_validator import OutputValidator, validate_output
except ImportError:
    from app.utils import OutputValidator, validate_output

try:
    from app.utils.resource_manager import get_resource_manager, managed_resource, MemoryManager
except ImportError:
    from app.utils import get_resource_manager, managed_resource, MemoryManager

try:
    from app.utils.rollback_manager import get_rollback_manager, create_admin_removal_rollback, execute_admin_removal_rollback
except ImportError:
    from app.utils import get_rollback_manager, create_admin_removal_rollback
    # Fallback for execute_admin_removal_rollback
    async def execute_admin_removal_rollback(*args, **kwargs):
        return True

# –ö–æ–¥—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
class ErrorCodes:
    INVALID_MESSAGE_TYPE = "ARA001"
    INVALID_STATE_TYPE = "ARA002"
    INVALID_DB_TYPE = "ARA003"
    INVALID_USER_TYPE = "ARA004"
    INVALID_CALLBACK_TYPE = "ARA005"
    INVALID_USERNAME_FORMAT = "ARA006"
    INVALID_USER_ID = "ARA007"
    USER_NOT_FOUND = "ARA008"
    SELF_REMOVAL_ATTEMPT = "ARA009"
    INSUFFICIENT_PERMISSIONS = "ARA010"
    DB_CONNECTION_ERROR = "ARA011"
    TELEGRAM_API_ERROR = "ARA012"
    TIMEOUT_ERROR = "ARA013"
    NETWORK_ERROR = "ARA014"
    STATE_UPDATE_ERROR = "ARA015"
    USERNAME_UPDATE_ERROR = "ARA016"
    CRITICAL_ERROR = "ARA017"

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
class Metrics:
    @staticmethod
    def track_admin_removal_start(user_id: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logging.info(f"METRIC: admin_removal_start user_id={user_id}")
    
    @staticmethod
    def track_admin_removal_success(user_id: int, target_user_id: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logging.info(f"METRIC: admin_removal_success user_id={user_id} target_user_id={target_user_id}")
    
    @staticmethod
    def track_admin_removal_error(user_id: int, error_code: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logging.info(f"METRIC: admin_removal_error user_id={user_id} error_code={error_code}")
    
    @staticmethod
    def track_admin_removal_cancel(user_id: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logging.info(f"METRIC: admin_removal_cancel user_id={user_id}")
    
    @staticmethod
    def track_db_operation_duration(operation: str, duration_ms: float):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logging.info(f"METRIC: db_operation_duration operation={operation} duration_ms={duration_ms}")
    
    @staticmethod
    def track_telegram_api_call(operation: str, success: bool, duration_ms: float = None):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã Telegram API"""
        status = "success" if success else "error"
        metric_data = f"operation={operation} status={status}"
        if duration_ms is not None:
            metric_data += f" duration_ms={duration_ms}"
        logging.info(f"METRIC: telegram_api_call {metric_data}")
    
    @staticmethod
    def track_retry_attempt(operation: str, attempt: int, max_retries: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        logging.info(f"METRIC: retry_attempt operation={operation} attempt={attempt} max_retries={max_retries}")

async def on_remove_admin_start(m: types.Message, state: FSMContext, db):
    import time
    
    start_time = time.time()
    resource_manager = get_resource_manager()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if m and m.from_user and m.from_user.id:
            admin_limiter = get_admin_limiter()
            is_allowed, reason = await check_rate_limit(admin_limiter, str(m.from_user.id), "remove_admin_start")
            if not is_allowed:
                await m.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. {reason}")
                Metrics.track_admin_removal_error(m.from_user.id, ErrorCodes.INSUFFICIENT_PERMISSIONS)
                return
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if m and m.from_user and m.from_user.id:
            Metrics.track_admin_removal_start(m.from_user.id)
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not isinstance(m, types.Message):
            logging.error(f"[{ErrorCodes.INVALID_MESSAGE_TYPE}] Invalid message type in on_remove_admin_start")
            return
        if not isinstance(state, FSMContext):
            logging.error(f"[{ErrorCodes.INVALID_STATE_TYPE}] Invalid state type in on_remove_admin_start")
            return
        if db is None:
            logging.error(f"[{ErrorCodes.INVALID_DB_TYPE}] Database connection is None in on_remove_admin_start")
            return
    except Exception as e:
        logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Error in on_remove_admin_start validation: {e}")
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
        if m and m.from_user and m.from_user.id:
            Metrics.track_admin_removal_error(m.from_user.id, ErrorCodes.CRITICAL_ERROR)
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logging.critical(f"[{ErrorCodes.CRITICAL_ERROR}] CRITICAL ERROR in on_remove_admin_start: {e}")
        except Exception as alert_error:
            logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Failed to send alert: {alert_error}")
        return
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            duration_ms = (time.time() - start_time) * 1000
            if duration_ms > 1000:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                logging.warning(f"Slow operation: on_remove_admin_start took {duration_ms:.1f}ms")
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            if duration_ms > 5000:  # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
                await MemoryManager.cleanup_memory()
        except Exception as cleanup_error:
            logging.error(f"Error during resource cleanup: {cleanup_error}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —Å graceful degradation –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    users_repo = UsersRepo(db)
    try:
        # –ü–æ–ª—É—á–∞–µ–º circuit breaker –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_breaker = get_breaker(
            "database_operations",
            failure_threshold=5,
            recovery_timeout=60.0,
            expected_exception=Exception
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        db_start_time = time.time()
        admins = await db_breaker.call(users_repo.get_all_admins)
        db_duration = (time.time() - db_start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        Metrics.track_db_operation_duration("get_all_admins", db_duration)
        logging.info(f"Retrieved {len(admins) if admins else 0} admins for user {m.from_user.id}")
    except Exception as e:
        logging.error(f"[{ErrorCodes.DB_CONNECTION_ERROR}] Error retrieving admins for user {m.from_user.id}: {e}")
        Metrics.track_admin_removal_error(m.from_user.id, ErrorCodes.DB_CONNECTION_ERROR)
        # Graceful degradation - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await m.answer(
            "‚ö†Ô∏è <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        return
    
    if not admins:
        logging.info(f"No admins found for user {m.from_user.id}")
        await m.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
    text += "–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n"
    
    for user_id, role in admins:
        try:
            logging.debug(f"Processing admin: user_id={user_id}, role={role}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None
            if user_id is None:
                logging.warning("Skipping admin with None user_id")
                continue
            if role is None:
                role = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            import asyncio
            chat = await asyncio.wait_for(m.bot.get_chat(user_id), timeout=10.0)
            username = chat.username if chat.username else None
            first_name = chat.first_name or ""
            last_name = chat.last_name or ""
            full_name = f"{first_name} {last_name}".strip()
            
            if username:
                display_name = f"<code>@{username}</code>"
            elif full_name:
                display_name = full_name
            else:
                display_name = f"ID {user_id}"
                
            text += f"üë§ {display_name} ‚Äî {role}\n"
            logging.debug(f"Successfully processed admin {user_id}: {display_name}")
        except TelegramAPIError as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
            logging.warning(f"Failed to get chat info for admin {user_id}: {e}")
            safe_role = str(role) if role is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"
            safe_user_id = str(user_id) if user_id is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID"
            text += f"üÜî <code>{safe_user_id}</code> ‚Äî {safe_role}\n"
    
    text += "\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ user_id —Ü–∏—Ñ—Ä–∞–º–∏, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    
    await state.set_state(RemoveAdminStates.ASK_USER)
    await m.answer(text, parse_mode="HTML")

async def on_remove_admin_input(m: types.Message, state: FSMContext, db):
    import time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if m and m.from_user and m.from_user.id:
        admin_limiter = get_admin_limiter()
        is_allowed, reason = await check_rate_limit(admin_limiter, str(m.from_user.id), "remove_admin_input")
        if not is_allowed:
            await m.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. {reason}")
            Metrics.track_admin_removal_error(m.from_user.id, ErrorCodes.INSUFFICIENT_PERMISSIONS)
            return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not isinstance(m, types.Message):
        logging.error(f"[{ErrorCodes.INVALID_MESSAGE_TYPE}] Invalid message type in on_remove_admin_input")
        return
    if not isinstance(state, FSMContext):
        logging.error(f"[{ErrorCodes.INVALID_STATE_TYPE}] Invalid state type in on_remove_admin_input")
        return
    if db is None:
        logging.error(f"[{ErrorCodes.INVALID_DB_TYPE}] Database connection is None in on_remove_admin_input")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not m.from_user or not m.from_user.id:
        logging.error(f"[{ErrorCodes.INVALID_USER_TYPE}] Invalid user in action_remove_admin")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if m.forward_from and m.forward_from.id == m.from_user.id:
        await m.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        await state.clear()
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if not m.text and not m.forward_from:
        await m.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ user_id, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return
    
    logging.info(f"REMOVE ADMIN INPUT: user {m.from_user.id}, text: '{m.text}', state: {await state.get_state()}")
    
    target_user_id = None
    username = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if m.forward_from:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not m.forward_from.id:
            await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            await state.clear()
            return
        
        target_user_id = m.forward_from.id
        logging.info(f"User {m.from_user.id} forwarded message from user {target_user_id}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
    elif m.text and m.text.strip().isdigit():
        raw_user_id = m.text.strip()
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è user ID
        target_user_id = InputSanitizer.sanitize_user_id(raw_user_id)
        if not target_user_id:
            logging.warning(f"[{ErrorCodes.INVALID_USER_ID}] Invalid user ID: {raw_user_id}")
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            await state.clear()
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è Telegram ID
        if target_user_id > 2**63 - 1:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID Telegram
            logging.warning(f"[{ErrorCodes.INVALID_USER_ID}] User ID too large: {target_user_id}")
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
            await state.clear()
            return
        
        logging.info(f"User {m.from_user.id} provided numeric ID: {target_user_id}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º @username
    elif m.text and m.text.strip().startswith('@'):
        raw_username = m.text.strip()
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è username
        username = InputSanitizer.sanitize_username(raw_username)
        if not username:
            logging.warning(f"[{ErrorCodes.INVALID_USERNAME_FORMAT}] Invalid username format: {raw_username}")
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username.")
            await state.clear()
            return
        logging.info(f"User {m.from_user.id} provided username: @{username}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        users_repo = UsersRepo(db)
        max_retries = 3
        target_user_id = None
        
        for attempt in range(max_retries):
            try:
                target_user_id = await users_repo.get_by_username(username)
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if target_user_id is not None and not isinstance(target_user_id, int):
                    logging.error(f"[{ErrorCodes.USER_NOT_FOUND}] Invalid user_id returned by get_by_username: {target_user_id}")
                    target_user_id = None
                break  # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            except Exception as e:
                if attempt < max_retries - 1:
                    logging.warning(f"[{ErrorCodes.DB_CONNECTION_ERROR}] Attempt {attempt + 1} failed for get_by_username {username}: {e}")
                    import asyncio
                    await asyncio.sleep(0.1 * (attempt + 1))
                else:
                    logging.error(f"[{ErrorCodes.DB_CONNECTION_ERROR}] All attempts failed for get_by_username {username}: {e}")
                    target_user_id = None
        
        if not target_user_id:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ get_chat —Å circuit breaker
            try:
                # –ü–æ–ª—É—á–∞–µ–º circuit breaker –¥–ª—è Telegram API
                telegram_breaker = get_breaker(
                    "telegram_api",
                    failure_threshold=3,
                    recovery_timeout=30.0,
                    expected_exception=TelegramAPIError
                )
                
                api_start_time = time.time()
                chat = await telegram_breaker.call(m.bot.get_chat, f"@{username}")
                api_duration = (time.time() - api_start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                Metrics.track_telegram_api_call("get_chat", True, api_duration)
                if chat and hasattr(chat, 'id') and chat.id:
                    target_user_id = chat.id
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –±–∞–∑–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤
                    try:
                        await users_repo.update_username(target_user_id, username)
                        logging.info(f"Updated username for user {target_user_id}: {username}")
                    except Exception as e:
                        logging.error(f"[{ErrorCodes.USERNAME_UPDATE_ERROR}] Failed to update username for user {target_user_id}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                else:
                    await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ @username. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                    await state.clear()
                    return
            except TelegramAPIError as e:
                Metrics.track_telegram_api_call("get_chat", False)
                logging.error(f"[{ErrorCodes.TELEGRAM_API_ERROR}] Telegram API error when getting chat for @{username}: {e}")
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
                if "timeout" in str(e).lower():
                    logging.warning(f"[{ErrorCodes.TIMEOUT_ERROR}] Timeout when getting chat for @{username}")
                    Metrics.track_admin_removal_error(m.from_user.id, ErrorCodes.TIMEOUT_ERROR)
                    await m.answer("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif "network" in str(e).lower() or "connection" in str(e).lower():
                    logging.warning(f"[{ErrorCodes.NETWORK_ERROR}] Network error when getting chat for @{username}")
                    Metrics.track_admin_removal_error(m.from_user.id, ErrorCodes.NETWORK_ERROR)
                    await m.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
                else:
                    await m.answer(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                        f"@username –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                        f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        f"‚Ä¢ –ß–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n"
                        f"‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        f"‚Ä¢ @username (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º)",
                        parse_mode="HTML"
                    )
                await state.clear()
                return

    if not target_user_id:
        await m.answer("–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏—à–ª–∏—Ç–µ user_id —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await state.clear()
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è target_user_id
    if not isinstance(target_user_id, int) or target_user_id <= 0:
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
    try:
        from app.core.config import settings
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not hasattr(settings, 'SUPERADMIN_ID'):
            logging.warning(f"[{ErrorCodes.INSUFFICIENT_PERMISSIONS}] SUPERADMIN_ID not found in settings")
        elif settings.SUPERADMIN_ID and target_user_id == settings.SUPERADMIN_ID:
            logging.warning(f"[{ErrorCodes.INSUFFICIENT_PERMISSIONS}] Attempt to remove superadmin: {target_user_id}")
            await m.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await state.clear()
            return
    except Exception as e:
        logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Error checking superadmin ID: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ username –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if state is None:
        await m.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        return
    
    try:
        await state.update_data(target_user_id=target_user_id, username=username)
    except Exception as e:
        logging.error(f"[{ErrorCodes.STATE_UPDATE_ERROR}] Failed to update state data: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return
    await state.set_state(RemoveAdminStates.CONFIRM)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    safe_username = str(username) if username is not None else None
    safe_target_user_id = str(target_user_id) if target_user_id is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    display_name = f"@{safe_username}" if safe_username else f"<code>{safe_target_user_id}</code>"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    try:
        confirmation_text = (
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name}?\n\n"
            f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
        )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        text_validation = OutputValidator.validate_message_text(confirmation_text)
        if not text_validation.is_valid:
            logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Invalid confirmation text: {text_validation.errors}")
            await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await state.clear()
            return
        
        if text_validation.warnings:
            logging.warning(f"Confirmation text warnings: {text_validation.warnings}")
        
        await m.answer(
            text_validation.sanitized_data,
            parse_mode="HTML",
            reply_markup=confirmation_kb("remove_admin", target_user_id)
        )
    except Exception as e:
        logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Error sending confirmation message: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await state.clear()
        return

async def on_remove_admin_confirm(callback: types.CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    import time
    
    start_time = time.time()
    resource_manager = get_resource_manager()
    rollback_manager = get_rollback_manager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if callback and callback.from_user and callback.from_user.id:
        admin_limiter = get_admin_limiter()
        is_allowed, reason = await check_rate_limit(admin_limiter, str(callback.from_user.id), "remove_admin_confirm")
        if not is_allowed:
            await callback.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. {reason}")
            Metrics.track_admin_removal_error(callback.from_user.id, ErrorCodes.INSUFFICIENT_PERMISSIONS)
            return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not isinstance(callback, types.CallbackQuery):
        logging.error(f"[{ErrorCodes.INVALID_CALLBACK_TYPE}] Invalid callback type in on_remove_admin_confirm")
        return
    if not isinstance(state, FSMContext):
        logging.error(f"[{ErrorCodes.INVALID_STATE_TYPE}] Invalid state type in on_remove_admin_confirm")
        return
    if db is None:
        logging.error(f"[{ErrorCodes.INVALID_DB_TYPE}] Database connection is None in on_remove_admin_confirm")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö
    if not callback.data:
        logging.error("Empty callback data in on_remove_admin_confirm")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback", show_alert=True)
        await state.clear()
        return
    
    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö
    sanitized_callback_data = InputSanitizer.sanitize_callback_data(callback.data)
    if not sanitized_callback_data:
        logging.error(f"Invalid callback data in on_remove_admin_confirm: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback", show_alert=True)
        await state.clear()
        return
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        username = data.get('username')
    except Exception as e:
        logging.error(f"[{ErrorCodes.STATE_UPDATE_ERROR}] Error getting state data: {e}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        await state.clear()
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not target_user_id or not isinstance(target_user_id, int) or target_user_id <= 0:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        await state.clear()
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'id': target_user_id,
        'username': username,
        'role': 'user'  # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤
    }
    user_validation = OutputValidator.validate_user_data(user_data)
    if not user_validation.is_valid:
        logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Invalid user data: {user_validation.errors}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        await state.clear()
        return
    
    # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ user) —Å circuit breaker
    try:
        # –ü–æ–ª—É—á–∞–µ–º circuit breaker –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è
        removal_breaker = get_breaker(
            "admin_removal",
            failure_threshold=3,
            recovery_timeout=30.0,
            expected_exception=Exception
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–∞—Ç–∞
        users_repo = UsersRepo(db)
        current_role = await users_repo.get_role(target_user_id)
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ç–∫–∞—Ç–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        rollback_id = await create_admin_removal_rollback(
            target_user_id, 
            current_role, 
            ttl=3600  # 1 —á–∞—Å –Ω–∞ –æ—Ç–∫–∞—Ç
        )
        
        try:
            await removal_breaker.call(users_repo.upsert, target_user_id, role="user")
            logging.info(f"Successfully removed admin role from user {target_user_id} by admin {callback.from_user.id}")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            Metrics.track_admin_removal_success(callback.from_user.id, target_user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–∞—Ç–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            logging.info(f"Rollback operation created: {rollback_id} for user {target_user_id}")
            
        except Exception as removal_error:
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ç–∫–∞—Ç–∞
            await rollback_manager.delete_rollback_operation(rollback_id)
            raise removal_error
    except Exception as e:
        logging.error(f"[{ErrorCodes.DB_CONNECTION_ERROR}] Failed to remove admin role from user {target_user_id}: {e}")
        Metrics.track_admin_removal_error(callback.from_user.id, ErrorCodes.DB_CONNECTION_ERROR)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_remove_admin(callback.from_user.id, target_user_id, username)
    
    await state.clear()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    display_name = f"@{username}" if username is not None else f"<code>{target_user_id}</code>"
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
        parse_mode="HTML"
    )
    await callback.answer()
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        duration_ms = (time.time() - start_time) * 1000
        if duration_ms > 2000:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            logging.warning(f"Slow operation: on_remove_admin_confirm took {duration_ms:.1f}ms")
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        if duration_ms > 10000:  # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
            await MemoryManager.cleanup_memory()
    except Exception as cleanup_error:
        logging.error(f"Error during resource cleanup: {cleanup_error}")

async def on_remove_admin_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not isinstance(callback, types.CallbackQuery):
        logging.error(f"[{ErrorCodes.INVALID_CALLBACK_TYPE}] Invalid callback type in on_remove_admin_cancel")
        return
    if not isinstance(state, FSMContext):
        logging.error(f"[{ErrorCodes.INVALID_STATE_TYPE}] Invalid state type in on_remove_admin_cancel")
        return
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–º–µ–Ω—É
    if callback and callback.from_user and callback.from_user.id:
        Metrics.track_admin_removal_cancel(callback.from_user.id)
    
    await state.clear()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
