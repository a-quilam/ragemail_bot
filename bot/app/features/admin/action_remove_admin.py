"""
–ü—Ä–æ—Å—Ç–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–∞—Ä—Å–∏–Ω–≥ username
"""
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError
import logging
from app.fsm.admin_states import RemoveAdminStates
from app.infra.repo.users_repo import UsersRepo
from app.keyboards.common import confirmation_kb
from app.utils.admin_logger import log_remove_admin
from app.utils.fsm_utils import safe_clear_state, handle_fsm_error

async def on_remove_admin_start(m: types.Message, state: FSMContext, db):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await safe_clear_state(state, m.from_user.id)
        await state.set_state(RemoveAdminStates.ASK_USER)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        users_repo = UsersRepo(db)
        admins = await users_repo.get_admins()
        
        text = "üë• <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        
        if admins:
            text += "–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n"
            for user_id, role in admins:
                try:
                    chat = await m.bot.get_chat(user_id)
                    username = chat.username if chat.username else None
                    
                    if username:
                        display_name = f"<code>@{username}</code>"
                    else:
                        display_name = f"ID {user_id}"
                        
                    text += f"üë§ {display_name} ‚Äî {role}\n"
                except TelegramAPIError:
                    text += f"üÜî <code>{user_id}</code> ‚Äî {role}\n"
        else:
            text += "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
        
        text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id —Ü–∏—Ñ—Ä–∞–º–∏, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        
    except Exception as e:
        logging.error(f"Error getting admins list: {e}")
        text = "üë• <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id —Ü–∏—Ñ—Ä–∞–º–∏, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    
    await m.answer(text, parse_mode="HTML")

async def on_remove_admin_input(m: types.Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state != RemoveAdminStates.ASK_USER:
            await safe_clear_state(state, m.from_user.id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        if not m.text and not m.forward_from:
            await m.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ user_id —Ü–∏—Ñ—Ä–∞–º–∏, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await safe_clear_state(state, m.from_user.id)
            return

        target_user_id = None
        username = None

        # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if m.forward_from:
            target_user_id = m.forward_from.id
            
        # –ß–∏—Å–ª–æ–≤–æ–π ID
        elif m.text and m.text.strip().isdigit():
            target_user_id = int(m.text.strip())
            
        # @username
        elif m.text and m.text.strip().startswith('@'):
            username = m.text.strip()[1:]  # —É–±–∏—Ä–∞–µ–º @
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            users_repo = UsersRepo(db)
            target_user_id = await users_repo.get_by_username(username)
            
            if not target_user_id:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ get_chat
                try:
                    chat = await m.bot.get_chat(f"@{username}")
                    if chat and hasattr(chat, 'id') and chat.id:
                        target_user_id = chat.id
                    else:
                        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ @username.")
                        await safe_clear_state(state, m.from_user.id)
                        return
                except TelegramAPIError:
                    await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                    await safe_clear_state(state, m.from_user.id)
                    return

        if not target_user_id:
            await m.answer("‚ùå –ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏—à–ª–∏—Ç–µ user_id —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await safe_clear_state(state, m.from_user.id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        users_repo = UsersRepo(db)
        current_role = await users_repo.get_role(target_user_id)
        if current_role not in ("admin", "superadmin"):
            await m.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await safe_clear_state(state, m.from_user.id)
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        display_name = f"@{username}" if username else f"<code>{target_user_id}</code>"
        confirmation_text = (
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name}?\n\n"
            f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
        )
        
        await m.answer(
            confirmation_text,
            parse_mode="HTML",
            reply_markup=confirmation_kb("remove_admin", target_user_id)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(target_user_id=target_user_id, username=username)
        await state.set_state(RemoveAdminStates.CONFIRM)
        
    except Exception as e:
        logging.error(f"REMOVE ADMIN ERROR: {e}")
        await handle_fsm_error(m, state, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def on_remove_admin_confirm(callback: types.CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        username = data.get('username')
        
        if not target_user_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
            await safe_clear_state(state, callback.from_user.id)
            return
        
        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ user)
        users_repo = UsersRepo(db)
        await users_repo.upsert(target_user_id, role="user")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_remove_admin(callback.from_user.id, target_user_id, username)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await safe_clear_state(state, callback.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        display_name = f"@{username}" if username else f"<code>{target_user_id}</code>"
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"REMOVE ADMIN CONFIRM ERROR: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        await safe_clear_state(state, callback.from_user.id)

async def on_remove_admin_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer()
        await safe_clear_state(state, callback.from_user.id)
    except Exception as e:
        logging.error(f"REMOVE ADMIN CANCEL ERROR: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.", show_alert=True)
        await safe_clear_state(state, callback.from_user.id)
