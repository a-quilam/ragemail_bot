from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from app.fsm.admin_states import CreateBoxStates, AddAdminStates, RemoveAdminStates, TransferAdminStates, ButtonConfigStates, AntispamStates
from .menu_open import on_settings_button
from .create_box_step0 import cb_create_box, cb_select_channel, cb_cancel_box, cb_refresh_channel_list
# from .create_box_step1 import on_box_channel  # –£–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è simple_channel_add
from .create_box_confirm import cb_box_confirm, cb_box_back
from .simple_channel_add import cb_add_channel_simple, on_channel_input
from .action_add_admin import on_add_admin_start, on_add_admin_input
from .action_remove_admin import on_remove_admin_start, on_remove_admin_input, on_remove_admin_confirm, on_remove_admin_cancel
from .action_transfer_admin import cb_transfer_admin_start, on_transfer_admin_input
from .back_to_start import on_back_button
from .cmd_statday import cmd_statday
from .cmd_stathour import cmd_stathour
from .cmd_postpin import cmd_postpin, on_postpin_text, _postpin_wait
from .cmd_refresh import cmd_refresh
from .cmd_stats import cmd_stats
from .cmd_backup import cmd_backup, cmd_restore
from .antispam_management import cmd_antispam, cmd_block_word, cmd_unblock_word, cmd_show_blocks, cb_antispam_mailbox_selection, cmd_cooldown_user, cmd_remove_cooldown, cmd_show_cooldowns
from .mailbox_management import (
    on_mailbox_management, cb_set_active_mailbox, cb_delete_mailbox, 
    cb_confirm_delete_mailbox, cb_cancel_delete_mailbox, cb_back_to_settings
)
from .button_config import (
    cb_button_config_start, cb_add_button, on_add_button_text, cb_edit_button, 
    cb_edit_button_item, cb_toggle_button, cb_delete_button, cb_confirm_delete_button,
    cb_reset_buttons, cb_confirm_reset_buttons, on_button_config_text
)
from .cmd_network_status import router as network_status_router, set_network_monitor

router = Router()

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware —É–¥–∞–ª–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ middleware, –∞ –Ω–µ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö —Ä–æ—É—Ç–µ—Ä–∞

# –ö–Ω–æ–ø–∫–∞ "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ" –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ admin_router,
# –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–∞–ª—å—à–µ –≤ write_router —á–µ—Ä–µ–∑ –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ main.py

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ =====
# –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
router.message.register(on_settings_button, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")  # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

# –ö–Ω–æ–ø–∫–∞ "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ" –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ admin_router,
# –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–∞–ª—å—à–µ –≤ write_router —á–µ—Ä–µ–∑ –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ main.py
router.message.register(cb_create_box, F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫")  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è—â–∏–∫–∞
router.message.register(on_mailbox_management, F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏")  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —è—â–∏–∫–∞–º–∏
router.message.register(on_add_admin_start, F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
router.message.register(on_remove_admin_start, F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")  # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
router.message.register(on_back_button, F.text == "üîô –ù–∞–∑–∞–¥")  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
router.message.register(cmd_antispam, F.text == "üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º")  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
router.message.register(cmd_postpin, F.text == "üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç")  # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å deeplink
router.message.register(cmd_refresh, F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
router.message.register(cmd_stats, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –Ø–©–ò–ö–ê =====
# Callback –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
router.callback_query.register(cb_select_channel, F.data.startswith("select_channel:"))  # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
router.callback_query.register(cb_refresh_channel_list, F.data == "refresh_channel_list")  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
router.callback_query.register(cb_cancel_box, F.data == "box:cancel")  # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ (—Å—Å—ã–ª–∫–∞, ID –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
router.message.register(on_channel_input, StateFilter(CreateBoxStates.ADD_CHANNEL))  # –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ


# Add admin states
router.message.register(on_add_admin_input, StateFilter(AddAdminStates.ASK_USER))

# Remove admin states
router.message.register(on_remove_admin_input, StateFilter(RemoveAdminStates.ASK_USER))

# Remove admin confirmations
router.callback_query.register(on_remove_admin_confirm, F.data.startswith("confirm:remove_admin:"))
router.callback_query.register(on_remove_admin_cancel, F.data.startswith("cancel:remove_admin:"))

# Transfer admin states
router.message.register(on_transfer_admin_input, StateFilter(TransferAdminStates.ASK_USER))

# Button config states
router.message.register(on_add_button_text, StateFilter(ButtonConfigStates.ADD_BUTTON))
router.message.register(on_button_config_text, StateFilter(ButtonConfigStates.MAIN))

# Confirm callbacks
router.callback_query.register(cb_box_confirm, F.data == "box:confirm", StateFilter(CreateBoxStates.CONFIRM))
router.callback_query.register(cb_box_back, F.data == "box:back", StateFilter(CreateBoxStates.CONFIRM))

# Commands (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—ã—à–µ)
router.message.register(cmd_statday, Command("statday"))
router.message.register(cmd_stathour, Command("stathour"))
router.message.register(cmd_refresh, Command("refresh"))
router.message.register(cmd_backup, Command("backup"))
router.message.register(cmd_restore, Command("restore"))
router.message.register(cmd_antispam, Command("antispam"))
router.message.register(cmd_block_word, Command("block"), StateFilter(AntispamStates.MAILBOX_SELECTED))
router.message.register(cmd_unblock_word, Command("unblock"), StateFilter(AntispamStates.MAILBOX_SELECTED))
router.message.register(cmd_show_blocks, Command("blocks"))
router.message.register(cmd_cooldown_user, Command("cooldown"))
router.message.register(cmd_remove_cooldown, Command("remove_cooldown"))
router.message.register(cmd_show_cooldowns, Command("cooldowns"))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(Command("clear_state"))
async def cmd_clear_state(m: types.Message, state: FSMContext):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    from app.utils.fsm_utils import safe_clear_state
    from app.utils.fsm_timeout import untrack_fsm_state
    
    current_state = await state.get_state()
    await safe_clear_state(state, m.from_user.id)
    await untrack_fsm_state(m.from_user.id, state)
    
    if current_state:
        await m.answer(f"‚úÖ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ. –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    else:
        await m.answer("‚ÑπÔ∏è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø—É—Å—Ç—ã–º.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("reset_all"))
async def cmd_reset_all(m: types.Message, state: FSMContext):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from app.utils.fsm_utils import safe_clear_state
    from app.utils.fsm_timeout import untrack_fsm_state
    
    current_state = await state.get_state()
    await safe_clear_state(state, m.from_user.id)
    await state.set_data({})
    await untrack_fsm_state(m.from_user.id, state)
    
    if current_state:
        await m.answer(f"‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    else:
        await m.answer("‚ÑπÔ∏è –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(Command("state_info"))
async def cmd_state_info(m: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    from app.utils.fsm_timeout import fsm_timeout_manager
    
    current_state = await state.get_state()
    state_data = await state.get_data()
    tracked_users = fsm_timeout_manager.get_tracked_users_count()
    
    info_text = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏</b>\n\n"
    info_text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {m.from_user.id}\n"
    info_text += f"üîÑ <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {current_state or '–ù–µ—Ç'}\n"
    info_text += f"üì¶ <b>–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b> {len(state_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
    info_text += f"üë• <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {tracked_users}\n"
    
    if state_data:
        info_text += f"\nüìã <b>–î–∞–Ω–Ω—ã–µ:</b>\n"
        for key, value in state_data.items():
            info_text += f"‚Ä¢ {key}: {value}\n"
    
    await m.answer(info_text, parse_mode="HTML")

# Antispam callbacks
router.callback_query.register(cb_antispam_mailbox_selection, F.data.startswith("antispam_mailbox:"))

# Mailbox management callbacks
router.callback_query.register(cb_set_active_mailbox, F.data.startswith("set_active:"))
router.callback_query.register(cb_delete_mailbox, F.data.startswith("delete_mailbox:"))
router.callback_query.register(cb_confirm_delete_mailbox, F.data.startswith("confirm:delete_mailbox:"))
router.callback_query.register(cb_cancel_delete_mailbox, F.data.startswith("cancel:delete_mailbox:"))
router.callback_query.register(cb_transfer_admin_start, F.data.startswith("transfer_admin:"))
router.callback_query.register(cb_back_to_settings, F.data == "back_to_settings")

# Button configuration callbacks
router.callback_query.register(cb_button_config_start, F.data.startswith("button_config:"))
router.callback_query.register(cb_add_button, F.data.startswith("add_button:"))
router.callback_query.register(cb_edit_button, F.data.startswith("edit_button:"))
router.callback_query.register(cb_edit_button_item, F.data.startswith("edit_button_item:"))
router.callback_query.register(cb_toggle_button, F.data.startswith("toggle_button:"))
router.callback_query.register(cb_delete_button, F.data.startswith("delete_button:"))
router.callback_query.register(cb_confirm_delete_button, F.data.startswith("confirm_delete_button:"))
router.callback_query.register(cb_reset_buttons, F.data.startswith("reset_buttons:"))
router.callback_query.register(cb_confirm_reset_buttons, F.data.startswith("confirm_reset_buttons:"))

# Postpin follow-up text (guarded inside handler by internal state)
# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
from .cmd_postpin import _postpin_wait, on_postpin_text

# –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ on_postpin_text
button_texts_to_ignore = [
    "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç", 
    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º", "üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", 
    "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏", "üîô –ù–∞–∑–∞–¥"
]

router.message.register(
    on_postpin_text, 
    lambda m: m.from_user.id in _postpin_wait and m.text not in button_texts_to_ignore
)

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
router.include_router(network_status_router)
