from aiogram import types
from aiogram.fsm.context import FSMContext
from app.infra.db import connect
from app.utils.backup import BackupManager
from app.core.config import settings
import os

async def cmd_backup(m: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
    if not settings.SUPERADMIN_ID or m.from_user.id != settings.SUPERADMIN_ID:
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø—ã.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        db = await connect("queue.db")
        backup_manager = BackupManager(db)
        
        filename = await backup_manager.save_backup()
        
        await m.answer(
            f"‚úÖ <b>–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üìÅ –§–∞–π–ª: <code>{filename}</code>\n"
            f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏\n"
            f"‚Ä¢ üì¶ –ü–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏\n"
            f"‚Ä¢ üè∑Ô∏è –ê–ª–∏–∞—Å—ã\n"
            f"‚Ä¢ üîó –ü—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞.</i>",
            parse_mode="HTML"
        )
        
        await db.close()
        
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")

async def cmd_restore(m: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
    if not settings.SUPERADMIN_ID or m.from_user.id != settings.SUPERADMIN_ID:
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±—ç–∫–∞–ø—ã.")
        return

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
    if not os.path.exists("backups"):
        await m.answer("‚ùå –ü–∞–ø–∫–∞ —Å –±—ç–∫–∞–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    backup_files = [f for f in os.listdir("backups") if f.endswith(".json")]
    if not backup_files:
        await m.answer("‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    backup_files.sort(reverse=True)
    filename = backup_files[0]
    backup_path = f"backups/{filename}"
    
    if not os.path.exists(backup_path):
        await m.answer(f"‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
        return

    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        db = await connect("queue.db")
        backup_manager = BackupManager(db)
        
        success = await backup_manager.load_backup(backup_path)
        
        if success:
            await m.answer(
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìÅ –ò–∑ —Ñ–∞–π–ª–∞: <code>{filename}</code>\n"
                f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
                f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏\n"
                f"‚Ä¢ üì¶ –ü–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏\n"
                f"‚Ä¢ üè∑Ô∏è –ê–ª–∏–∞—Å—ã\n"
                f"‚Ä¢ üîó –ü—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"‚ö†Ô∏è <i>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.</i>",
                parse_mode="HTML"
            )
        else:
            await m.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞.")
        
        await db.close()
        
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
