"""
–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
"""
import logging
import re
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError
from app.fsm.admin_states import CreateBoxStates
from app.infra.tg_api import bot_is_admin, user_can_create_mailbox_in_channel
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.users_repo import UsersRepo
from app.keyboards.settings import confirm_box_kb

async def cb_add_channel_simple(m: types.Message, state: FSMContext, db):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    logging.info(f"ADD CHANNEL SIMPLE: User {m.from_user.id} starting simple channel add")
    
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        text = (
            "üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n\n"
            "üîó <b>–°—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ https://t.me/channel_name)\n"
            "üÜî <b>ID –∫–∞–Ω–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
            "üì§ <b>–ü–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç</b> –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.set_state(CreateBoxStates.ADD_CHANNEL)
        logging.info(f"State set to: {CreateBoxStates.ADD_CHANNEL}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        check_state = await state.get_state()
        logging.info(f"State verification: {check_state}")
        
        await m.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Error in cb_add_channel_simple: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")

async def on_channel_input(m: types.Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ (—Å—Å—ã–ª–∫–∞, ID –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞)"""
    logging.info(f"CHANNEL INPUT: User {m.from_user.id} sent channel info: {m.text}")
    logging.info(f"CHANNEL INPUT: Message type: {type(m.text)}")
    logging.info(f"CHANNEL INPUT: Message content: '{m.text}'")
    current_state = await state.get_state()
    logging.info(f"Current state: {current_state}")
    logging.info(f"Expected state: {CreateBoxStates.ADD_CHANNEL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if current_state != CreateBoxStates.ADD_CHANNEL:
        logging.warning(f"Wrong state! Expected {CreateBoxStates.ADD_CHANNEL}, got {current_state}")
        return
    
    # –ò–°–ö–õ–Æ–ß–ê–ï–ú –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if m.text in ["‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏", "üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "üîô –ù–∞–∑–∞–¥", "üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º"]:
        logging.info(f"CHANNEL INPUT: Ignoring main menu button: {m.text}")
        return
    
    channel_id = None
    channel_name = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞?
        if m.forward_from_chat:
            if m.forward_from_chat.type in ['channel', 'supergroup']:
                channel_id = m.forward_from_chat.id
                channel_name = m.forward_from_chat.title or f"–ö–∞–Ω–∞–ª {channel_id}"
            else:
                await m.answer("‚ùå –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID?
        elif m.text:
            text = m.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
            if (text.startswith('-100') and text[4:].isdigit()) or (text.startswith('-') and text[1:].isdigit()):
                channel_id = int(text)
                try:
                    chat = await m.bot.get_chat(channel_id)
                    channel_name = chat.title or f"–ö–∞–Ω–∞–ª {channel_id}"
                except TelegramAPIError as e:
                    await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞)
            elif text.isdigit():
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É ID
                try:
                    channel_id = int(text)
                    chat = await m.bot.get_chat(channel_id)
                    if chat.type in ['channel', 'supergroup']:
                        channel_name = chat.title or f"–ö–∞–Ω–∞–ª {channel_id}"
                    else:
                        await m.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º")
                        return
                except TelegramAPIError as e:
                    await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            elif '@' in text or 't.me/' in text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
                username = None
                if '@' in text:
                    parts = text.split('@')[-1].split()
                    username = parts[0] if parts else None
                elif 't.me/' in text:
                    parts = text.split('t.me/')[-1].split('?')[0].split()
                    username = parts[0] if parts else None
                
                if username:
                    try:
                        chat = await m.bot.get_chat(f"@{username}")
                        if chat.type in ['channel', 'supergroup']:
                            channel_id = chat.id
                            channel_name = chat.title or f"–ö–∞–Ω–∞–ª {channel_id}"
                        else:
                            await m.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º")
                            return
                    except TelegramAPIError as e:
                        await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª: {e}")
                        return
                else:
                    await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª")
                    return
            else:
                await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return
        
        else:
            await m.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞")
            return
        
        if not channel_id:
            await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        if not await bot_is_admin(m.bot, channel_id):
            await m.answer(
                "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —è—â–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ
        if not await user_can_create_mailbox_in_channel(m.bot, channel_id, m.from_user.id):
            await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —è—â–∏–∫–µ
        mailboxes_repo = MailboxesRepo(db)
        existing_mailbox = await mailboxes_repo.get_by_channel_id(channel_id)
        if existing_mailbox is not None:
            await m.answer("‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —è—â–∏–∫–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.update_data(
            name=channel_name,
            channel_id=channel_id
        )
        await state.set_state(CreateBoxStates.CONFIRM)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        summary = (
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞</b>\n\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_name}\n"
            f"üÜî <b>ID:</b> {channel_id}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ?"
        )
        
        await m.answer(summary, reply_markup=confirm_box_kb(), parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Error processing channel input: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: {str(e)}")
