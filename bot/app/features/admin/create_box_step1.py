from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError
from app.fsm.admin_states import CreateBoxStates
from app.keyboards.settings import confirm_box_kb

async def on_box_channel(m: types.Message, state: FSMContext, db):
    channel_input = (m.text or "").strip()
    channel_id = None

    # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if m.forward_from_chat and m.forward_from_chat.type in ("channel", "supergroup"):
        channel_id = m.forward_from_chat.id
    # @username –∫–∞–Ω–∞–ª–∞ ‚Üí –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ get_chat
    elif channel_input.startswith('@'):
        try:
            chat = await m.bot.get_chat(channel_input)
            if chat and chat.type == 'channel':
                channel_id = chat.id
            else:
                await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ @username. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                return
        except TelegramAPIError:
            await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ @username. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            return
    # –ü–æ–ª–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
    elif channel_input.startswith('-') and channel_input[1:].isdigit():
        channel_id = int(channel_input)
    # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
    elif channel_input.isdigit():
        channel_id = int(channel_input)
    else:
        await m.answer("–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü—Ä–∏—à–ª–∏—Ç–µ @username, —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ
    try:
        chat_member = await m.bot.get_chat_member(channel_id, m.bot.id)
        if getattr(chat_member, 'status', None) not in ['administrator', 'creator']:
            await m.answer("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except TelegramAPIError as e:
        await m.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    data = await state.get_data()
    data['channel_id'] = channel_id
    await state.update_data(data)
    await state.set_state(CreateBoxStates.CONFIRM)

    summary = (
        "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ö–∞–Ω–∞–ª: {channel_id}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ?"
    )
    await m.answer(summary, reply_markup=confirm_box_kb())
