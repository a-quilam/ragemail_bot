import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.users_repo import UsersRepo
from app.fsm.admin_states import CreateBoxStates

async def cb_box_confirm(cb: types.CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"""
    logging.info(f"BOX CONFIRM: User {cb.from_user.id} confirming mailbox creation")
    
    data = await state.get_data()
    name = data.get("name")
    channel_id = data.get("channel_id")
    if not name or not channel_id:
        await cb.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —è—â–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ
        from app.infra.tg_api import user_can_create_mailbox_in_channel
        if not await user_can_create_mailbox_in_channel(cb.bot, channel_id, cb.from_user.id):
            await cb.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —è—â–∏–∫–µ
        mailboxes_repo = MailboxesRepo(db)
        existing_mailbox = await mailboxes_repo.get_by_channel_id(channel_id)
        if existing_mailbox is not None:
            await cb.answer("‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —è—â–∏–∫–µ", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —è—â–∏–∫
        mailbox_id = await mailboxes_repo.create(name, channel_id, cb.from_user.id)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —è—â–∏–∫ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_repo = UsersRepo(db)
        await users_repo.set_active_mailbox(cb.from_user.id, mailbox_id)
        
        await state.clear()
        await cb.message.edit_text(f"‚úÖ –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ —Å–æ–∑–¥–∞–Ω (id={mailbox_id}) –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π.")
        await cb.answer()
        
    except Exception as e:
        logging.error(f"Error creating mailbox: {e}")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Å—Ç—Ä—è–ª –≤ CONFIRM
        await state.clear()
        await cb.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—â–∏–∫–∞: {str(e)}", show_alert=True)

async def cb_box_back(cb: types.CallbackQuery, state: FSMContext, db):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞"""
    logging.info(f"BOX BACK: User {cb.from_user.id} going back to channel input")
    
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        await state.set_state(CreateBoxStates.ADD_CHANNEL)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        text = (
            "üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n\n"
            "üîó <b>–°—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ https://t.me/channel_name)\n"
            "üÜî <b>ID –∫–∞–Ω–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
            "üì§ <b>–ü–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç</b> –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
        )
        
        await cb.message.edit_text(text, parse_mode="HTML")
        await cb.answer()
        
    except Exception as e:
        logging.error(f"Error in cb_box_back: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞", show_alert=True)
