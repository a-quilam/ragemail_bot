from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError
import logging
from app.fsm.admin_states import AddAdminStates
from app.infra.repo.users_repo import UsersRepo
from app.utils.admin_logger import log_add_admin
from app.utils.fsm_utils import safe_clear_state, handle_fsm_error, ensure_state_cleared_on_exit

async def on_add_admin_start(m: types.Message, state: FSMContext):
    await state.set_state(AddAdminStates.ASK_USER)
    await m.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–∏—Ñ—Ä–∞–º–∏, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞.")

async def on_add_admin_input(m: types.Message, state: FSMContext, db):
    import logging
    logging.info(f"ADD ADMIN INPUT: user {m.from_user.id}, text: '{m.text}', state: {await state.get_state()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state != AddAdminStates.ASK_USER:
        logging.warning(f"ADD ADMIN INPUT: Wrong state {current_state}, expected {AddAdminStates.ASK_USER}")
        await safe_clear_state(state, m.from_user.id)
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
    if not m.text and not m.forward_from:
        logging.warning(f"ADD ADMIN INPUT: No text or forward message from user {m.from_user.id}")
        await m.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ user_id —Ü–∏—Ñ—Ä–∞–º–∏, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await safe_clear_state(state, m.from_user.id)
        return

    try:
        target_user_id = None
        username = None

        # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if m.forward_from:
            target_user_id = m.forward_from.id
        # –ß–∏—Å–ª–æ–≤–æ–π ID
        elif m.text and m.text.strip().isdigit():
            target_user_id = int(m.text.strip())
        # @username ‚Üí —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ get_chat, –ø–æ—Ç–æ–º –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        elif m.text and m.text.strip().startswith('@'):
            username = m.text.strip()[1:]  # —É–±–∏—Ä–∞–µ–º @
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            users_repo = UsersRepo(db)
            target_user_id = await users_repo.get_by_username(username)
            
            if not target_user_id:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ get_chat
                try:
                    chat = await m.bot.get_chat(f"@{username}")
                    if chat and hasattr(chat, 'id') and chat.id:
                        target_user_id = chat.id
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –±–∞–∑–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤
                        await users_repo.update_username(target_user_id, username)
                    else:
                        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ @username. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                        await safe_clear_state(state, m.from_user.id)
                        return
                except TelegramAPIError:
                    await m.answer(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                        f"@username –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                        f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        f"‚Ä¢ –ß–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n"
                        f"‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        f"‚Ä¢ @username (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º)",
                        parse_mode="HTML"
                    )
                    await safe_clear_state(state, m.from_user.id)
                    return

        if not target_user_id:
            logging.warning(f"ADD ADMIN INPUT: Could not determine user_id from input: text='{m.text}', forward_from={m.forward_from}")
            await m.answer("‚ùå –ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏—à–ª–∏—Ç–µ user_id —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await safe_clear_state(state, m.from_user.id)
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
        try:
            await UsersRepo(db).upsert(target_user_id, role="admin", username=username)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π
            try:
                from app.utils.role_change_tracker import get_role_change_tracker
                tracker = get_role_change_tracker()
                await tracker.on_admin_added(target_user_id, username)
            except Exception as e:
                logging.warning(f"Failed to notify role tracker: {e}")
            logging.info(f"ADD ADMIN SUCCESS: User {target_user_id} added as admin by {m.from_user.id}")
        except Exception as e:
            logging.error(f"ADD ADMIN ERROR: Failed to add user {target_user_id} as admin: {e}")
            await m.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await safe_clear_state(state, m.from_user.id)
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_add_admin(m.from_user.id, target_user_id, username)
        
        await ensure_state_cleared_on_exit(
            state, 
            m.from_user.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            m
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        try:
            from app.keyboards.write_flow import start_kb_admin
            await m.bot.send_message(
                target_user_id,
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ ¬´–ó–ª–æ–µ –ø–∏—Å—å–º–æ¬ª.\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
                "‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                "üìå <b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å deeplink-–ø–æ—Å—Ç\n"
                "üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å</b> ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–Ω–∞–ª–æ–º",
                reply_markup=start_kb_admin()
            )
        except TelegramAPIError:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            
    except Exception as e:
        logging.error(f"ADD ADMIN ERROR: Unexpected error for user {m.from_user.id}: {e}")
        await handle_fsm_error(m, state, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")