from aiogram import types
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.stats_repo import StatsRepo
from app.utils.mailbox_permissions import can_manage_mailbox
import logging
# Safe imports with fallback support
try:
    from app.utils.rate_limiter import get_stats_limiter, check_rate_limit
except ImportError:
    from app.utils import get_stats_limiter, check_rate_limit

try:
    from app.utils.input_sanitizer import InputSanitizer, sanitize_user_input
except ImportError:
    from app.utils import InputSanitizer, sanitize_user_input

try:
    from app.utils.output_validator import OutputValidator, validate_output
except ImportError:
    from app.utils import OutputValidator, validate_output

try:
    from app.utils.resource_manager import get_resource_manager, managed_resource, MemoryManager
except ImportError:
    from app.utils import get_resource_manager, managed_resource, MemoryManager

# –ö–æ–¥—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
class ErrorCodes:
    INVALID_MESSAGE_TYPE = "CS001"
    INVALID_STATE_TYPE = "CS002"
    INVALID_DB_TYPE = "CS003"
    INVALID_USER_TYPE = "CS004"
    INVALID_USER_ID = "CS005"
    INVALID_MAILBOX_ID = "CS006"
    MAILBOX_NOT_FOUND = "CS007"
    INVALID_MAILBOX_DATA = "CS008"
    INSUFFICIENT_PERMISSIONS = "CS009"
    DB_CONNECTION_ERROR = "CS010"
    STATS_RETRIEVAL_ERROR = "CS011"
    CRITICAL_ERROR = "CS012"

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
class Metrics:
    @staticmethod
    def track_stats_request_start(user_id: int, mailbox_id: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logging.info(f"METRIC: stats_request_start user_id={user_id} mailbox_id={mailbox_id}")
    
    @staticmethod
    def track_stats_request_success(user_id: int, mailbox_id: int, stats_count: int):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logging.info(f"METRIC: stats_request_success user_id={user_id} mailbox_id={mailbox_id} stats_count={stats_count}")
    
    @staticmethod
    def track_stats_request_error(user_id: int, mailbox_id: int, error_code: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logging.info(f"METRIC: stats_request_error user_id={user_id} mailbox_id={mailbox_id} error_code={error_code}")
    
    @staticmethod
    def track_db_operation_duration(operation: str, duration_ms: float):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logging.info(f"METRIC: db_operation_duration operation={operation} duration_ms={duration_ms}")
    
    @staticmethod
    def track_permission_check(user_id: int, mailbox_id: int, granted: bool):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        status = "granted" if granted else "denied"
        logging.info(f"METRIC: permission_check user_id={user_id} mailbox_id={mailbox_id} status={status}")
    
    @staticmethod
    def track_mailbox_access(user_id: int, mailbox_id: int, access_type: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–æ–≤—ã–º —è—â–∏–∫–∞–º"""
        logging.info(f"METRIC: mailbox_access user_id={user_id} mailbox_id={mailbox_id} access_type={access_type}")
try:
    from app.core.constants import DAYS_OF_WEEK, STAT_TYPE_LABELS
except ImportError:
    # Fallback –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    DAYS_OF_WEEK = ["", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    STAT_TYPE_LABELS = {
        "relay_msg": "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–ª–µ:</b>",
        "posts": "üìù <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:</b>",
        "users": "üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>",
        "extend_1h": "‚è∞ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–π +1—á:</b>",
        "extend_12h": "‚è∞ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–π +12—á:</b>"
    }

async def cmd_stats(m: types.Message, db, active_mailbox_id: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"""
    import time
    
    start_time = time.time()
    resource_manager = get_resource_manager()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if m and m.from_user and m.from_user.id:
            stats_limiter = get_stats_limiter()
            is_allowed, reason = await check_rate_limit(stats_limiter, str(m.from_user.id), "cmd_stats")
            if not is_allowed:
                await m.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. {reason}")
                Metrics.track_stats_request_error(m.from_user.id, ErrorCodes.INSUFFICIENT_PERMISSIONS)
                return
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if m and m.from_user and m.from_user.id:
            Metrics.track_stats_request_start(m.from_user.id, active_mailbox_id)
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not isinstance(m, types.Message):
            logging.error(f"[{ErrorCodes.INVALID_MESSAGE_TYPE}] Invalid message type in cmd_stats")
            return
        if db is None:
            logging.error(f"[{ErrorCodes.INVALID_DB_TYPE}] Database connection is None in cmd_stats")
            return
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è mailbox_id
        sanitized_mailbox_id = InputSanitizer.sanitize_mailbox_id(active_mailbox_id)
        if not sanitized_mailbox_id:
            logging.error(f"[{ErrorCodes.INVALID_MAILBOX_ID}] Invalid active_mailbox_id in cmd_stats: {active_mailbox_id}")
            return
        active_mailbox_id = sanitized_mailbox_id
    except Exception as e:
        logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Error in cmd_stats validation: {e}")
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
        if m and m.from_user and m.from_user.id:
            Metrics.track_stats_request_error(m.from_user.id, active_mailbox_id, ErrorCodes.CRITICAL_ERROR)
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logging.critical(f"[{ErrorCodes.CRITICAL_ERROR}] CRITICAL ERROR in cmd_stats: {e}")
        except Exception as alert_error:
            logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Failed to send alert: {alert_error}")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if not m.text:
        logging.error("Empty message text in cmd_stats")
        return
    
    if m.text != "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    if not m.from_user or not m.from_user.id:
        logging.error(f"[{ErrorCodes.INVALID_USER_TYPE}] Invalid user in cmd_stats")
        return
    
    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è user ID
    sanitized_user_id = InputSanitizer.sanitize_user_id(m.from_user.id)
    if not sanitized_user_id:
        logging.error(f"[{ErrorCodes.INVALID_USER_ID}] Invalid user ID in cmd_stats: {m.from_user.id}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º —è—â–∏–∫–∞–º
    if active_mailbox_id and active_mailbox_id != m.from_user.id:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        pass
    
    if not active_mailbox_id:
        await m.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
    if active_mailbox_id <= 0:
        logging.warning(f"[{ErrorCodes.INVALID_MAILBOX_ID}] Invalid mailbox ID: {active_mailbox_id}")
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    try:
        permission_granted = await can_manage_mailbox(db, m.from_user.id, active_mailbox_id)
        Metrics.track_permission_check(m.from_user.id, active_mailbox_id, permission_granted)
        
        if not permission_granted:
            Metrics.track_mailbox_access(m.from_user.id, active_mailbox_id, "denied")
            await m.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç—Ç–æ–≥–æ —è—â–∏–∫–∞.\n"
                "–ü—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —è—â–∏–∫–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω.",
                parse_mode="HTML"
            )
            return
        else:
            Metrics.track_mailbox_access(m.from_user.id, active_mailbox_id, "granted")
    except Exception as e:
        logging.error(f"[{ErrorCodes.INSUFFICIENT_PERMISSIONS}] Error checking mailbox permissions: {e}")
        Metrics.track_stats_request_error(m.from_user.id, active_mailbox_id, ErrorCodes.INSUFFICIENT_PERMISSIONS)
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—â–∏–∫–µ
    try:
        db_start_time = time.time()
        box = await MailboxesRepo(db).get(active_mailbox_id)
        db_duration = (time.time() - db_start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        Metrics.track_db_operation_duration("get_mailbox", db_duration)
        logging.info(f"Retrieved mailbox info for user {m.from_user.id}, mailbox_id: {active_mailbox_id}")
    except Exception as e:
        logging.error(f"[{ErrorCodes.DB_CONNECTION_ERROR}] Error retrieving mailbox {active_mailbox_id} for user {m.from_user.id}: {e}")
        Metrics.track_stats_request_error(m.from_user.id, active_mailbox_id, ErrorCodes.DB_CONNECTION_ERROR)
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è—â–∏–∫–µ")
        return
    
    if not box:
        logging.warning(f"[{ErrorCodes.MAILBOX_NOT_FOUND}] Mailbox {active_mailbox_id} not found for user {m.from_user.id}")
        await m.answer("‚ùå –Ø—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞
    if not box or len(box) < 6:
        logging.error(f"[{ErrorCodes.INVALID_MAILBOX_DATA}] Invalid mailbox data: {box}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞")
        return
    
    try:
        mailbox_id, title, channel_id, stat_day, stat_time, creator_id = box
    except (ValueError, TypeError) as e:
        logging.error(f"[{ErrorCodes.INVALID_MAILBOX_DATA}] Failed to unpack mailbox data: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å graceful degradation –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    try:
        stats_repo = StatsRepo(db)
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        stats_start_time = time.time()
        stats = await stats_repo.get_stats_for_mailbox(mailbox_id)
        stats_duration = (time.time() - stats_start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        Metrics.track_db_operation_duration("get_stats_for_mailbox", stats_duration)
        logging.info(f"Retrieved stats for mailbox {mailbox_id}: {len(stats) if stats else 0} entries")
    except Exception as e:
        logging.error(f"[{ErrorCodes.STATS_RETRIEVAL_ERROR}] Error retrieving stats for mailbox {mailbox_id}: {e}")
        Metrics.track_stats_request_error(m.from_user.id, mailbox_id, ErrorCodes.STATS_RETRIEVAL_ERROR)
        # Graceful degradation - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await m.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—â–∏–∫–∞ ¬´{safe_title}¬ª</b>\n\n"
            f"üÜî <b>ID:</b> {mailbox_id}\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {safe_channel_id}\n\n"
            f"‚ö†Ô∏è <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</i>",
            parse_mode="HTML"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    safe_title = str(title) if title is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    safe_channel_id = str(channel_id) if channel_id is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if mailbox_id is None:
        logging.error("mailbox_id is None in cmd_stats")
        await m.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞")
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
    try:
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—â–∏–∫–∞ ¬´{safe_title}¬ª</b>\n\n"
        text += f"üÜî <b>ID:</b> {mailbox_id}\n"
        text += f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {safe_channel_id}\n"
    except Exception as e:
        logging.error(f"Error formatting stats text: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if stat_day is not None and stat_time is not None:
        day_name = DAYS_OF_WEEK[stat_day] if isinstance(stat_day, int) and 1 <= stat_day <= 7 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å"
        text += f"üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –ø–æ {day_name} –≤ {stat_time}\n\n"
    else:
        text += f"üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> <i>–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</i>\n"
        text += f"üí° <i>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n"
        text += f"<code>/statday 1-7</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
        text += f"<code>/stathour HH:MM</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n\n"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    if not stats or not isinstance(stats, dict):
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞</b>\n\n"
        text += "üí° <i>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø–æ—Å—Ç–æ–≤</i>"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        text_validation = OutputValidator.validate_message_text(text)
        if not text_validation.is_valid:
            logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Invalid stats text: {text_validation.errors}")
            await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        if text_validation.warnings:
            logging.warning(f"Stats text warnings: {text_validation.warnings}")
        
        await m.answer(text_validation.sanitized_data, parse_mode="HTML")
        return
    
    text += f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
    for stat_type, count in stats.items():
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
        if not isinstance(stat_type, str) or count is None or not isinstance(count, (int, float)):
            continue
            
        safe_count = int(count)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –º–µ—Ç–æ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if hasattr(STAT_TYPE_LABELS, '__getitem__') and stat_type in STAT_TYPE_LABELS:
            text += f"{STAT_TYPE_LABELS[stat_type]} {safe_count}\n"
    
    text += f"\nüí° <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    stats_count = len(stats) if stats else 0
    Metrics.track_stats_request_success(m.from_user.id, mailbox_id, stats_count)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    final_text_validation = OutputValidator.validate_message_text(text)
    if not final_text_validation.is_valid:
        logging.error(f"[{ErrorCodes.CRITICAL_ERROR}] Invalid final stats text: {final_text_validation.errors}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    if final_text_validation.warnings:
        logging.warning(f"Final stats text warnings: {final_text_validation.warnings}")
    
    await m.answer(final_text_validation.sanitized_data, parse_mode="HTML")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    try:
        duration_ms = (time.time() - start_time) * 1000
        if duration_ms > 3000:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            logging.warning(f"Slow operation: cmd_stats took {duration_ms:.1f}ms")
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if duration_ms > 15000:  # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 15 —Å–µ–∫—É–Ω–¥
            await MemoryManager.cleanup_memory()
    except Exception as cleanup_error:
        logging.error(f"Error during resource cleanup: {cleanup_error}")
