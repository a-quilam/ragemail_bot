from aiogram import types
from aiogram.fsm.context import FSMContext
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.users_repo import UsersRepo
from app.keyboards.settings import mailbox_management_kb
from app.keyboards.common import confirmation_kb
from app.utils.mailbox_permissions import can_manage_mailbox
from app.utils.admin_logger import log_delete_mailbox
from app.core.config import settings

async def on_mailbox_management(m: types.Message, db, active_mailbox_id: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç–æ–≤—ã–º–∏ —è—â–∏–∫–∞–º–∏"""
    mailboxes_repo = MailboxesRepo(db)
    users_repo = UsersRepo(db)
    
    # –ü–æ–ª—É—á–∞–µ–º —è—â–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = await users_repo.get_role(m.from_user.id)
    is_superadmin = bool(settings.SUPERADMIN_ID and m.from_user.id == settings.SUPERADMIN_ID)
    
    if is_superadmin:
        # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ —è—â–∏–∫–∏
        mailboxes = await mailboxes_repo.list_all()
    else:
        # –û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —è—â–∏–∫–∏
        mailboxes = await mailboxes_repo.get_by_creator(m.from_user.id)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —è—â–∏–∫–æ–≤, –Ω–æ –æ–Ω –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not mailboxes and role not in ("admin", "superadmin"):
            await m.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—â–∏–∫–∞–º–∏.")
            return
    
    if not mailboxes:
        await m.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —è—â–∏–∫–æ–≤
    text = "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç–æ–≤—ã–º–∏ —è—â–∏–∫–∞–º–∏</b>\n\n"
    for mailbox_id, title, channel_id, stat_day, stat_time, creator_id in mailboxes:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if mailbox_id == active_mailbox_id else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        text += f"<b>{title}</b> (ID: {mailbox_id})\n"
        text += f"–ö–∞–Ω–∞–ª: {channel_id}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        if stat_day is not None and stat_time is not None:
            text += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–µ–Ω—å {stat_day}, –≤—Ä–µ–º—è {stat_time}\n\n"
        else:
            text += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: <i>–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</i>\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await m.answer(text, reply_markup=mailbox_management_kb(mailboxes, active_mailbox_id, m.from_user.id, is_superadmin))

async def update_mailbox_management_interface(c: types.CallbackQuery, db, user_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—â–∏–∫–∞–º–∏"""
    from app.infra.repo.users_repo import UsersRepo
    from app.infra.repo.mailboxes_repo import MailboxesRepo
    from app.core.config import settings
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_repo = UsersRepo(db)
    active_mailbox_id = await users_repo.get_active_mailbox(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—â–∏–∫–∏
    mailboxes_repo = MailboxesRepo(db)
    mailboxes = await mailboxes_repo.list_all()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
    is_superadmin = (settings.SUPERADMIN_ID and user_id == settings.SUPERADMIN_ID)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç–æ–≤—ã–º–∏ —è—â–∏–∫–∞–º–∏</b>\n\n"
    
    for mailbox_id, title, channel_id, stat_day, stat_time, _ in mailboxes:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if mailbox_id == active_mailbox_id else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        text += f"<b>{title}</b> (ID: {mailbox_id})\n"
        text += f"–ö–∞–Ω–∞–ª: {channel_id}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        if stat_day is not None and stat_time is not None:
            text += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–µ–Ω—å {stat_day}, –≤—Ä–µ–º—è {stat_time}\n\n"
        else:
            text += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: <i>–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</i>\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await c.message.edit_text(text, reply_markup=mailbox_management_kb(mailboxes, active_mailbox_id, user_id, is_superadmin), parse_mode="HTML")

async def cb_set_active_mailbox(c: types.CallbackQuery, db):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫"""
    if not c.data.startswith("set_active:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, c.from_user.id, mailbox_id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º —è—â–∏–∫–æ–º.", show_alert=True)
        return
    
    users_repo = UsersRepo(db)
    await users_repo.set_active_mailbox(c.from_user.id, mailbox_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è—â–∏–∫–∞
    mailboxes_repo = MailboxesRepo(db)
    mailbox = await mailboxes_repo.get(mailbox_id)
    mailbox_name = mailbox[1] if mailbox and len(mailbox) > 1 else f"–Ø—â–∏–∫ {mailbox_id}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è—â–∏–∫–∞–º–∏
    await update_mailbox_management_interface(c, db, c.from_user.id)
    await c.answer(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mailbox_name}")

async def cb_delete_mailbox(c: types.CallbackQuery, db):
    """–£–¥–∞–ª–∏—Ç—å —è—â–∏–∫"""
    if not c.data.startswith("delete_mailbox:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, c.from_user.id, mailbox_id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —è—â–∏–∫–∞.", show_alert=True)
        return
    
    mailboxes_repo = MailboxesRepo(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è—â–∏–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    mailbox = await mailboxes_repo.get(mailbox_id)
    mailbox_name = mailbox[1] if mailbox and len(mailbox) > 1 else f"–Ø—â–∏–∫ {mailbox_id}"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await c.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —è—â–∏–∫–∞</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —è—â–∏–∫ <b>¬´{mailbox_name}¬ª</b>?\n\n"
        f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!</i>",
        parse_mode="HTML",
        reply_markup=confirmation_kb("delete_mailbox", mailbox_id)
    )
    await c.answer()

async def cb_confirm_delete_mailbox(c: types.CallbackQuery, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —è—â–∏–∫–∞"""
    if not c.data.startswith("confirm:delete_mailbox:"):
        return
    
    mailbox_id = int(c.data.split(":")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, c.from_user.id, mailbox_id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —è—â–∏–∫–∞.", show_alert=True)
        return
    
    mailboxes_repo = MailboxesRepo(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è—â–∏–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    mailbox = await mailboxes_repo.get(mailbox_id)
    mailbox_name = mailbox[1] if mailbox and len(mailbox) > 1 else f"–Ø—â–∏–∫ {mailbox_id}"
    
    # –£–¥–∞–ª—è–µ–º —è—â–∏–∫
    await db.execute("DELETE FROM mailboxes WHERE id = ?", (mailbox_id,))
    await db.commit()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_delete_mailbox(c.from_user.id, mailbox_id, mailbox_name)
    
    await c.message.edit_text(f"üóëÔ∏è <b>–Ø—â–∏–∫ —É–¥–∞–ª–µ–Ω</b>\n\n–Ø—â–∏–∫ <b>¬´{mailbox_name}¬ª</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="HTML")
    await c.answer()

async def cb_cancel_delete_mailbox(c: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —è—â–∏–∫–∞"""
    if not c.data.startswith("cancel:delete_mailbox:"):
        return
    
    await c.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —è—â–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await c.answer()

async def cb_back_to_settings(c: types.CallbackQuery, db):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    if c.data != "back_to_settings":
        return
    
    from app.core.config import settings
    from app.infra.repo.users_repo import UsersRepo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –≤ –ë–î
    role = await UsersRepo(db).get_role(c.from_user.id)
    is_superadmin = bool(settings.SUPERADMIN_ID and c.from_user.id == settings.SUPERADMIN_ID)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from app.keyboards.settings import settings_kb
    await c.message.edit_text("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?")
    await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=settings_kb(is_superadmin))
    await c.answer()
