"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
"""
import logging
import time
from aiogram import types, Router
from aiogram.filters import Command
from app.core.permissions import require_admin
from app.utils.error_handler import handle_error

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–µ—Ç–∏
network_monitor = None

def set_network_monitor(monitor):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä —Å–µ—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"""
    global network_monitor
    network_monitor = monitor

@router.message(Command("network_status"))
@require_admin
async def cmd_network_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    try:
        if not network_monitor:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ú–æ–Ω–∏—Ç–æ—Ä —Å–µ—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML"
            )
            return
        
        stats = network_monitor.get_stats()
        health_status = network_monitor.get_health_status()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        def format_time(timestamp):
            if timestamp is None:
                return "–ù–∏–∫–æ–≥–¥–∞"
            import time
            from datetime import datetime
            return datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        def format_duration(seconds):
            if seconds < 60:
                return f"{seconds:.0f}—Å"
            elif seconds < 3600:
                return f"{seconds/60:.0f}–º {seconds%60:.0f}—Å"
            else:
                hours = int(seconds // 3600)
                minutes = int((seconds % 3600) // 60)
                return f"{hours}—á {minutes}–º"
        
        response = (
            f"üåê <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>\n\n"
            f"{health_status}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_requests']}\n"
            f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_requests']}\n"
            f"‚Ä¢ –°–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫: {stats['network_errors']}\n"
            f"‚Ä¢ API –æ—à–∏–±–æ–∫: {stats['api_errors']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: {stats['consecutive_failures']}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {format_duration(stats['connection_uptime'])}\n\n"
            f"‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:</b>\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: {format_time(stats['last_success_time'])}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {format_time(stats['last_error_time'])}"
        )
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in network status command: {e}")
        await handle_error(e, message, context="network_status_command")

@router.message(Command("network_test"))
@require_admin
async def cmd_network_test(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API"""
    try:
        if not network_monitor:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ú–æ–Ω–∏—Ç–æ—Ä —Å–µ—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
        test_msg = await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        from app.core.network_config import NetworkConfig
        from app.core.config import settings
        
        start_time = time.time()
        is_connected = await NetworkConfig.test_connection(network_monitor.bot)
        response_time = time.time() - start_time
        
        if is_connected:
            await test_msg.edit_text(
                f"‚úÖ <b>–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω</b>\n\n"
                f"–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time:.3f}—Å\n"
                f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.",
                parse_mode="HTML"
            )
        else:
            await test_msg.edit_text(
                f"‚ùå <b>–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"Error in network test command: {e}")
        await handle_error(e, message, context="network_test_command")

@router.message(Command("network_config"))
@require_admin
async def cmd_network_config(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        from app.core.config import settings
        
        response = (
            f"‚öôÔ∏è <b>–°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîó <b>–¢–∞–π–º–∞—É—Ç—ã:</b>\n"
            f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {settings.NETWORK_CONNECT_TIMEOUT}—Å\n"
            f"‚Ä¢ –ß—Ç–µ–Ω–∏–µ: {settings.NETWORK_READ_TIMEOUT}—Å\n"
            f"‚Ä¢ –û–±—â–∏–π: {settings.NETWORK_TOTAL_TIMEOUT}—Å\n\n"
            f"üîÑ <b>Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {settings.NETWORK_MAX_RETRIES}\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {settings.NETWORK_BASE_DELAY}—Å\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {settings.NETWORK_MAX_DELAY}—Å\n"
            f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {settings.NETWORK_BACKOFF_FACTOR}\n\n"
            f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.NETWORK_MONITOR_INTERVAL}—Å"
        )
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in network config command: {e}")
        await handle_error(e, message, context="network_config_command")
