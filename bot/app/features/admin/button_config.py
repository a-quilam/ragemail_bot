from aiogram import types
from aiogram.fsm.context import FSMContext
from app.fsm.admin_states import ButtonConfigStates
from app.infra.repo.button_configs_repo import ButtonConfigsRepo
from app.utils.mailbox_permissions import can_manage_mailbox

async def cb_button_config_start(c: types.CallbackQuery, state: FSMContext, db):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–Ω–æ–ø–æ–∫"""
    if not c.data.startswith("button_config:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, c.from_user.id, mailbox_id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ–≥–æ —è—â–∏–∫–∞.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —è—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_data({"mailbox_id": mailbox_id})
    await state.set_state(ButtonConfigStates.MAIN)
    
    await show_button_config_menu(c, db, mailbox_id)
    await c.answer()

async def show_button_config_menu_new(m: types.Message, db, mailbox_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    text = "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏</b>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
    text += "[+15m] - –∫–Ω–æ–ø–∫–∞ \"+15 –º–∏–Ω\"\n"
    text += "[+30m] - –∫–Ω–æ–ø–∫–∞ \"+30 –º–∏–Ω\"\n"
    text += "[+1h] - –∫–Ω–æ–ø–∫–∞ \"+1 —á\"\n"
    text += "[+2h] - –∫–Ω–æ–ø–∫–∞ \"+2 —á\"\n"
    text += "[+3h] - –∫–Ω–æ–ø–∫–∞ \"+3 —á\"\n"
    text += "[+6h] - –∫–Ω–æ–ø–∫–∞ \"+6 —á\"\n"
    text += "[+12h] - –∫–Ω–æ–ø–∫–∞ \"+12 —á\"\n"
    text += "[+24h] - –∫–Ω–æ–ø–∫–∞ \"+24 —á\"\n"
    text += "[speak] - –∫–Ω–æ–ø–∫–∞ \"üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\"\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    text += "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
    if config:
        config_lines = []
        for row in config:
            if row.get("type") == "row":
                row_buttons = row.get("buttons", [])
                if row_buttons:
                    button_tags = []
                    for button in row_buttons:
                        if button.get("type") == "extend":
                            if "15m" in button.get("callback_data", ""):
                                button_tags.append("[+15m]")
                            elif "30m" in button.get("callback_data", ""):
                                button_tags.append("[+30m]")
                            elif "1h" in button.get("callback_data", ""):
                                button_tags.append("[+1h]")
                            elif "2h" in button.get("callback_data", ""):
                                button_tags.append("[+2h]")
                            elif "3h" in button.get("callback_data", ""):
                                button_tags.append("[+3h]")
                            elif "6h" in button.get("callback_data", ""):
                                button_tags.append("[+6h]")
                            elif "12h" in button.get("callback_data", ""):
                                button_tags.append("[+12h]")
                            elif "24h" in button.get("callback_data", ""):
                                button_tags.append("[+24h]")
                        elif button.get("type") == "contact":
                            button_tags.append("[speak]")
                        elif button.get("type") == "custom":
                            button_tags.append(f"[{button['text']}]")
                    if button_tags:
                        config_lines.append(" ".join(button_tags))
        
        if config_lines:
            text += "\n".join(config_lines)
        else:
            text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"
    else:
        text += "[+1h] [speak]"
    
    text += "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫.\n"
    text += "–ö–Ω–æ–ø–∫–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
    text += "–ü—Ä–∏–º–µ—Ä:\n"
    text += "[+1h] [speak]"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data=f"reset_buttons:{mailbox_id}")]
    ])
    
    await m.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_button_config_menu(c: types.CallbackQuery, db, mailbox_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫"""
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    text = "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏</b>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
    text += "[+15m] - –∫–Ω–æ–ø–∫–∞ \"+15 –º–∏–Ω\"\n"
    text += "[+30m] - –∫–Ω–æ–ø–∫–∞ \"+30 –º–∏–Ω\"\n"
    text += "[+1h] - –∫–Ω–æ–ø–∫–∞ \"+1 —á\"\n"
    text += "[+2h] - –∫–Ω–æ–ø–∫–∞ \"+2 —á\"\n"
    text += "[+3h] - –∫–Ω–æ–ø–∫–∞ \"+3 —á\"\n"
    text += "[+6h] - –∫–Ω–æ–ø–∫–∞ \"+6 —á\"\n"
    text += "[+12h] - –∫–Ω–æ–ø–∫–∞ \"+12 —á\"\n"
    text += "[+24h] - –∫–Ω–æ–ø–∫–∞ \"+24 —á\"\n"
    text += "[speak] - –∫–Ω–æ–ø–∫–∞ \"üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å\"\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    text += "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
    if config:
        config_lines = []
        for row in config:
            if row.get("type") == "row":
                row_buttons = row.get("buttons", [])
                if row_buttons:
                    button_tags = []
                    for button in row_buttons:
                        if button.get("type") == "extend":
                            if "15m" in button.get("callback_data", ""):
                                button_tags.append("[+15m]")
                            elif "30m" in button.get("callback_data", ""):
                                button_tags.append("[+30m]")
                            elif "1h" in button.get("callback_data", ""):
                                button_tags.append("[+1h]")
                            elif "2h" in button.get("callback_data", ""):
                                button_tags.append("[+2h]")
                            elif "3h" in button.get("callback_data", ""):
                                button_tags.append("[+3h]")
                            elif "6h" in button.get("callback_data", ""):
                                button_tags.append("[+6h]")
                            elif "12h" in button.get("callback_data", ""):
                                button_tags.append("[+12h]")
                            elif "24h" in button.get("callback_data", ""):
                                button_tags.append("[+24h]")
                        elif button.get("type") == "contact":
                            button_tags.append("[speak]")
                        elif button.get("type") == "custom":
                            button_tags.append(f"[{button['text']}]")
                    if button_tags:
                        config_lines.append(" ".join(button_tags))
        
        if config_lines:
            text += "\n".join(config_lines)
        else:
            text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"
    else:
        text += "[+1h] [speak]"
    
    text += "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫.\n"
    text += "–ö–Ω–æ–ø–∫–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
    text += "–ü—Ä–∏–º–µ—Ä:\n"
    text += "[+1h] [speak]"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data=f"reset_buttons:{mailbox_id}")]
    ])
    
    await c.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await c.answer()

async def on_button_config_text(m: types.Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫"""
    data = await state.get_data()
    mailbox_id = data.get("mailbox_id")
    
    if not mailbox_id:
        await m.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —è—â–∏–∫–∞.")
        await state.clear()
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–æ–∫
    import re
    new_config = []
    
    print(f"DEBUG: Parsing config from text: {repr(m.text)}")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = m.text.strip().split('\n')
    print(f"DEBUG: Lines: {lines}")
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        button_pattern = r'\[([^\]]+)\]'
        matches = re.findall(button_pattern, line)
        
        if not matches:
            continue
            
        print(f"DEBUG: Line '{line}' has buttons: {matches}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
        row_buttons = []
        for tag in matches:
            tag = tag.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            print(f"DEBUG: Processing tag: {repr(tag)}")
            
            if tag == "+15m":
                row_buttons.append({
                    "type": "extend",
                    "text": "+15 –º–∏–Ω",
                    "callback_data": "ext:15m",
                    "enabled": True
                })
            elif tag == "+30m":
                row_buttons.append({
                    "type": "extend",
                    "text": "+30 –º–∏–Ω",
                    "callback_data": "ext:30m",
                    "enabled": True
                })
            elif tag == "+1h":
                row_buttons.append({
                    "type": "extend",
                    "text": "+1 —á",
                    "callback_data": "ext:1h",
                    "enabled": True
                })
            elif tag == "+2h":
                row_buttons.append({
                    "type": "extend",
                    "text": "+2 —á",
                    "callback_data": "ext:2h",
                    "enabled": True
                })
            elif tag == "+3h":
                row_buttons.append({
                    "type": "extend",
                    "text": "+3 —á",
                    "callback_data": "ext:3h",
                    "enabled": True
                })
            elif tag == "+6h":
                row_buttons.append({
                    "type": "extend",
                    "text": "+6 —á",
                    "callback_data": "ext:6h",
                    "enabled": True
                })
            elif tag == "+12h":
                row_buttons.append({
                    "type": "extend",
                    "text": "+12 —á",
                    "callback_data": "ext:12h",
                    "enabled": True
                })
            elif tag == "+24h":
                row_buttons.append({
                    "type": "extend",
                    "text": "+24 —á",
                    "callback_data": "ext:24h",
                    "enabled": True
                })
            elif tag == "speak":
                row_buttons.append({
                    "type": "contact",
                    "text": "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å",
                    "callback_data": "contact",
                    "enabled": True
                })
            else:
                # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                row_buttons.append({
                    "type": "custom",
                    "text": tag,
                    "callback_data": f"custom:{len(tag)}",
                    "enabled": True
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if row_buttons:
            new_config.append({
                "type": "row",
                "buttons": row_buttons
            })
    
    print(f"DEBUG: Final config: {new_config}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_repo = ButtonConfigsRepo(db)
    await config_repo.set_config(mailbox_id, new_config)
    
    await state.clear()
    await m.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_button_config_menu_new(m, db, mailbox_id)

async def cb_add_button(c: types.CallbackQuery, state: FSMContext, db):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É"""
    if not c.data.startswith("add_button:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    await state.set_state(ButtonConfigStates.ADD_BUTTON)
    
    text = "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏</b>\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    text += "‚Ä¢ \"üëç –ù—Ä–∞–≤–∏—Ç—Å—è\"\n"
    text += "‚Ä¢ \"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\"\n"
    text += "‚Ä¢ \"üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è\"\n\n"
    text += "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ—ë –¥–µ–π—Å—Ç–≤–∏–µ."
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"button_config:{mailbox_id}")]
    ])
    
    await c.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await c.answer()

async def on_add_button_text(m: types.Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
    data = await state.get_data()
    mailbox_id = data.get("mailbox_id")
    
    if not mailbox_id:
        await m.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —è—â–∏–∫–∞.")
        await state.clear()
        return
    
    button_text = m.text.strip()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
    new_button = {
        "type": "custom",
        "text": button_text,
        "callback_data": f"custom:{len(button_text)}",  # –ü—Ä–æ—Å—Ç–æ–π callback_data
        "enabled": True
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if not config or not any(row.get("type") == "row" for row in config):
        config = [{"type": "row", "buttons": []}]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    if config[0].get("type") == "row":
        config[0]["buttons"].append(new_button)
    else:
        # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        config = [{"type": "row", "buttons": [new_button]}]
    
    await config_repo.set_config(mailbox_id, config)
    
    await state.clear()
    await m.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∞ \"{button_text}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    from aiogram.types import CallbackQuery
    fake_callback = CallbackQuery(
        id="fake",
        from_user=m.from_user,
        chat_instance="fake",
        message=m,
        data=f"button_config:{mailbox_id}"
    )
    await show_button_config_menu(fake_callback, db, mailbox_id)

async def cb_edit_button(c: types.CallbackQuery, state: FSMContext, db):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏"""
    if not c.data.startswith("edit_button:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
    all_buttons = []
    for row in config:
        if row.get("type") == "row":
            all_buttons.extend(row.get("buttons", []))
    
    if not all_buttons:
        await c.answer("‚ùå –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return
    
    text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    
    keyboard_buttons = []
    for i, button in enumerate(all_buttons):
        status = "‚úÖ" if button.get("enabled", True) else "‚ùå"
        text += f"{i+1}. {status} {button['text']}\n"
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"{i+1}. {button['text']}", 
                callback_data=f"edit_button_item:{mailbox_id}:{i}"
            )
        ])
    
    keyboard_buttons.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"button_config:{mailbox_id}")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await c.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await c.answer()

async def cb_edit_button_item(c: types.CallbackQuery, state: FSMContext, db):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É"""
    if not c.data.startswith("edit_button_item:"):
        return
    
    parts = c.data.split(":")
    mailbox_id = int(parts[1])
    button_index = int(parts[2])
    
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
    all_buttons = []
    for row in config:
        if row.get("type") == "row":
            all_buttons.extend(row.get("buttons", []))
    
    if button_index >= len(all_buttons):
        await c.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    button = all_buttons[button_index]
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
    text += f"–¢–µ–∫—Å—Ç: {button['text']}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω–∞' if button.get('enabled', True) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="üîÑ –í–∫–ª—é—á–∏—Ç—å" if not button.get('enabled', True) else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å",
                callback_data=f"toggle_button:{mailbox_id}:{button_index}"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_button:{mailbox_id}:{button_index}"
            )
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_button:{mailbox_id}")
        ]
    ])
    
    await c.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await c.answer()

async def cb_toggle_button(c: types.CallbackQuery, state: FSMContext, db):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    if not c.data.startswith("toggle_button:"):
        return
    
    parts = c.data.split(":")
    mailbox_id = int(parts[1])
    button_index = int(parts[2])
    
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    current_index = 0
    button_found = False
    for row in config:
        if row.get("type") == "row":
            buttons = row.get("buttons", [])
            if button_index < current_index + len(buttons):
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
                local_index = button_index - current_index
                buttons[local_index]["enabled"] = not buttons[local_index].get("enabled", True)
                button_found = True
                break
            current_index += len(buttons)
    
    if not button_found:
        await c.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    await config_repo.set_config(mailbox_id, config)
    await c.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await cb_edit_button_item(c, state, db)

async def cb_delete_button(c: types.CallbackQuery, state: FSMContext, db):
    """–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É"""
    if not c.data.startswith("delete_button:"):
        return
    
    parts = c.data.split(":")
    mailbox_id = int(parts[1])
    button_index = int(parts[2])
    
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    current_index = 0
    button_found = False
    button = None
    for row in config:
        if row.get("type") == "row":
            buttons = row.get("buttons", [])
            if button_index < current_index + len(buttons):
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
                local_index = button_index - current_index
                button = buttons[local_index]
                button_found = True
                break
            current_index += len(buttons)
    
    if not button_found or not button:
        await c.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    text = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n"
    text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É \"{button['text']}\"?\n\n"
    text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data=f"confirm_delete_button:{mailbox_id}:{button_index}"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"edit_button_item:{mailbox_id}:{button_index}"
            )
        ]
    ])
    
    await c.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await c.answer()

async def cb_confirm_delete_button(c: types.CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
    if not c.data.startswith("confirm_delete_button:"):
        return
    
    parts = c.data.split(":")
    mailbox_id = int(parts[1])
    button_index = int(parts[2])
    
    config_repo = ButtonConfigsRepo(db)
    config = await config_repo.get_config(mailbox_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    current_index = 0
    button_found = False
    deleted_button = None
    for row in config:
        if row.get("type") == "row":
            buttons = row.get("buttons", [])
            if button_index < current_index + len(buttons):
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
                local_index = button_index - current_index
                deleted_button = buttons.pop(local_index)
                button_found = True
                break
            current_index += len(buttons)
    
    if not button_found or not deleted_button:
        await c.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    
    await config_repo.set_config(mailbox_id, config)
    await c.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∞ \"{deleted_button['text']}\" —É–¥–∞–ª–µ–Ω–∞!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    await cb_edit_button(c, state, db)

async def cb_reset_buttons(c: types.CallbackQuery, state: FSMContext, db):
    """–°–±—Ä–æ—Å–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if not c.data.startswith("reset_buttons:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    
    text = "üîÑ <b>–°–±—Ä–æ—Å –∫–Ω–æ–ø–æ–∫</b>\n\n"
    text += "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?\n\n"
    text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å",
                callback_data=f"confirm_reset_buttons:{mailbox_id}"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"button_config:{mailbox_id}"
            )
        ]
    ])
    
    await c.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await c.answer()

async def cb_confirm_reset_buttons(c: types.CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å –∫–Ω–æ–ø–æ–∫"""
    if not c.data.startswith("confirm_reset_buttons:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    config_repo = ButtonConfigsRepo(db)
    await config_repo.delete_config(mailbox_id)  # –£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    
    await c.answer("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    await show_button_config_menu(c, db, mailbox_id)
