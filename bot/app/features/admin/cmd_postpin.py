from aiogram import types
from aiogram.exceptions import TelegramAPIError
import logging
from app.utils.mailbox_permissions import can_manage_mailbox

_postpin_wait: dict[int, int] = {}

def clear_postpin_wait(user_id: int):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–ø–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in _postpin_wait:
        del _postpin_wait[user_id]

async def cmd_postpin(m: types.Message, active_mailbox_id: int = None, db=None):
    if not m.text or m.text not in ["/postpin", "üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç"]:
        return
    if not active_mailbox_id:
        await m.answer("–Ø—â–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, m.from_user.id, active_mailbox_id):
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —ç—Ç–æ–º —è—â–∏–∫–µ.")
        return
    
    _postpin_wait[m.from_user.id] = active_mailbox_id
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–∞. –Ø –¥–æ–±–∞–≤–ª—é deeplink –∏ –∑–∞–∫—Ä–µ–ø–ª—é –≤ –∫–∞–Ω–∞–ª–µ.")

async def on_postpin_text(m: types.Message, db):
    logging.info(f"üö® POSTPIN FILTER CHECK: User {m.from_user.id}, text: '{m.text}', in _postpin_wait: {m.from_user.id in _postpin_wait}")
    
    if m.from_user.id not in _postpin_wait:
        return
    
    logging.info(f"üö® POSTPIN HANDLER: User {m.from_user.id} in _postpin_wait, text: '{m.text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if m.text and m.text.startswith('/'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not m.text or not m.text.strip():
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–∞.")
        return
    
    mailbox_id = _postpin_wait.pop(m.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —è—â–∏–∫–∞
    from app.infra.repo.mailboxes_repo import MailboxesRepo
    box = await MailboxesRepo(db).get(mailbox_id)
    if not box:
        await m.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —è—â–∏–∫.")
        return
    _, _, channel_id, _, _, _ = box

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deeplink (payload = mailbox_id)
    try:
        me = await m.bot.get_me()
        username = me.username
        payload = str(mailbox_id)
        deeplink = f"https://t.me/{username}?start={payload}"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å deeplink
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", url=deeplink)]
        ])
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º
        text_to_post = f"{m.text}"
        msg = await m.bot.send_message(channel_id, text_to_post, reply_markup=keyboard, disable_web_page_preview=True)
        try:
            await m.bot.pin_chat_message(channel_id, msg.message_id)
        except TelegramAPIError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        else:
            try:
                await m.bot.delete_message(channel_id, msg.message_id + 1)
            except TelegramAPIError:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await m.answer("–ì–æ—Ç–æ–≤–æ: –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω.")
    except TelegramAPIError as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
