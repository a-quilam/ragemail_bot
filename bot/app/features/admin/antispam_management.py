from aiogram import types
from aiogram.fsm.context import FSMContext
import logging
from app.infra.repo.alias_blocks_repo import AliasBlocksRepo
from app.infra.repo.alias_words_repo import AliasWordsRepo
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.user_cooldowns_repo import UserCooldownsRepo
from app.core.config import settings
from app.infra.repo.users_repo import UsersRepo
from app.utils.mailbox_permissions import can_manage_mailbox
from app.fsm.admin_states import AntispamStates
from datetime import datetime

async def is_admin_db(message, db) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    try:
        role = await UsersRepo(db).get_role(message.from_user.id)
    except Exception:
        role = "user"
    return role in ("admin", "superadmin") or (settings.SUPERADMIN_ID and message.from_user.id == settings.SUPERADMIN_ID)

async def get_user_owned_mailboxes(db, user_id: int) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–ª–∞–¥–µ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    mailboxes_repo = MailboxesRepo(db)
    all_mailboxes = await mailboxes_repo.list_all()
    
    owned_mailboxes = []
    for mailbox_id, title, channel_id, _, _, creator_id in all_mailboxes:
        # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–ª–∞–¥–µ–µ—Ç –≤—Å–µ–º–∏ —è—â–∏–∫–∞–º–∏
        if settings.SUPERADMIN_ID and user_id == settings.SUPERADMIN_ID:
            owned_mailboxes.append((mailbox_id, title, channel_id, creator_id))
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º–∏ —è—â–∏–∫–∞–º–∏
        elif creator_id == user_id:
            owned_mailboxes.append((mailbox_id, title, channel_id, creator_id))
    
    return owned_mailboxes

async def cmd_antispam(m: types.Message, state: FSMContext, db, active_mailbox_id: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º"""
    import logging
    logging.info(f"ANTISPAM: User {m.from_user.id} clicked antispam button")
    
    if not await is_admin_db(m, db):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —è—â–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–ª–∞–¥–µ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    owned_mailboxes = await get_user_owned_mailboxes(db, m.from_user.id)
    
    if not owned_mailboxes:
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —è—â–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —è—â–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    target_mailbox_id = None
    
    if len(owned_mailboxes) == 1:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ 1 —è—â–∏–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        target_mailbox_id = owned_mailboxes[0][0]
    else:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —è—â–∏–∫–æ–≤
        if active_mailbox_id and await can_manage_mailbox(db, m.from_user.id, active_mailbox_id):
            # –ê–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            target_mailbox_id = active_mailbox_id
        else:
            # –ê–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            await show_mailbox_selection(m, state, db, owned_mailboxes)
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(AntispamStates.MAILBOX_SELECTED)
    await state.update_data(antispam_mailbox_id=target_mailbox_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è—â–∏–∫–∞
    await show_antispam_menu(m, state, db, target_mailbox_id)

async def show_mailbox_selection(m: types.Message, state: FSMContext, db, owned_mailboxes: list):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è—â–∏–∫–∞ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    text = "üõ°Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º</b>\n\n"
    text += "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —è—â–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–∞–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º:\n\n"
    
    buttons = []
    for mailbox_id, title, channel_id, creator_id in owned_mailboxes:
        text += f"‚Ä¢ <b>{title}</b> (ID: {mailbox_id})\n"
        buttons.append([InlineKeyboardButton(
            text=f"üõ°Ô∏è {title}",
            callback_data=f"antispam_mailbox:{mailbox_id}"
        )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await m.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_antispam_menu(m: types.Message, state: FSMContext, db, mailbox_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è—â–∏–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—â–∏–∫–µ
    mailboxes_repo = MailboxesRepo(db)
    box = await mailboxes_repo.get(mailbox_id)
    if not box:
        await m.answer("‚ùå –Ø—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    _, title, channel_id, _, _, _ = box
    
    blocks_repo = AliasBlocksRepo(db)
    blocks = await blocks_repo.get_blocked_words(mailbox_id)
    
    text = f"üõ°Ô∏è <b>–ê–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è —è—â–∏–∫–∞ ¬´{title}¬ª</b>\n\n"
    text += f"üÜî <b>ID:</b> {mailbox_id}\n"
    text += f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_id}\n\n"
    
    if blocks:
        text += "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        for block in blocks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            expires_info = f" (–¥–æ {block['expires_at'][:16]})" if block['expires_at'] else " (–Ω–∞–≤—Å–µ–≥–¥–∞)"
            text += f"‚Ä¢ <code>{block['word']}</code>{expires_info}\n"
            if block['reason']:
                text += f"  <i>–ü—Ä–∏—á–∏–Ω–∞: {block['reason']}</i>\n"
        
        if len(blocks) > 10:
            text += f"\n... –∏ –µ—â–µ {len(blocks) - 10} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
    else:
        text += "‚úÖ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã
    cooldowns_repo = UserCooldownsRepo(db)
    cooldowns = await cooldowns_repo.get_all_cooldowns(mailbox_id)
    
    if cooldowns:
        text += f"\n‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã ({len(cooldowns)}):</b>\n"
        for cooldown in cooldowns[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            time_left = cooldown['cooldown_until'] - datetime.now()
            hours_left = int(time_left.total_seconds() / 3600)
            text += f"‚Ä¢ {cooldown['alias']} ({hours_left}—á –æ—Å—Ç–∞–ª–æ—Å—å)\n"
        if len(cooldowns) > 3:
            text += f"... –∏ –µ—â–µ {len(cooldowns) - 3} –∫—É–ª–¥–∞—É–Ω–æ–≤\n"
    
    text += "\nüí° <b>–ö–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤:</b>\n"
    text += "‚Ä¢ <code>/block —Å–ª–æ–≤–æ</code> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ\n"
    text += "‚Ä¢ <code>/unblock —Å–ª–æ–≤–æ</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ\n"
    text += "‚Ä¢ <code>/blocks</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
    text += "üí° <b>–ö–æ–º–∞–Ω–¥—ã –∫—É–ª–¥–∞—É–Ω–æ–≤:</b>\n"
    text += "‚Ä¢ <code>/cooldown –ø—Å–µ–≤–¥–æ–Ω–∏–º [—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞]</code> - –∫—É–ª–¥–∞—É–Ω –ø–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º—É\n"
    text += "‚Ä¢ <code>/remove_cooldown user_id</code> - —Å–Ω—è—Ç—å –∫—É–ª–¥–∞—É–Ω\n"
    text += "‚Ä¢ <code>/cooldowns</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É–ª–¥–∞—É–Ω—ã"
    
    await m.answer(text, parse_mode="HTML")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
    await state.clear()

async def cb_antispam_mailbox_selection(c: types.CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è—â–∏–∫–∞ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    if not c.data.startswith("antispam_mailbox:"):
        return
    
    mailbox_id = int(c.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not await can_manage_mailbox(db, c.from_user.id, mailbox_id):
        await c.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(AntispamStates.MAILBOX_SELECTED)
    await state.update_data(antispam_mailbox_id=mailbox_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è—â–∏–∫–∞
    await show_antispam_menu(c.message, state, db, mailbox_id)
    await c.answer()

async def cmd_block_word(m: types.Message, state: FSMContext, db):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ"""
    if not await is_admin_db(m, db):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mailbox_id = data.get("antispam_mailbox_id")
    
    if not mailbox_id:
        await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, m.from_user.id, mailbox_id):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É —è—â–∏–∫—É.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /block —Å–ª–æ–≤–æ [–ø—Ä–∏—á–∏–Ω–∞] [–≤—Ä–µ–º—è_–≤_—á–∞—Å–∞—Ö]
    parts = m.text.split(maxsplit=3)
    if len(parts) < 2:
        await m.answer(
            "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/block —Å–ª–æ–≤–æ [–ø—Ä–∏—á–∏–Ω–∞] [–≤—Ä–µ–º—è_–≤_—á–∞—Å–∞—Ö]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>/block —Å–ø–∞–º</code>\n"
            "‚Ä¢ <code>/block —Ä–µ–∫–ª–∞–º–∞ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</code>\n"
            "‚Ä¢ <code>/block —Ñ–ª—É–¥ –°–ø–∞–º 24</code>",
            parse_mode="HTML"
        )
        return
    
    word = parts[1].lower()
    reason = parts[2] if len(parts) > 2 else ""
    duration_hours = 24  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
    
    if len(parts) > 3:
        try:
            duration_hours = int(parts[3])
        except ValueError:
            duration_hours = 24
    
    blocks_repo = AliasBlocksRepo(db)
    success = await blocks_repo.block_user_by_alias_word(word, m.from_user.id, mailbox_id, reason, duration_hours)
    
    if success:
        duration_text = f"–Ω–∞ {duration_hours} —á–∞—Å–æ–≤" if duration_hours > 0 else "–Ω–∞–≤—Å–µ–≥–¥–∞"
        reason_text = f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}" if reason else ""
        
        await m.answer(
            f"‚úÖ <b>–°–ª–æ–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
            f"üö´ <b>–°–ª–æ–≤–æ:</b> <code>{word}</code>\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {duration_text}{reason_text}",
            parse_mode="HTML"
        )
    else:
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–ª–æ–≤–∞.")

async def cmd_unblock_word(m: types.Message, state: FSMContext, db):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ"""
    if not await is_admin_db(m, db):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mailbox_id = data.get("antispam_mailbox_id")
    
    if not mailbox_id:
        await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, m.from_user.id, mailbox_id):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É —è—â–∏–∫—É.")
        return
    
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer(
            "üîì <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/unblock —Å–ª–æ–≤–æ</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/unblock —Å–ø–∞–º</code>",
            parse_mode="HTML"
        )
        return
    
    word = parts[1].lower()
    blocks_repo = AliasBlocksRepo(db)
    success = await blocks_repo.unblock_user_by_alias_word(word, mailbox_id)
    
    if success:
        await m.answer(
            f"‚úÖ <b>–°–ª–æ–≤–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
            f"üîì <b>–°–ª–æ–≤–æ:</b> <code>{word}</code>",
            parse_mode="HTML"
        )
    else:
        await m.answer("‚ùå –°–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")

async def cmd_show_blocks(m: types.Message, state: FSMContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if not await is_admin_db(m, db):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mailbox_id = data.get("antispam_mailbox_id")
    
    if not mailbox_id:
        await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, m.from_user.id, mailbox_id):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É —è—â–∏–∫—É.")
        return
    
    blocks_repo = AliasBlocksRepo(db)
    blocks = await blocks_repo.get_blocked_words(mailbox_id)
    
    if not blocks:
        await m.answer("‚úÖ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç</b>", parse_mode="HTML")
        return
    
    text = f"üö´ <b>–í—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ({len(blocks)})</b>\n\n"
    
    for i, block in enumerate(blocks, 1):
        expires_info = f"–¥–æ {block['expires_at'][:16]}" if block['expires_at'] else "–Ω–∞–≤—Å–µ–≥–¥–∞"
        reason_info = f" - {block['reason']}" if block['reason'] else ""
        text += f"{i}. <code>{block['word']}</code> ({expires_info}){reason_info}\n"
        
        if len(text) > 3500:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            text += f"\n... –∏ –µ—â–µ {len(blocks) - i} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"
            break
    
    await m.answer(text, parse_mode="HTML")

async def cmd_cooldown_user(m: types.Message, state: FSMContext, db):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º—É"""
    if not await is_admin_db(m, db):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mailbox_id = data.get("antispam_mailbox_id")
    
    if not mailbox_id:
        await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, m.from_user.id, mailbox_id):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É —è—â–∏–∫—É.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /cooldown –ø—Å–µ–≤–¥–æ–Ω–∏–º [–≤—Ä–µ–º—è_–≤_—á–∞—Å–∞—Ö] [–ø—Ä–∏—á–∏–Ω–∞]
    parts = m.text.split(maxsplit=3)
    if len(parts) < 2:
        await m.answer(
            "‚è∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º—É</b>\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ <code>/cooldown –ø—Å–µ–≤–¥–æ–Ω–∏–º</code> - –∫—É–ª–¥–∞—É–Ω –Ω–∞ 24 —á–∞—Å–∞\n"
            "‚Ä¢ <code>/cooldown –ø—Å–µ–≤–¥–æ–Ω–∏–º 12</code> - –∫—É–ª–¥–∞—É–Ω –Ω–∞ 12 —á–∞—Å–æ–≤\n"
            "‚Ä¢ <code>/cooldown –ø—Å–µ–≤–¥–æ–Ω–∏–º 6 –ø—Ä–∏—á–∏–Ω–∞</code> - –∫—É–ª–¥–∞—É–Ω –Ω–∞ 6 —á–∞—Å–æ–≤ —Å –ø—Ä–∏—á–∏–Ω–æ–π\n\n"
            "üîç <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/cooldown üê± –¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä 12 —Å–ø–∞–º</code>",
            parse_mode="HTML"
        )
        return
    
    alias = parts[1]
    duration_hours = 24  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
    reason = ""
    
    if len(parts) >= 3:
        try:
            duration_hours = int(parts[2])
        except ValueError:
            reason = parts[2]
    
    if len(parts) >= 4:
        reason = parts[3]
    
    cooldowns_repo = UserCooldownsRepo(db)
    success = await cooldowns_repo.set_cooldown_by_alias(alias, mailbox_id, duration_hours, reason)
    
    if success:
        await m.answer(
            f"‚è∞ <b>–ö—É–ª–¥–∞—É–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üè∑Ô∏è <b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> {alias}\n"
            f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {duration_hours} —á–∞—Å–æ–≤\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason if reason else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —ç—Ç–∏–º –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º –Ω–µ —Å–º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–∞.",
            parse_mode="HTML"
        )
    else:
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—É–ª–¥–∞—É–Ω–∞.")

async def cmd_remove_cooldown(m: types.Message, state: FSMContext, db):
    """–°–Ω—è—Ç—å –∫—É–ª–¥–∞—É–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await is_admin_db(m, db):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mailbox_id = data.get("antispam_mailbox_id")
    
    if not mailbox_id:
        await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, m.from_user.id, mailbox_id):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É —è—â–∏–∫—É.")
        return
    
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer(
            "üîì <b>–°–Ω—è—Ç–∏–µ –∫—É–ª–¥–∞—É–Ω–∞</b>\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ <code>/remove_cooldown user_id</code> - —Å–Ω—è—Ç—å –∫—É–ª–¥–∞—É–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "üîç <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/remove_cooldown 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        user_id = int(parts[1])
    except ValueError:
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    cooldowns_repo = UserCooldownsRepo(db)
    success = await cooldowns_repo.remove_cooldown(user_id, mailbox_id)
    
    if success:
        await m.answer(f"‚úÖ –ö—É–ª–¥–∞—É–Ω —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    else:
        await m.answer("‚ùå –ö—É–ª–¥–∞—É–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    await state.clear()

async def cmd_show_cooldowns(m: types.Message, state: FSMContext, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã"""
    if not await is_admin_db(m, db):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è—â–∏–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    mailbox_id = data.get("antispam_mailbox_id")
    
    if not mailbox_id:
        await m.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è—â–∏–∫ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—â–∏–∫—É
    if not await can_manage_mailbox(db, m.from_user.id, mailbox_id):
        await m.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É —è—â–∏–∫—É.")
        return
    
    cooldowns_repo = UserCooldownsRepo(db)
    cooldowns = await cooldowns_repo.get_all_cooldowns(mailbox_id)
    
    if not cooldowns:
        await m.answer("‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ª–¥–∞—É–Ω–æ–≤ –Ω–µ—Ç</b>")
        await state.clear()
        return
    
    text = f"‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã ({len(cooldowns)})</b>\n\n"
    
    for i, cooldown in enumerate(cooldowns[:10], 1):
        cooldown_until = cooldown['cooldown_until']
        time_left = cooldown_until - datetime.now()
        hours_left = int(time_left.total_seconds() / 3600)
        
        text += f"{i}. <b>ID:</b> {cooldown['user_id']}\n"
        text += f"   <b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> {cooldown['alias']}\n"
        text += f"   <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {hours_left}—á\n"
        if cooldown['reason']:
            text += f"   <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {cooldown['reason']}\n"
        text += "\n"
    
    if len(cooldowns) > 10:
        text += f"... –∏ –µ—â–µ {len(cooldowns) - 10} –∫—É–ª–¥–∞—É–Ω–æ–≤\n"
    
    await m.answer(text, parse_mode="HTML")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    await state.clear()
