from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from app.keyboards.write_flow import start_kb, start_kb_admin
from app.texts.help_admin import HELP_ADMIN
from app.core.config import settings
from app.core.version import get_version_with_date
from app.infra.repo.users_repo import UsersRepo
from app.utils.error_handler import safe_async, handle_error
import logging

router = Router()

async def is_admin_db(message, db) -> bool:
    try:
        from app.utils.role_cache import get_role_cache
        role_cache = get_role_cache()
        role = await role_cache.get_role(message.from_user.id, UsersRepo(db).get_role)
    except Exception:
        role = "user"
    return role in ("admin", "superadmin") or (settings.SUPERADMIN_ID and message.from_user.id == settings.SUPERADMIN_ID)

@router.message(CommandStart())
async def cmd_start(m: types.Message, state: FSMContext, db) -> None:
    try:
        logging.info(f"START COMMAND RECEIVED from user {m.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ /start
        if m.text and len(m.text.split()) > 1:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —ç—Ç–æ deeplink - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            # bind_router –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ
            logging.info(f"START COMMAND with payload detected, skipping: '{m.text}'")
            return
        
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª—å)
        users_repo = UsersRepo(db)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if not await users_repo.get(m.from_user.id):
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
            await users_repo.upsert(m.from_user.id, username=m.from_user.username)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            await users_repo.update_username(m.from_user.id, m.from_user.username)
        
        # –õ–æ–≥–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"SUPERADMIN_ID from config: {settings.SUPERADMIN_ID}")
        admin_flag = await is_admin_db(m, db)
        logging.info(f"Is admin: {admin_flag}")
        
        kb = start_kb_admin() if admin_flag else start_kb()
        if admin_flag:
            version = get_version_with_date()
            await m.answer(
                f"ü§ñ <b>{version}</b>\n\n"
                "üëã <b>–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º ¬´–ó–ª–æ–µ –ø–∏—Å—å–º–æ¬ª.\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
                "‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                "üìå <b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å deeplink-–ø–æ—Å—Ç\n"
                "üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å</b> ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–Ω–∞–ª–æ–º\n\n"
                "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            version = get_version_with_date()
            await m.answer(
                f"ü§ñ <b>{version}</b>\n\n"
                "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ¬´–ó–ª–æ–µ –ø–∏—Å—å–º–æ¬ª!\n\n"
                "üìù <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
                "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "2. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∞–Ω–æ–Ω–∏–º–Ω–æ\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ—Å—Ç–∞\n"
                "4. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ\n\n"
                "üîí <i>–í–∞—à–∞ –ª–∏—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ–π</i>",
                reply_markup=kb,
                parse_mode="HTML"
            )
        logging.info("START COMMAND RESPONSE SENT")
    except Exception as e:
        logging.error(f"ERROR in cmd_start: {e}", exc_info=True)
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("help"))
async def cmd_help(m: types.Message, db) -> None:
    is_admin = await is_admin_db(m, db)
    
    if is_admin:
        help_text = (
            "üëã <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ <code>/start</code> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ <code>/help</code> ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ <code>/cancel</code> ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ <code>/backup</code> ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n"
            "‚Ä¢ <code>/restore</code> ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞\n"
            "‚Ä¢ <code>/antispam</code> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º\n"
            "‚Ä¢ <code>/postpin</code> ‚Äî –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç —Å deeplink\n"
            "‚Ä¢ <code>/refresh</code> ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n\n"
            "üõ°Ô∏è <b>–ê–Ω—Ç–∏—Å–ø–∞–º –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ <code>/block —Å–ª–æ–≤–æ [–ø—Ä–∏—á–∏–Ω–∞] [—á–∞—Å—ã]</code> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ\n"
            "‚Ä¢ <code>/unblock —Å–ª–æ–≤–æ</code> ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ\n"
            "‚Ä¢ <code>/blocks</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ <code>/cooldown –ø—Å–µ–≤–¥–æ–Ω–∏–º [—á–∞—Å—ã] [–ø—Ä–∏—á–∏–Ω–∞]</code> ‚Äî –∫—É–ª–¥–∞—É–Ω\n"
            "‚Ä¢ <code>/remove_cooldown user_id</code> ‚Äî —Å–Ω—è—Ç—å –∫—É–ª–¥–∞—É–Ω\n"
            "‚Ä¢ <code>/cooldowns</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫—É–ª–¥–∞—É–Ω—ã\n\n"
            "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>"
        )
    else:
        help_text = (
            "üëã <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ <code>/start</code> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ <code>/help</code> ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ <code>/cancel</code> ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
            "‚úçÔ∏è <b>–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
            "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ—Å—Ç–∞ (15 –º–∏–Ω—É—Ç ‚Äî 24 —á–∞—Å–∞)\n"
            "3. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º\n\n"
            "üí¨ <b>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å¬ª –ø–æ–¥ –ª—é–±—ã–º –ø–æ—Å—Ç–æ–º\n"
            "‚Ä¢ –î–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/end</code> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n"
            "üîí <b>–í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å:</b>\n"
            "‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —É –≤–∞—Å –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º\n"
            "‚Ä¢ –í–∞—à–∞ –ª–∏—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç–æ–π\n"
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è\n\n"
            "üí° <i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–æ—Ç—É, –∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!</i>"
        )
    
    await m.answer(help_text, parse_mode="HTML")

@router.message(Command("cancel"))
async def cmd_cancel(m: types.Message, state: FSMContext, db) -> None:
    await state.clear()
    kb = start_kb_admin() if await is_admin_db(m, db) else start_kb()
    await m.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb)

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏
