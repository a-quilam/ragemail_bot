from aiogram import types
from aiogram.fsm.context import FSMContext
from zoneinfo import ZoneInfo
from app.fsm.write_states import WriteStates
from app.services.post_service import PostService
from app.infra.repo.posts_repo import PostsRepo
from app.infra.repo.extensions_repo import ExtensionsRepo
from app.infra.repo.mailboxes_repo import MailboxesRepo

async def cb_send_now(c: types.CallbackQuery, state: FSMContext, db, bot, tz: ZoneInfo, active_mailbox_id: int):
    if not c.data.startswith("send_now:"):
        return
    data = await state.get_data()
    draft_id = data.get("draft_id")
    if draft_id is None or f"send_now:{draft_id}" != c.data:
        await c.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
        return
    text = data.get("text","")
    ttl = data.get("current_ttl", 20*60)  # 20 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    alias = data.get("alias", "–ê–Ω–æ–Ω–∏–º")
    if not active_mailbox_id:
        await c.answer("–Ø—â–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True)
        return
    mbox = await MailboxesRepo(db).get(active_mailbox_id)
    if not mbox:
        await c.answer("–Ø—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return
    _, _, channel_id, _, _, _ = mbox
    svc = PostService(bot, tz, PostsRepo(db), ExtensionsRepo(db))
    await svc.publish(channel_id, c.from_user.id, alias, text, ttl, active_mailbox_id)
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    from app.infra.repo.users_repo import UsersRepo
    from app.core.config import settings
    users_repo = UsersRepo(db)
    role = await users_repo.get_role(c.from_user.id)
    is_admin = role in ("admin", "superadmin") or (settings.SUPERADMIN_ID and c.from_user.id == settings.SUPERADMIN_ID)
    
    if is_admin:
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await c.message.edit_text(
            "‚úÖ <b>–ü–∏—Å—å–º–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!</b>\n\n"
            "–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        from app.keyboards.write_flow import start_kb_admin
        kb = start_kb_admin()
        await c.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        channel_link = f"https://t.me/{channel_id.replace('@', '')}" if str(channel_id).startswith('@') else f"https://t.me/c/{str(channel_id)[4:]}" if str(channel_id).startswith('-100') else f"https://t.me/{channel_id}"
        
        await c.message.edit_text(
            "‚úÖ <b>–ü–∏—Å—å–º–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!</b>\n\n"
            f"üìù <b>–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º:</b> {alias}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –∂–∏–∑–Ω–∏:</b> {ttl // 60} –º–∏–Ω—É—Ç\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> <a href='{channel_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>\n\n"
            "üí¨ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
            "‚Ä¢ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –∫–∞–Ω–∞–ª–µ\n"
            "‚Ä¢ –ß–∏—Ç–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ—Å—Ç–∞\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
            "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</b>",
            reply_markup=None,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    
    await c.answer()
