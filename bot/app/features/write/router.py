from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from app.fsm.write_states import WriteStates
from .action_write_button import on_write_button
from .state_input_text import on_text_input
from .auto_text_handler import on_auto_text_input
from .ttl_handlers import on_ttl_add, on_ttl_done, on_ttl_reset
from .action_send_now import cb_send_now
from .action_send_delayed import cb_send_delay, cb_cancel_delay
from .action_delete_draft import cb_delete_draft
from .action_blocking_continue import on_blocking_continue
import logging

router = Router()

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware —É–¥–∞–ª–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞

# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è on_auto_text_input
async def auto_text_filter(message, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è on_auto_text_input - –∏—Å–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è WriteStates –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
    if message.text and any(message.text.startswith(prefix) for prefix in ["‚úçÔ∏è", "‚öôÔ∏è", "üìä", "üìå", "üîÑ", "üõ°Ô∏è"]):
        return False
    
    # –ò–°–ö–õ–Æ–ß–ê–ï–ú –∫–Ω–æ–ø–∫—É "–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –Ω–∞—Ä—É—à–∞—Ç—å" - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    if message.text == "‚úÖ –•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –Ω–∞—Ä—É—à–∞—Ç—å":
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –ª—é–±–æ–º –∏–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π WriteStates
    current_state = await state.get_state()
    if current_state and "WriteStates" in str(current_state):
        return False
    
    # –ò–°–ö–õ–Æ–ß–ê–ï–ú –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏
    if message.forward_from_chat or message.forward_from:
        return False
    
    return True

router.message.register(on_write_button, F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ")
router.message.register(on_text_input, StateFilter(WriteStates.INPUT_TEXT))
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –Ω–∞—Ä—É—à–∞—Ç—å" - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î auto_text_input
router.message.register(on_blocking_continue, F.text == "‚úÖ –•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –Ω–∞—Ä—É—à–∞—Ç—å")
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
# –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
# –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö WriteStates - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
router.message.register(on_auto_text_input, auto_text_filter)

router.callback_query.register(on_ttl_add, F.data.startswith("ttl_add:"), StateFilter(WriteStates.CHOOSE_TTL))
router.callback_query.register(on_ttl_done, F.data == "ttl_done", StateFilter(WriteStates.CHOOSE_TTL))
router.callback_query.register(on_ttl_reset, F.data == "ttl_reset", StateFilter(WriteStates.CHOOSE_TTL))

router.callback_query.register(cb_send_now, F.data.startswith("send_now:"), StateFilter(WriteStates.PREVIEW))
router.callback_query.register(cb_send_delay, F.data.startswith("send_delay:"), StateFilter(WriteStates.PREVIEW))
router.callback_query.register(cb_cancel_delay, F.data.startswith("cancel_delay:"))
router.callback_query.register(cb_delete_draft, F.data.startswith("delete_draft:"))
