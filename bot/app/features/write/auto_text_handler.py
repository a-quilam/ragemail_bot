from aiogram import types
from aiogram.fsm.context import FSMContext
from app.fsm.write_states import WriteStates
from app.texts.prompts import PROMPT_INPUT
from app.infra.repo.users_repo import UsersRepo
from app.core.config import settings
import logging

async def on_auto_text_input(m: types.Message, state: FSMContext, db, active_mailbox_id: int, tz):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ INPUT_TEXT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞"""
    
    logging.info(f"AUTO TEXT HANDLER: Processing message from user {m.from_user.id}: '{m.text[:50] if m.text else 'No text'}...'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    users_repo = UsersRepo(db)
    role = await users_repo.get_role(m.from_user.id)
    is_admin = role in ("admin", "superadmin") or (settings.SUPERADMIN_ID and m.from_user.id == settings.SUPERADMIN_ID)
    
    if is_admin:
        # –ê–¥–º–∏–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—ã—á–Ω—ã–π —Ñ–ª–æ—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        logging.info(f"AUTO TEXT HANDLER: User {m.from_user.id} is admin, skipping auto text processing")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫
    if not active_mailbox_id:
        await m.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.\n\n"
            "–î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–∏—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
            "2. –ò–ª–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —è—â–∏–∫—É\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è—â–∏–∫–∞."
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if m.text and m.text.startswith('/'):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞
    button_texts = ["‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º", "üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏", "üîô –ù–∞–∑–∞–¥"]
    if m.text in button_texts:
        logging.info(f"AUTO TEXT HANDLER: Skipping button text: {m.text}")
        return False
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–∏—Å—å–º–æ - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ INPUT_TEXT
    text = (m.text or "").strip()
    if not text:
        await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ —Ç–µ–∫—Å—Ç–æ–º.")
        return True
    
    logging.info(f"AUTO TEXT INPUT by user {m.from_user.id}: {text[:50]}...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ - –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ on_text_input
    await state.clear()
    await state.set_state(WriteStates.INPUT_TEXT)
    await state.update_data(text=text)
    
    # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ INPUT_TEXT –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    from .state_input_text import on_text_input
    await on_text_input(m, state, db, tz, active_mailbox_id)
    
    return True
