from aiogram import types
from aiogram.fsm.context import FSMContext
import time
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional
from app.fsm.write_states import WriteStates
from app.texts.previews import build_ttl_preview
from app.keyboards.ttl_selection import ttl_selection_kb
from app.services.alias_service import AliasService
from app.infra.repo.aliases_repo import AliasesRepo
from app.infra.repo.alias_words_repo import AliasWordsRepo
from app.infra.repo.alias_blocks_repo import AliasBlocksRepo
from app.core.constants import MAX_TEXT_LENGTH, DEFAULT_TTL_SECONDS

DEFAULT_TTL = DEFAULT_TTL_SECONDS

async def on_text_input(m: types.Message, state: FSMContext, db, tz: ZoneInfo, active_mailbox_id: Optional[int] = None, **kwargs):
    bot = kwargs.get('bot')
    
    text = (m.text or "").strip()
    if not text:
        logging.info(f"TEXT INPUT: Empty text from user {m.from_user.id}")
        await bot.send_message(m.chat.id, "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from app.infra.repo.user_cooldowns_repo import UserCooldownsRepo
    cooldowns_repo = UserCooldownsRepo(db)
    cooldown_info = await cooldowns_repo.is_user_on_cooldown(m.from_user.id, active_mailbox_id)
    
    if cooldown_info:
        cooldown_until = cooldown_info['cooldown_until']
        time_left = cooldown_until - datetime.now()
        hours_left = int(time_left.total_seconds() / 3600)
        minutes_left = int((time_left.total_seconds() % 3600) / 60)
        
        reason_text = f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {cooldown_info['reason']}" if cooldown_info['reason'] else ""
        
        await bot.send_message(
            m.chat.id,
            f"‚è∞ <b>–í—ã –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ</b>\n\n"
            f"üö´ <b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> {cooldown_info['alias']}\n"
            f"‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {hours_left}—á {minutes_left}–º{reason_text}\n\n"
            f"üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–Ω—è—Ç–∏—è –∫—É–ª–¥–∞—É–Ω–∞.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    from app.utils.message_blocking import check_message_for_blocked_words, get_blocked_message_response, get_blocked_message_keyboard
    
    blocks_repo = AliasBlocksRepo(db)
    blocked_info = await check_message_for_blocked_words(text, blocks_repo, active_mailbox_id)
    
    if blocked_info:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await bot.send_message(
            m.chat.id,
            get_blocked_message_response(blocked_info, text, active_mailbox_id),
            parse_mode="HTML",
            reply_markup=get_blocked_message_keyboard()
        )
        
        await state.clear()
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if len(text) > MAX_TEXT_LENGTH:
        await bot.send_message(
            m.chat.id,
            f"‚ùå <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.",
            parse_mode="HTML"
        )
        return

    await state.update_data(text=text)
    await state.set_state(WriteStates.CHOOSE_TTL)

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    from app.utils.performance_logger import performance_logger
    alias = await performance_logger.measure_db_operation(
        "alias_generation",
        AliasService(AliasesRepo(db), tz, AliasWordsRepo(db), AliasBlocksRepo(db)).get_or_issue,
        m.from_user.id,
        active_mailbox_id
    )
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 5 –º–∏–Ω—É—Ç –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
    current_time = int(time.time())
    rounded_time = (current_time // 300) * 300  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
    delete_at = rounded_time + DEFAULT_TTL
    await state.update_data(
        alias=alias,
        delete_at=delete_at,
        current_ttl=DEFAULT_TTL
    )
    preview = build_ttl_preview(alias, text=text, delete_at=delete_at, tz=tz)
    await bot.send_message(m.chat.id, preview, reply_markup=ttl_selection_kb(DEFAULT_TTL, 48*60*60, tz))
    logging.info(f"TEXT INPUT: Successfully processed text from user {m.from_user.id}, alias: {alias}")
