from aiogram import types
from aiogram.fsm.context import FSMContext
from app.fsm.write_states import WriteStates
from app.texts.prompts import PROMPT_INPUT
from typing import Optional
import logging

async def on_write_button(m: types.Message, state: FSMContext, active_mailbox_id: Optional[int] = None, **kwargs):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–ø–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
    from app.features.admin.cmd_postpin import clear_postpin_wait
    clear_postpin_wait(m.from_user.id)
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç middleware –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - middleware –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    # –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    
    logging.info(f"WRITE BUTTON CLICKED by user {m.from_user.id}, active_mailbox_id: {active_mailbox_id}, text: '{m.text}'")
    logging.info(f"WRITE BUTTON: Current FSM state: {await state.get_state()}")
    
    if m.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ":
        logging.info(f"WRITE BUTTON: Processing write button for user {m.from_user.id}, active_mailbox_id: {active_mailbox_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–∏—Å—å–º–∞
        try:
            current_state = await state.get_state()
            if current_state == WriteStates.INPUT_TEXT:
                await m.answer("üìù –í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–∏—Å—å–º–∞")
                return
        except Exception as e:
            logging.error(f"Error getting FSM state: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        
        if not active_mailbox_id:
            logging.info(f"No active mailbox for user {m.from_user.id}")
            await m.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.\n\n"
                "–î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–∏—Å–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "1. –°–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
                "2. –ò–ª–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —è—â–∏–∫—É\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è—â–∏–∫–∞."
            )
            return
        
        logging.info(f"Setting state to INPUT_TEXT for user {m.from_user.id}")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ AntispamStates –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        current_state = await state.get_state()
        if current_state and str(current_state).startswith("AntispamStates"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            antispam_data = await state.get_data()
            await state.clear()
            await state.set_state(WriteStates.INPUT_TEXT)
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
            await state.update_data(antispam_data)
            logging.info(f"Preserved AntispamStates data when switching to WriteStates for user {m.from_user.id}")
        else:
            await state.clear()
            await state.set_state(WriteStates.INPUT_TEXT)
        # Remove keyboard
        await m.answer(PROMPT_INPUT, reply_markup=types.ReplyKeyboardRemove())
        logging.info(f"Write button response sent to user {m.from_user.id}")
