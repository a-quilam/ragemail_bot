from aiogram import types
from aiogram.filters import CommandStart
import logging
from app.infra.repo.users_repo import UsersRepo
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.tg_api import user_is_member

async def cmd_start_payload(m: types.Message, db, bot):
    logging.info(f"START PAYLOAD: user {m.from_user.id}, text: '{m.text}'")
    
    if not m.text:
        return
    parts = m.text.split()
    if len(parts) < 2:
        return
    payload = parts[1]
    if not payload.isdigit():
        return
    
    try:
        mailbox_id = int(payload)
        if mailbox_id <= 0:
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —è—â–∏–∫–∞.")
            return
    except (ValueError, OverflowError):
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —è—â–∏–∫–∞.")
        return
    box = await MailboxesRepo(db).get(mailbox_id)
    if not box:
        await m.answer("–Ø—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞
    if len(box) < 6:
        await m.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞.")
        return
    
    _, _, channel_id, _, _, _ = box
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è channel_id
    if not channel_id:
        await m.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª —è—â–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    
    logging.info(f"START PAYLOAD: checking membership for user {m.from_user.id} in channel {channel_id}")
    if not await user_is_member(bot, channel_id, m.from_user.id):
        await m.answer(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª —ç—Ç–æ–≥–æ —è—â–∏–∫–∞.\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.",
            parse_mode="HTML"
        )
        return
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    users_repo = UsersRepo(db)
    if not await users_repo.get(m.from_user.id):
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
        await users_repo.upsert(m.from_user.id, username=m.from_user.username)
        logging.info(f"START PAYLOAD: Created new user {m.from_user.id} in database")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        await users_repo.update_username(m.from_user.id, m.from_user.username)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫
    await users_repo.set_active_mailbox(m.from_user.id, mailbox_id)
    logging.info(f"START PAYLOAD: Set active mailbox {mailbox_id} for user {m.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —è—â–∏–∫–æ–º
    from app.core.config import settings
    _, _, _, _, _, creator_id = box
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
    can_manage = False
    if settings.SUPERADMIN_ID and m.from_user.id == settings.SUPERADMIN_ID:
        can_manage = True  # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω
    elif creator_id is not None and isinstance(creator_id, int):
        can_manage = creator_id == m.from_user.id  # –°–æ–∑–¥–∞—Ç–µ–ª—å —è—â–∏–∫–∞
    else:
        # –î–ª—è —è—â–∏–∫–æ–≤ –±–µ–∑ —Å–æ–∑–¥–∞—Ç–µ–ª—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        role = await users_repo.get_role(m.from_user.id)
        can_manage = role in ("admin", "superadmin")
    
    logging.info(f"START PAYLOAD: User {m.from_user.id} can_manage_mailbox: {can_manage}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    from app.keyboards.write_flow import start_kb_admin, start_kb_user
    
    if can_manage:
        kb = start_kb_admin()
        await m.answer(
            "‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –ø–∏—à–µ—Ç–µ –≤ —ç—Ç–æ—Ç —è—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "üìå <b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å deeplink-–ø–æ—Å—Ç\n"
            "üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å</b> ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–Ω–∞–ª–æ–º",
            reply_markup=kb
        )
    else:
        kb = start_kb_user()
        await m.answer(
            "‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –ø–∏—à–µ—Ç–µ –≤ —ç—Ç–æ—Ç —è—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤ –∫–∞–Ω–∞–ª.",
            reply_markup=kb
        )
