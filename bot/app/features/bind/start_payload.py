from aiogram import types
from aiogram.filters import CommandStart
import logging
from app.infra.repo.users_repo import UsersRepo
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.tg_api import user_is_member
from app.core.config import settings
from app.keyboards.write_flow import start_kb_admin, start_kb_user

async def cmd_start_payload(m: types.Message, db, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ deeplink —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ë–î"""
    
    try:
        # –§–∏–ª—å—Ç—Ä —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª, —á—Ç–æ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        logging.info(f"START with payload processing: '{m.text}'")
        
        payload = m.text.split()[1]
        if not payload.isdigit():
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
            return True
        
        try:
            mailbox_id = int(payload)
            if mailbox_id <= 0:
                await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —è—â–∏–∫–∞.")
                return True
        except (ValueError, OverflowError):
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —è—â–∏–∫–∞.")
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è—â–∏–∫–∞
        box = await MailboxesRepo(db).get(mailbox_id)
        if not box or len(box) < 6:
            await m.answer("‚ùå –Ø—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return True
        
        _, _, channel_id, _, _, creator_id = box
        
        if not channel_id:
            await m.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª —è—â–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if not await user_is_member(bot, channel_id, m.from_user.id):
            await m.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª —ç—Ç–æ–≥–æ —è—â–∏–∫–∞.\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.",
                parse_mode="HTML"
            )
            return True
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö
        users_repo = UsersRepo(db)
        user_data = await users_repo.get(m.from_user.id)
        
        if not user_data:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫
            await users_repo.upsert(m.from_user.id, username=m.from_user.username)
            await users_repo.set_active_mailbox(m.from_user.id, mailbox_id)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º username –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —è—â–∏–∫
            await users_repo.update_username(m.from_user.id, m.from_user.username)
            await users_repo.set_active_mailbox(m.from_user.id, mailbox_id)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ - –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
        can_manage = (
            (settings.SUPERADMIN_ID and m.from_user.id == settings.SUPERADMIN_ID) or
            (creator_id and creator_id == m.from_user.id)
        )
        
        # –ï—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –Ω–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
        if not can_manage and user_data:
            role = user_data[1] if len(user_data) > 1 else "user"
            can_manage = role in ("admin", "superadmin")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if can_manage:
            await m.answer(
                "‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –ø–∏—à–µ—Ç–µ –≤ —ç—Ç–æ—Ç —è—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                "‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—â–∏–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                "üìå <b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å deeplink-–ø–æ—Å—Ç\n"
                "üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å</b> ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–Ω–∞–ª–æ–º",
                reply_markup=start_kb_admin()
            )
        else:
            await m.answer(
                "‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –ø–∏—à–µ—Ç–µ –≤ —ç—Ç–æ—Ç —è—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤ –∫–∞–Ω–∞–ª.",
                reply_markup=start_kb_user()
            )
        
        return True
    
    except Exception as e:
        logging.error(f"Error processing deeplink for user {m.from_user.id}: {e}", exc_info=True)
        await m.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return True
