from aiogram import types
from app.infra.repo.posts_repo import PostsRepo
from app.services.relay_service import RelayService
from app.infra.repo.relays_repo import RelaysRepo
from app.services.alias_service import AliasService
from app.infra.repo.aliases_repo import AliasesRepo
from app.infra.repo.alias_words_repo import AliasWordsRepo
from app.infra.repo.alias_blocks_repo import AliasBlocksRepo
from app.infra.repo.stats_repo import StatsRepo
from app.services.stats_service import StatsService

async def cb_contact(c: types.CallbackQuery, db, bot, tz):
    rec = await PostsRepo(db).get(c.message.chat.id, c.message.message_id)
    if not rec:
        await c.answer("–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.", show_alert=True)
        return
    _, _, author_id, author_alias, _, _, _ = rec
    if c.from_user.id == author_id:
        await c.answer("–ù–µ—á–µ–≥–æ –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ üôÇ", show_alert=True)
        return
    
    # –°—Ä–∞–∑—É –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
    try:
        await c.answer("üí¨ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
        await bot.send_message(
            c.from_user.id,
            f"üí¨ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n\n"
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–∞ –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º <b>{author_alias}</b>.\n\n"
            f"üîí <b>–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º:</b> {await AliasService(AliasesRepo(db), tz, AliasWordsRepo(db), AliasBlocksRepo(db)).get_or_issue(c.from_user.id, active_mailbox_id)}\n\n"
            f"‚è∞ –ß–∞—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω 30 –º–∏–Ω—É—Ç.\n\n"
            f"üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</b>",
            parse_mode="HTML"
        )
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        requester_alias = await AliasService(AliasesRepo(db), tz, AliasWordsRepo(db), AliasBlocksRepo(db)).get_or_issue(c.from_user.id, active_mailbox_id)
        ok = await RelayService(bot, RelaysRepo(db)).open_dialog(author_id, c.from_user.id, author_alias, requester_alias)
        
        if ok:
            try:
                await StatsService(StatsRepo(db), tz).inc("relay_start")
            except Exception:
                pass
        else:
            await bot.send_message(c.from_user.id, "‚ùå –ê–≤—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–≤—è–∑–∏.")
            
    except Exception as e:
        await c.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —á–∞—Ç.", show_alert=True)
