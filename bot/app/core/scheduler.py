import asyncio
import time
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from aiogram import Bot
from app.infra.repo.posts_repo import PostsRepo
from app.infra.repo.extensions_repo import ExtensionsRepo
from app.infra.repo.relays_repo import RelaysRepo
from app.infra.repo.mailboxes_repo import MailboxesRepo
from app.infra.repo.stats_repo import StatsRepo
from app.infra.repo.users_repo import UsersRepo
from app.services.post_service import PostService
from app.utils.backup import BackupManager
from app.utils.admin_logger import log_backup_created

class Scheduler:
    def __init__(self, bot: Bot, tz: ZoneInfo, posts: PostsRepo, exts: ExtensionsRepo, relays: RelaysRepo, mailboxes: MailboxesRepo, stats: StatsRepo, users: UsersRepo, db=None):
        self.bot = bot
        self.tz = tz
        self.posts = posts
        self.exts = exts
        self.relays = relays
        self.mailboxes = mailboxes
        self.stats = stats
        self.users = users
        self.db = db
        self._task: asyncio.Task | None = None
        self._last_backup = None

    def start(self):
        if self._task is None:
            self._task = asyncio.create_task(self._run())

    async def _run(self):
        while True:
            try:
                await self._tick()
            except Exception as e:
                logging.error(f"Error in scheduler tick: {e}")
            await asyncio.sleep(5)

    async def _tick(self):
        now = int(time.time())
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
        expired_posts = await self.posts.list_expired(now)
        if expired_posts:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram batch'–µ–º
            for cid, mid in expired_posts:
                try:
                    await self.bot.delete_message(cid, mid)
                except Exception:
                    pass
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î batch'–µ–º
            post_keys = [f"{cid}:{mid}" for cid, mid in expired_posts]
            await self._batch_delete_posts(expired_posts, post_keys)
        
        await self.relays.purge_expired(now)
        await self._process_delayed_queue()
        await self._maybe_weekly_stats()
        await self._maybe_daily_backup()

    async def _batch_delete_posts(self, expired_posts: list, post_keys: list):
        """Batch —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏ –∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        if not expired_posts:
            return
            
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã batch'–µ–º
        await self.posts.batch_delete(expired_posts)
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è batch'–µ–º
        await self.exts.batch_delete_posts(post_keys)

    async def _process_delayed_queue(self):
        now = int(time.time())
        try:
            async with self.mailboxes.db.execute("SELECT id,user_id,mailbox_id,text,ttl_seconds,alias,cancel_message_id FROM delayed_queue WHERE run_at<=?", (now,)) as cur:
                rows = await cur.fetchall()
            
            if not rows:
                return
                
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —è—â–∏–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            mailbox_ids = list(set(row[2] for row in rows))
            mailboxes = await self.mailboxes.batch_get(mailbox_ids)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏
            processed_ids = []
            failed_ids = []
            
            for _id, user_id, mailbox_id, text, ttl, alias, cancel_message_id in rows:
                try:
                    if mailbox_id not in mailboxes:
                        processed_ids.append(_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                        continue
                        
                    _, _, channel_id, _, _, _ = mailboxes[mailbox_id]
                    svc = PostService(self.bot, self.tz, self.posts, self.exts)
                    
                    await svc.publish(channel_id, user_id, alias, text, ttl, mailbox_id)
                    processed_ids.append(_id)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                        channel_link = f"https://t.me/{channel_id.replace('@', '')}" if str(channel_id).startswith('@') else f"https://t.me/c/{str(channel_id)[4:]}" if str(channel_id).startswith('-100') else f"https://t.me/{channel_id}"
                        
                        await self.bot.send_message(
                            user_id, 
                            f"‚úÖ <b>–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                            f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> <a href='{channel_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>",
                            parse_mode="HTML",
                            disable_web_page_preview=True
                        )
                        
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if cancel_message_id:
                            try:
                                await self.bot.delete_message(user_id, cancel_message_id)
                            except Exception:
                                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    
                except Exception as e:
                    logging.error(f"Failed to send delayed message {_id}: {e}")
                    failed_ids.append(_id)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
                    try:
                        await self.bot.send_message(
                            user_id, 
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                        )
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            # –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if processed_ids:
                placeholders = ','.join('?' * len(processed_ids))
                await self.mailboxes.db.execute(f"DELETE FROM delayed_queue WHERE id IN ({placeholders})", processed_ids)
            
            # –î–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º run_at –Ω–∞ 5 –º–∏–Ω—É—Ç –¥–ª—è retry
            if failed_ids:
                retry_time = now + 300  # 5 –º–∏–Ω—É—Ç
                placeholders = ','.join('?' * len(failed_ids))
                await self.mailboxes.db.execute(
                    f"UPDATE delayed_queue SET run_at = ? WHERE id IN ({placeholders})", 
                    [retry_time] + failed_ids
                )
            
            await self.mailboxes.db.commit()
            
        except Exception as e:
            logging.error(f"Error in delayed queue processing: {e}")

    async def _maybe_weekly_stats(self):
        boxes = await self.mailboxes.list_all()
        now_dt = datetime.now(self.tz)
        dow = (now_dt.isoweekday())
        hhmm = now_dt.strftime("%H:%M")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —è—â–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        boxes_to_process = []
        for bid, title, channel_id, stat_day, stat_time, creator_id in boxes:
            if stat_day is not None and stat_day == dow and stat_time == hhmm:
                boxes_to_process.append((bid, title, channel_id))
        
        if not boxes_to_process:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —è—â–∏–∫–æ–≤
        since = (now_dt - timedelta(days=7)).strftime("%Y-%m-%d")
        aggregated_stats = await self.stats.get_aggregated_stats(since, "day")
        
        if not aggregated_stats:
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
        out = []
        for day, day_stats in aggregated_stats.items():
            items = [f"{key}:{total}" for key, total in day_stats.items()]
            out.append(f"{day} ‚Äî " + ", ".join(items))
        
        message_text = "–ú–∏–Ω–∏-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n" + "\n".join(out)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —è—â–∏–∫–∞–º
        for bid, title, channel_id in boxes_to_process:
            try:
                await self.bot.send_message(channel_id, message_text)
            except Exception:
                pass

    async def _maybe_daily_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø –≤ 3:00"""
        if not self.db:
            return
            
        now = datetime.now(self.tz)
        current_date = now.strftime("%Y-%m-%d")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ —É–∂–µ –±—ç–∫–∞–ø —Å–µ–≥–æ–¥–Ω—è
        if self._last_backup == current_date:
            return
            
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –≤ 3:00
        if now.hour == 3 and now.minute < 5:  # –í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 3:00
            try:
                backup_manager = BackupManager(self.db)
                backup_file = await backup_manager.save_backup()
                if backup_file:
                    self._last_backup = current_date
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞
                    log_backup_created(0, backup_file)  # 0 = —Å–∏—Å—Ç–µ–º–∞
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
                import logging
                logging.error(f"Failed to create daily backup: {e}")
