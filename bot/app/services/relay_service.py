import time
from aiogram import Bot
from app.infra.repo.relays_repo import RelaysRepo

class RelayService:
    def __init__(self, bot: Bot, relays: RelaysRepo):
        self.bot = bot
        self.relays = relays

    async def open_dialog(self, author_id: int, requester_id: int, author_alias: str, requester_alias: str) -> bool:
        import logging
        
        logging.info(f"RELAY SERVICE: open_dialog called for author {author_id} and requester {requester_id}")
        
        expires = int(time.time()) + 30*60
        
        txt_a = ("üí¨ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n\n"
                 f"–í—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–∞ –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º <b>{requester_alias}</b>.\n\n"
                 f"üîí <b>–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º:</b> {author_alias}\n\n"
                 f"‚è∞ –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω 30 –º–∏–Ω—É—Ç.\n\n"
                 f"üìù <b>–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n"
                 f"<code>/end</code> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
        txt_b = ("üí¨ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n\n"
                 f"–í—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–∞ –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º <b>{author_alias}</b>.\n\n"
                 f"üîí <b>–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º:</b> {requester_alias}\n\n"
                 f"‚è∞ –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω 30 –º–∏–Ω—É—Ç.\n\n"
                 f"üìù <b>–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n"
                 f"<code>/end</code> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
        
        ok = True
        a_message_id = None
        b_message_id = None
        
        try:
            msg_a = await self.bot.send_message(author_id, txt_a, parse_mode="HTML")
            a_message_id = msg_a.message_id
        except Exception as e:
            import logging
            logging.error(f"Failed to send message to author {author_id}: {e}")
            ok = False
        try:
            msg_b = await self.bot.send_message(requester_id, txt_b, parse_mode="HTML")
            b_message_id = msg_b.message_id
        except Exception as e:
            import logging
            logging.error(f"Failed to send message to requester {requester_id}: {e}")
            ok = False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–µ–π —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π
        relay_id = await self.relays.create(author_id, requester_id, author_alias, requester_alias, expires, a_message_id, b_message_id)
        
        logging.info(f"RELAY SERVICE: Created relay {relay_id} with a_message_id={a_message_id}, b_message_id={b_message_id}")
        logging.info(f"RELAY SERVICE: open_dialog result: {ok}")
        
        return ok

    async def pipe(self, sender_id: int, text: str) -> bool:
        now = int(time.time())
        row = await self.relays.get_active_for(sender_id, now)
        if not row:
            return False
        _, a_id, b_id, a_alias, b_alias, _, _, _ = row
        if sender_id == a_id:
            peer_id, sender_alias = b_id, a_alias
        else:
            peer_id, sender_alias = a_id, b_alias
        try:
            await self.bot.send_message(peer_id, f"{sender_alias}: {text}")
        except Exception:
            pass
        return True

    async def handle_reply(self, sender_id: int, reply_to_message_id: int, text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–ª–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞"""
        import logging
        
        logging.info(f"RELAY SERVICE: handle_reply called for sender {sender_id}, message_id {reply_to_message_id}")
        
        now = int(time.time())
        row = await self.relays.get_by_message_id(sender_id, reply_to_message_id, now)
        
        if not row:
            logging.info(f"RELAY SERVICE: No active relay found for sender {sender_id} and message_id {reply_to_message_id}")
            return False
        
        logging.info(f"RELAY SERVICE: Found relay: {row}")
        
        _, a_id, b_id, a_alias, b_alias, _, a_msg_id, b_msg_id = row
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if sender_id == a_id:
            peer_id, sender_alias, peer_msg_id = b_id, a_alias, b_msg_id
        else:
            peer_id, sender_alias, peer_msg_id = a_id, b_alias, a_msg_id
        
        logging.info(f"RELAY SERVICE: Sending message from {sender_alias} to {peer_id}, peer_msg_id: {peer_msg_id}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if peer_msg_id:
                await self.bot.send_message(peer_id, f"{sender_alias}: {text}", reply_to_message_id=peer_msg_id)
                logging.info(f"RELAY SERVICE: Message sent as reply to {peer_msg_id}")
            else:
                await self.bot.send_message(peer_id, f"{sender_alias}: {text}")
                logging.info(f"RELAY SERVICE: Message sent without reply")
        except Exception as e:
            logging.error(f"RELAY SERVICE: Error sending message: {e}")
            return False
        
        return True

    async def end_for(self, user_id: int) -> None:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        now = int(time.time())
        active_relays = await self.relays.get_active_for(user_id, now)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        await self.relays.close_all_for(user_id, now)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if active_relays:
            _, a_id, b_id, a_alias, b_alias, _, _, _ = active_relays
            if user_id == a_id:
                peer_id, peer_alias = b_id, b_alias
            else:
                peer_id, peer_alias = a_id, a_alias
            
            try:
                await self.bot.send_message(peer_id, f"üîí –î–∏–∞–ª–æ–≥ —Å ¬´{peer_alias}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
            except Exception:
                pass
