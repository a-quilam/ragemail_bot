#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""
import re
import sys
from datetime import datetime, timedelta
from collections import defaultdict, Counter

def analyze_log_performance(log_file_path: str, hours_back: int = 24):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
    
    Args:
        log_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        hours_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    duration_pattern = r'Update id=(\d+) is handled\. Duration (\d+) ms'
    slow_operation_pattern = r'SLOW OPERATION: (.+) took ([\d.]+)ms'
    slow_db_pattern = r'SLOW DB OPERATION: (.+) took ([\d.]+)ms'
    slow_message_pattern = r'SLOW MESSAGE PROCESSING: message_id=(\d+), user_id=(\d+), handler=(.+), duration=([\d.]+)ms'
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    update_durations = []
    slow_operations = []
    slow_db_operations = []
    slow_messages = []
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
    cutoff_time = datetime.now() - timedelta(hours=hours_back)
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤...")
    print(f"üìÖ –° {cutoff_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        with open(log_file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ª–æ–≥–∞
                    time_match = re.match(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
                    if time_match:
                        log_time = datetime.strptime(time_match.group(1), '%Y-%m-%d %H:%M:%S')
                        if log_time < cutoff_time:
                            continue
                    
                    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤
                    duration_match = re.search(duration_pattern, line)
                    if duration_match:
                        update_id, duration = duration_match.groups()
                        update_durations.append(int(duration))
                    
                    # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    slow_op_match = re.search(slow_operation_pattern, line)
                    if slow_op_match:
                        operation, duration = slow_op_match.groups()
                        slow_operations.append((operation, float(duration)))
                    
                    # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ë–î –æ–ø–µ—Ä–∞—Ü–∏–π
                    slow_db_match = re.search(slow_db_pattern, line)
                    if slow_db_match:
                        operation, duration = slow_db_match.groups()
                        slow_db_operations.append((operation, float(duration)))
                    
                    # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    slow_msg_match = re.search(slow_message_pattern, line)
                    if slow_msg_match:
                        msg_id, user_id, handler, duration = slow_msg_match.groups()
                        slow_messages.append((int(msg_id), int(user_id), handler, float(duration)))
                
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
                    continue
    
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file_path}")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not update_durations:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–†–ï–ú–ï–ù–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
    print(f"   –í—Å–µ–≥–æ –∞–ø–¥–µ–π—Ç–æ–≤: {len(update_durations)}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(update_durations) / len(update_durations):.1f}ms")
    print(f"   –ú–µ–¥–∏–∞–Ω–∞: {sorted(update_durations)[len(update_durations)//2]}ms")
    print(f"   –ú–∏–Ω–∏–º—É–º: {min(update_durations)}ms")
    print(f"   –ú–∞–∫—Å–∏–º—É–º: {max(update_durations)}ms")
    
    # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã
    slow_updates = [d for d in update_durations if d > 500]
    very_slow_updates = [d for d in update_durations if d > 1000]
    
    print(f"\nüêå –ú–ï–î–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ö–ò:")
    print(f"   > 500ms: {len(slow_updates)} ({len(slow_updates)/len(update_durations)*100:.1f}%)")
    print(f"   > 1000ms: {len(very_slow_updates)} ({len(very_slow_updates)/len(update_durations)*100:.1f}%)")
    
    if very_slow_updates:
        print(f"   –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ: {sorted(very_slow_updates, reverse=True)[:5]}ms")
    
    # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if slow_operations:
        print(f"\nüîß –ú–ï–î–õ–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ({len(slow_operations)}):")
        operation_stats = defaultdict(list)
        for op, duration in slow_operations:
            operation_stats[op].append(duration)
        
        for op, durations in sorted(operation_stats.items(), key=lambda x: max(x[1]), reverse=True):
            print(f"   {op}: {len(durations)} —Ä–∞–∑, –º–∞–∫—Å: {max(durations):.1f}ms, —Å—Ä–µ–¥–Ω–µ–µ: {sum(durations)/len(durations):.1f}ms")
    
    # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –ë–î –æ–ø–µ—Ä–∞—Ü–∏–π
    if slow_db_operations:
        print(f"\nüóÑÔ∏è –ú–ï–î–õ–ï–ù–ù–´–ï –ë–î –û–ü–ï–†–ê–¶–ò–ò ({len(slow_db_operations)}):")
        db_stats = defaultdict(list)
        for op, duration in slow_db_operations:
            db_stats[op].append(duration)
        
        for op, durations in sorted(db_stats.items(), key=lambda x: max(x[1]), reverse=True):
            print(f"   {op}: {len(durations)} —Ä–∞–∑, –º–∞–∫—Å: {max(durations):.1f}ms, —Å—Ä–µ–¥–Ω–µ–µ: {sum(durations)/len(durations):.1f}ms")
    
    # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if slow_messages:
        print(f"\nüí¨ –ú–ï–î–õ–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ({len(slow_messages)}):")
        handler_stats = defaultdict(list)
        for msg_id, user_id, handler, duration in slow_messages:
            handler_stats[handler].append(duration)
        
        for handler, durations in sorted(handler_stats.items(), key=lambda x: max(x[1]), reverse=True):
            print(f"   {handler}: {len(durations)} —Ä–∞–∑, –º–∞–∫—Å: {max(durations):.1f}ms, —Å—Ä–µ–¥–Ω–µ–µ: {sum(durations)/len(durations):.1f}ms")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if len(very_slow_updates) / len(update_durations) > 0.05:  # >5% –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã—Ö
        print("   ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ (>1000ms)")
        print("   üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å AliasService –∏ –ë–î –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    if len(slow_updates) / len(update_durations) > 0.2:  # >20% –º–µ–¥–ª–µ–Ω–Ω—ã—Ö
        print("   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ (>500ms)")
        print("   üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
    
    if slow_db_operations:
        print("   üóÑÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        print("   üìä –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –∏ connection pooling")
    
    if slow_operations:
        print("   ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print("   üöÄ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python performance_monitor.py <–ø—É—Ç—å_–∫_–ª–æ–≥–∞–º> [—á–∞—Å–æ–≤_–Ω–∞–∑–∞–¥]")
        print("–ü—Ä–∏–º–µ—Ä: python performance_monitor.py bot.log 24")
        sys.exit(1)
    
    log_file = sys.argv[1]
    hours = int(sys.argv[2]) if len(sys.argv) > 2 else 24
    
    analyze_log_performance(log_file, hours)

if __name__ == "__main__":
    main()
