#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–µ—Ç–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞
"""
import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

from app.core.config import settings
from app.core.network_config import NetworkConfig
from app.services.network_monitor import NetworkMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_network_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        bot = NetworkConfig.create_bot_with_network_config(settings.BOT_TOKEN, settings)
        print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ—Ç–µ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API...")
        is_connected = await NetworkConfig.test_connection(bot)
        
        if is_connected:
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Å–µ—Ç–∏
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–µ—Ç–∏...")
        monitor = NetworkMonitor(bot, check_interval=5.0)  # –ö–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        def on_health_change(is_healthy: bool):
            status = "‚úÖ –ó–¥–æ—Ä–æ–≤–æ–µ" if is_healthy else "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã"
            print(f"üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {status}")
        
        monitor.add_health_callback(on_health_change)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        print("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏...")
        await monitor.start_monitoring()
        
        # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        await asyncio.sleep(15)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitor.get_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_requests']}")
        print(f"   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_requests']}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
        print(f"   ‚Ä¢ –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'–î–∞' if stats['is_healthy'] else '–ù–µ—Ç'}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await monitor.stop_monitoring()
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        print("üîí –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logging.error(f"Test error: {e}", exc_info=True)
        return False

async def test_retry_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É retry"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ retry...")
    
    from app.utils.error_handler import handle_network_error_with_retry
    from aiogram.exceptions import TelegramNetworkError
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
    fake_error = TelegramNetworkError("HTTP Client says - Request timeout error")
    
    print("‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏...")
    result = await handle_network_error_with_retry(
        fake_error, 
        "test_operation", 
        max_retries=2,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç
        base_delay=0.5  # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    )
    
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏: {result}")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏:")
    print(f"   ‚Ä¢ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {settings.NETWORK_CONNECT_TIMEOUT}—Å")
    print(f"   ‚Ä¢ –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è: {settings.NETWORK_READ_TIMEOUT}—Å")
    print(f"   ‚Ä¢ –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç: {settings.NETWORK_TOTAL_TIMEOUT}—Å")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {settings.NETWORK_MAX_RETRIES}")
    print(f"   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {settings.NETWORK_BASE_DELAY}—Å")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {settings.NETWORK_MAX_DELAY}—Å")
    print(f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {settings.NETWORK_BACKOFF_FACTOR}")
    print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {settings.NETWORK_MONITOR_INTERVAL}—Å")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏
    config_success = await test_network_config()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É retry
    retry_success = await test_retry_logic()
    
    print("\n" + "=" * 50)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if config_success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   ‚Ä¢ –õ–æ–≥–∏–∫–∞ retry: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if retry_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if config_success and retry_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üåê –°–µ—Ç–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏")

if __name__ == "__main__":
    asyncio.run(main())
